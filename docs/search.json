[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬 프로그래밍 (2024)",
    "section": "",
    "text": "질문하는 방법\n\n이메일: guebin@jbnu.ac.kr\n직접방문: 자연과학대학 본관 205호\nZoom: 이메일로 미리 시간을 정할 것\n카카오톡: http://pf.kakao.com/_txeIFG/chat\n\n강의노트\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 13, 2024\n\n\n02wk-1: Quiz 1 (예상문제)\n\n\n최규빈 \n\n\n\n\nMar 8, 2024\n\n\n01wk-2: 파이썬은 좋은 계산기다\n\n\n최규빈 \n\n\n\n\nMar 6, 2024\n\n\n01wk-1: 강의소개\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/02wk-1.html",
    "href": "posts/02wk-1.html",
    "title": "02wk-1: Quiz 1 (예상문제)",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n\n\n\n\nNote\n\n\n\n\n이 문항은 예시일 뿐이며, 본 문항들이 그대로 시험에 출제되지는 않음.\n일부문항은 숫자를 바꿔서 출제되거나 그대로 출제될 수 있음.\n일부문항은 모범답안이 제시되어 있음. (참고용으로..)\n예상문제를 풀기 어려운 경우 질문가능함 (힌트를 주거나 풀이를 알려줄 수 있음, 혹은 학생이 풀이한 답안을 검토하고 피드백 줄 수 있음)\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n모든 문항은 부분점수 없음. (예를들어 문제1-(1)의 경우 p까지는 생성하였지만 그래프를 그리지 못한 경우 0점처리함)\n일부문항은 부분문제를 모두 맞출경우만 정답으로 인정함. 예를들면 문제2와 같은 경우.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp등)은 채점하지 않음. 즉 0점 처리함. 제출방법 모르면 물어볼것!\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n\n\n\n\n문제 1.\n(1) \\(0&lt;p&lt;1\\) 인 범위에서 \\(p(1-p)\\)의 그래프를 그려라. – 5점\n(풀이)\n\np = np.linspace(1/100,1,100)[:-1]\np\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n\nplt.plot(p,p*(1-p))\n\n\n\n\n\n\n\n\n(2) \\(0&lt;p&lt;1\\) 의 범위에서 \\(p(1-p)\\)를 최대로 만드는 \\(p\\) 값을 파이썬을 이용하여 계산하라. – 5점\n\n# 힌트: 손으로 풀어보면 답은 0.5라는건 알겠죠? \n\n(3) 아래와 같이 50개의 숫자를 나열한 배열 \\({\\bf x}=[x_1,x_2,\\dots,x_n]\\)을 상상하자. – 10점\n\nx = np.array([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n              0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n              0, 0, 0, 0, 1, 0])\nx\n\narray([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0])\n\n\n위와 같은 \\(x_i\\)에 대하여 아래와 같은 함수 \\(l(p)\\)를 정의하고 \\(0&lt;p&lt;1\\)에서의 \\(l(p)\\)의 그래프를 그려라.\n\\[l(p)=\\sum_{i=1}^nx_i \\log p +\\left(n-\\sum_{i=1}^{n}x_i \\right)\\log(1-p)\\]\nhint\n\n\\(n=50\\) 으로 설정해야겠죠?\n\\(\\sum_{i=1}^{50}x_i=s\\)를 미리 계산하고 \\(s\\)를 이용하여 함수 \\(l(p)=s\\log p + (50-s)\\log(1-p)\\) 를 정의하세요.\n\n\n# 시각화예시\n\n/tmp/ipykernel_74601/1320384517.py:2: RuntimeWarning: divide by zero encountered in log\n  return np.log(p)*np.sum(x) + (50-np.sum(x))*np.log(1-p)\n\n\n\n\n\n\n\n\n\n(4) 파이썬을 이용하여 아래를 근사계산하라. – 5점\n\\[\\lim_{h \\to 0}\\frac{l(0.32+h)-l(p)}{h}\\]\n\n# 힌트: 답은 0이에요\n\n(5) \\(0&lt;p&lt;1\\)의 범위에서 \\(l(p)\\)의 최대값을 구하여라. – 5점\n\n# 힌트: 답은 0.32\n\n\n\n문제 2.\n\n모두 맞출 경우만 정답으로 인정\n\n(1) 아래의 list에서 마지막 원소를 뽑는 코드를 작성하라.\n\nlst = [11,22,33,44,55] \nlst \n\n[11, 22, 33, 44, 55]\n\n\n(풀이)\n\nlst[-1]\n\n55\n\n\n(2) 아래의 list에서 마지막 2개의 원소를 제외하고 뽑는 코드를 작성하라.\n\nlst = [11,22,33,44,55]\nlst\n\n[11, 22, 33, 44, 55]\n\n\n(풀이)\n\nlst[:-2]\n\n[11, 22, 33]\n\n\n(3) lambda를 이용하여 \\(f(x)=x^2+1\\)에 대응하는 함수를 선언하라.\n(4) 아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(50)\nx\n\narray([0.81768226, 0.04953212, 0.83868626, 0.61977707, 0.12254052,\n       0.11712779, 0.8795562 , 0.97941543, 0.90986893, 0.96667407,\n       0.59164493, 0.84014933, 0.89714578, 0.76530684, 0.40073371,\n       0.38061141, 0.4305124 , 0.40991094, 0.00972398, 0.59732079,\n       0.8852783 , 0.31328711, 0.6141936 , 0.36838019, 0.08044368,\n       0.47142422, 0.43324944, 0.22441988, 0.01174913, 0.91587271,\n       0.88325068, 0.32707103, 0.45758847, 0.55495369, 0.55845013,\n       0.75018778, 0.29947949, 0.85888413, 0.60465549, 0.00651133,\n       0.80605888, 0.06988897, 0.76763953, 0.72438164, 0.06247252,\n       0.97571034, 0.76681327, 0.12138996, 0.14946193, 0.08540348])\n\n\n생성된 값의 최대값을 출력하는 파이썬 코드를 작성하라.\n\n# 힌트: 답은 0.9794154308159254\n\n(5) 아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(50)\nx\n\narray([0.81768226, 0.04953212, 0.83868626, 0.61977707, 0.12254052,\n       0.11712779, 0.8795562 , 0.97941543, 0.90986893, 0.96667407,\n       0.59164493, 0.84014933, 0.89714578, 0.76530684, 0.40073371,\n       0.38061141, 0.4305124 , 0.40991094, 0.00972398, 0.59732079,\n       0.8852783 , 0.31328711, 0.6141936 , 0.36838019, 0.08044368,\n       0.47142422, 0.43324944, 0.22441988, 0.01174913, 0.91587271,\n       0.88325068, 0.32707103, 0.45758847, 0.55495369, 0.55845013,\n       0.75018778, 0.29947949, 0.85888413, 0.60465549, 0.00651133,\n       0.80605888, 0.06988897, 0.76763953, 0.72438164, 0.06247252,\n       0.97571034, 0.76681327, 0.12138996, 0.14946193, 0.08540348])\n\n\n생성된 값중 0.6와 가장 가까운 값을 출력하는 파이썬 코드를 작성하라.\n\n# 힌트: 답은 0.5973207921703583\n\n\n\n문제 3.\n(1) \\(\\frac{\\pi}{2}&lt;x&lt;\\frac{3}{2}\\pi\\) 에서 \\(f(x)=\\sin(\\frac{3}{2}x)\\) 와 \\(g(x)=\\cos(2x)\\sin(5x)\\) 의 교점의 수를 구하여라.\n(풀이)\n\nx = np.linspace(np.pi/2,3/2*np.pi,100)[:-1]\nx\n\narray([1.57079633, 1.60252959, 1.63426285, 1.6659961 , 1.69772936,\n       1.72946262, 1.76119588, 1.79292914, 1.8246624 , 1.85639566,\n       1.88812892, 1.91986218, 1.95159544, 1.9833287 , 2.01506195,\n       2.04679521, 2.07852847, 2.11026173, 2.14199499, 2.17372825,\n       2.20546151, 2.23719477, 2.26892803, 2.30066129, 2.33239455,\n       2.3641278 , 2.39586106, 2.42759432, 2.45932758, 2.49106084,\n       2.5227941 , 2.55452736, 2.58626062, 2.61799388, 2.64972714,\n       2.6814604 , 2.71319366, 2.74492691, 2.77666017, 2.80839343,\n       2.84012669, 2.87185995, 2.90359321, 2.93532647, 2.96705973,\n       2.99879299, 3.03052625, 3.06225951, 3.09399276, 3.12572602,\n       3.15745928, 3.18919254, 3.2209258 , 3.25265906, 3.28439232,\n       3.31612558, 3.34785884, 3.3795921 , 3.41132536, 3.44305862,\n       3.47479187, 3.50652513, 3.53825839, 3.56999165, 3.60172491,\n       3.63345817, 3.66519143, 3.69692469, 3.72865795, 3.76039121,\n       3.79212447, 3.82385772, 3.85559098, 3.88732424, 3.9190575 ,\n       3.95079076, 3.98252402, 4.01425728, 4.04599054, 4.0777238 ,\n       4.10945706, 4.14119032, 4.17292358, 4.20465683, 4.23639009,\n       4.26812335, 4.29985661, 4.33158987, 4.36332313, 4.39505639,\n       4.42678965, 4.45852291, 4.49025617, 4.52198943, 4.55372268,\n       4.58545594, 4.6171892 , 4.64892246, 4.68065572])\n\n\n\nplt.plot(x,np.sin(1.5*x))\nplt.plot(x,np.cos(2*x)*np.sin(5*x))\n\n\n\n\n\n\n\n\n\n# 답 3개\n\n(2) \\(a_n=\\frac{1}{n(n+1)}\\) 일때 \\(S_1,\\dots,S_{20}\\)을 구하여라."
  },
  {
    "objectID": "posts/01wk-2.html#a.-함수를-선언하는-두-가지-방법",
    "href": "posts/01wk-2.html#a.-함수를-선언하는-두-가지-방법",
    "title": "01wk-2: 파이썬은 좋은 계산기다",
    "section": "A. 함수를 선언하는 두 가지 방법",
    "text": "A. 함수를 선언하는 두 가지 방법\n- 방법1: def를 이용하는 방법\n\ndef f(x):\n    return x+1\n\n\nf(3)\n\n4\n\n\n- 방법2: lambda를 사용하는 방법\n\nf = lambda x: x+1\n\n\nf(3)\n\n4"
  },
  {
    "objectID": "posts/01wk-2.html#b.-list와-np.array의-차이점",
    "href": "posts/01wk-2.html#b.-list와-np.array의-차이점",
    "title": "01wk-2: 파이썬은 좋은 계산기다",
    "section": "B. list와 np.array의 차이점",
    "text": "B. list와 np.array의 차이점\n- 리스트는 수학친화적이지 않다.\n\nlst1 = [1,2,3]\nlst2 = [-1, -2, -3]\n\n\nlst1+lst2\n\n[1, 2, 3, -1, -2, -3]\n\n\n- 넘파이는 수학친화적이다.\n\narr1 = np.array([1,2,3])\narr2 = np.array([-1, -2, -3])\n\n\narr1+arr2\n\narray([0, 0, 0])"
  },
  {
    "objectID": "posts/01wk-2.html#c.-인덱스로-벡터의-원소를-뽑는-방법",
    "href": "posts/01wk-2.html#c.-인덱스로-벡터의-원소를-뽑는-방법",
    "title": "01wk-2: 파이썬은 좋은 계산기다",
    "section": "C. 인덱스로 벡터의 원소를 뽑는 방법",
    "text": "C. 인덱스로 벡터의 원소를 뽑는 방법\n\nx = [11,22,33,-22,-33,-44]\n\n- 첫번째 원소를 뽑고 싶다면?\n\nx[0]\n\n11\n\n\n- 두번째 원소를 뽑고 싶다면?\n\nx[1]\n\n22\n\n\n- 마지막 원소를 뽑고 싶다면?\n\nx[5]\n\n-44\n\n\n\nx[-1]\n\n-44\n\n\n- 마지막에서 두번째 원소를 뽑고 싶다면?\n\nx[4]\n\n-33\n\n\n\nx[-2]\n\n-33\n\n\n- index = 0,1,2 에 해당하는 원소만 추출\n\nx[0:3] # 마지막 인덱스 3은 포함되지 않음 \n\n[11, 22, 33]\n\n\n- index = 2,3,4 에 해당하는 원소만 추출\n\nx[2:5] # 2,3,4에 해당하는 인덱스만 추출\n\n[33, -22, -33]\n\n\n- x[0:3]와 같이 처음 시작점이 0인 경우 생략가능\n\nx[:3] \n\n[11, 22, 33]\n\n\n- x[k:]와 같은 코드는 index=k에서 끝까지 뽑는다는 의미이다.\n\nx[3:6] #3,4,5\n\n[-22, -33, -44]\n\n\n\nx[3:]\n\n[-22, -33, -44]"
  },
  {
    "objectID": "posts/01wk-2.html#d.-np.cumsum-np.cumprod",
    "href": "posts/01wk-2.html#d.-np.cumsum-np.cumprod",
    "title": "01wk-2: 파이썬은 좋은 계산기다",
    "section": "D. np.cumsum(), np.cumprod()",
    "text": "D. np.cumsum(), np.cumprod()\n- 누적합\n\narr = np.array([1,-1,1,-1,1,-1])\narr\n\narray([ 1, -1,  1, -1,  1, -1])\n\n\n\nnp.cumsum(arr)\n\narray([1, 0, 1, 0, 1, 0])\n\n\n- 누적곱\n\narr = np.array([1,2,3,4])\narr\n\narray([1, 2, 3, 4])\n\n\n\nnp.cumprod(arr)\n\narray([ 1,  2,  6, 24])"
  },
  {
    "objectID": "posts/01wk-2.html#e.-plt.plot",
    "href": "posts/01wk-2.html#e.-plt.plot",
    "title": "01wk-2: 파이썬은 좋은 계산기다",
    "section": "E. plt.plot()",
    "text": "E. plt.plot()\n- 예시1: \\(x\\)없이 그리기 (라인)\n\ny=[2,3,5,2]\nplt.plot(y)\n\n\n\n\n\n\n\n\n- 예시2: \\(x\\)없이 그리기 (점)\n\ny=[2,3,5,2]\nplt.plot(y,'o')\n\n\n\n\n\n\n\n\n- 예시3: \\((x,y)\\)를 전달하여 그리기(점)\n\nx=[20,21,22,23]\ny=[2,3,5,2]\nplt.plot(x,y,'o')\n\n\n\n\n\n\n\n\n- 예시4: 겹쳐서 그리기\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o')\nplt.plot(x,y2,'--o')\n\n\n\n\n\n\n\n\n- 예시5: 겹쳐서 그리기 + 라벨\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o',label=\"y1\")\nplt.plot(x,y2,'--o',label=\"y2\")\nplt.legend()\n\n\n\n\n\n\n\n\n- 예시5: 겹쳐서 그리기 + latex 라벨\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o',label=r\"$y_1$\")\nplt.plot(x,y2,'--o',label=r\"$y_2$\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nlatex수식은 이 수업에서 필수사항은 아님\nlatex수식을 사용할 수 없어도 시험점수를 획득할때 아무런 불이익이 없음."
  },
  {
    "objectID": "posts/01wk-2.html#f.-np.argmax-np.argmin",
    "href": "posts/01wk-2.html#f.-np.argmax-np.argmin",
    "title": "01wk-2: 파이썬은 좋은 계산기다",
    "section": "F. np.argmax, np.argmin",
    "text": "F. np.argmax, np.argmin\n- 예시1\n\narr = np.array([1,2,3,2,1,0])\narr\n\narray([1, 2, 3, 2, 1, 0])\n\n\n\nnp.argmax(arr),np.argmin(arr)\n\n(2, 5)\n\n\n# 예제 – 두 함수의 교점\n\\(-1 \\leq x \\leq 3\\) 에서\n\n\\(f(x)=(x-1)^2\\) 와\n\\(g(x)=-2x+5\\)\n\n의 교점의 좌표를 구하여라.\n(풀이)\n\nx = np.linspace(-1,3,101)\nf = (x-1)**2\ng = -2*x+5 \nplt.plot(x,f,label=r\"$f(x)=(x-1)^2$\")\nplt.plot(x,g,label=r\"$g(x)=-2x+5$\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nx[np.argmin(abs(f-g))]\n\n2.0\n\n\n\n2,(2-1)**2\n\n(2, 1)\n\n\n\n이것이 교점의 좌표"
  },
  {
    "objectID": "posts/01wk-1.html",
    "href": "posts/01wk-1.html",
    "title": "01wk-1: 강의소개",
    "section": "",
    "text": "1. 전북대 + 충남대\n- 전북대는 전북대학생끼리 성적평가.\n- 충남대는 충남대학생끼리 성적평가.\n- 충남대 학생의 경우 교양과목임을 감안하여 채점할 예정임.\n\n\n2. 플립러닝\n- 수업: 매주 금요일 오후까지 강의홈페이지에 업로드 될 예정.\n\n수업은 영상업로드 방식 (각자 수강)\n영상시청에 대한 별도의 출석체크는 없음.\n\n- 퀴즈: 매주 수요일 수업시간에 퀴즈를 볼 예정임.\n\n시험은 오픈북이며 구글검색, 강의노트 참고등을 허용함.\nChatGPT는 허용하지 않음.\n\n\n\n3. 성적처리 방식\n- 출석 10%, 퀴즈 50%, 중간 20%, 기말 20%\n\n출석은 매주 수요일 퀴즈시간에 체크할 예정임. (따라서 퀴즈를 보면 출석점수는 자동으로 인정)\n사실상 퀴즈의 점수비중이 60%"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]