[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬 프로그래밍 (2024)",
    "section": "",
    "text": "질문하는 방법\n\n이메일: guebin@jbnu.ac.kr\n직접방문: 자연과학대학 본관 205호\nZoom: 이메일로 미리 시간을 정할 것\n카카오톡: http://pf.kakao.com/_txeIFG/chat\n\n강의노트\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJun 30, 2024\n\n\nsupp-1: matplotlib\n\n\n최규빈 \n\n\n\n\nJun 21, 2024\n\n\n15wk-2: 기말고사\n\n\n최규빈 \n\n\n\n\nJun 20, 2024\n\n\n15wk-2: 기말고사대비 연습\n\n\n최규빈 \n\n\n\n\nJun 12, 2024\n\n\n15wk-1: 퀴즈10\n\n\n최규빈 \n\n\n\n\nJun 7, 2024\n\n\n14wk-2: 클래스 (4)\n\n\n최규빈 \n\n\n\n\nJun 5, 2024\n\n\n14wk-1: 퀴즈9\n\n\n최규빈 \n\n\n\n\nMay 31, 2024\n\n\n13wk-2: 클래스 (3)\n\n\n최규빈 \n\n\n\n\nMay 29, 2024\n\n\n13wk-1: 퀴즈8\n\n\n최규빈 \n\n\n\n\nMay 24, 2024\n\n\n12wk-2: 클래스 (2)\n\n\n최규빈 \n\n\n\n\nMay 22, 2024\n\n\n12wk-1: 퀴즈7\n\n\n최규빈 \n\n\n\n\nMay 17, 2024\n\n\n11wk-2: 클래스 (1)\n\n\n최규빈 \n\n\n\n\nMay 10, 2024\n\n\n10wk-2: pandas, 반복문자투리, 변수의범위\n\n\n최규빈 \n\n\n\n\nMay 8, 2024\n\n\n10wk-1: 퀴즈6\n\n\n최규빈 \n\n\n\n\nMay 3, 2024\n\n\n09wk-2: 중간고사\n\n\n최규빈 \n\n\n\n\nApr 26, 2024\n\n\n08wk-2: 랜덤모듈을 이용한 시뮬레이션 문제 예시\n\n\n최규빈 \n\n\n\n\nApr 24, 2024\n\n\n08wk-1: 퀴즈5\n\n\n최규빈 \n\n\n\n\nApr 19, 2024\n\n\n07wk-2: numpy (2)\n\n\n최규빈 \n\n\n\n\nApr 17, 2024\n\n\n07wk-1: 퀴즈4\n\n\n최규빈 \n\n\n\n\nApr 12, 2024\n\n\n06wk-2: numpy (1)\n\n\n최규빈 \n\n\n\n\nApr 5, 2024\n\n\n05wk-2: 파이썬의 자료형 (2)\n\n\n최규빈 \n\n\n\n\nMar 29, 2024\n\n\n04wk-2: 파이썬의 자료형 (1)\n\n\n최규빈 \n\n\n\n\nMar 27, 2024\n\n\n04wk-1: 퀴즈3\n\n\n최규빈 \n\n\n\n\nMar 22, 2024\n\n\n03wk-2: 리스트는 쓰레기인가?\n\n\n최규빈 \n\n\n\n\nMar 20, 2024\n\n\n03wk-1: 퀴즈2\n\n\n최규빈 \n\n\n\n\nMar 15, 2024\n\n\n02wk-2: 파이썬은 좋은 계산기다 (2)\n\n\n최규빈 \n\n\n\n\nMar 13, 2024\n\n\n02wk-1: 퀴즈1\n\n\n최규빈 \n\n\n\n\nMar 8, 2024\n\n\n01wk-2: 파이썬은 좋은 계산기다 (1)\n\n\n최규빈 \n\n\n\n\nMar 6, 2024\n\n\n01wk-1: 강의소개\n\n\n최규빈 \n\n\n\n\nDec 1, 2023\n\n\nA0: Quiz 1 (예상문제)\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/03wk-1.html",
    "href": "posts/03wk-1.html",
    "title": "03wk-1: 퀴즈2",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\n문제 1. – 10점\n\\(f(x)=x^3\\) 위의 임의의 점을 입력하면 접선을 리턴하는 함수를 구현하라. 이러한 함수를 이용하여 아래와 같은 그래프를 그려라. (범례는 표현하지 않아도 감점없음)\n\n#\n\n\n\n\n\n\n\n\n\n\\(x\\)의 범위는 \\((-5,5)\\) 이다.\n두 그래프는 \\(x=3\\) 에서 접한다.\n\n(풀이)\n\ndef make_func(x0):\n    f = lambda x: x**3\n    def func(x):\n        h = 0.0001\n        a = (f(x0+h)-f(x0))/h \n        return a*(x-x0) + f(x0)\n    return func\nx = np.linspace(-5,5,101)\ntan_line = make_func(3)\nplt.plot(x,x**3,'--')\nplt.plot(x,tan_line(x),'--')\n\n\n\n\n\n\n\n\n\n\n문제 2. – 10점1\n함수 \\(f(x)=(x+1)(x^2+3)\\)에 대하여 \\(f'(1)\\)의 값을 구하라.\n(풀이)\n\nf = lambda x: (x+1)*(x**2+3)\nh = 0.000001\n(f(1+h)-f(1))/h\n\n8.000004001473826\n\n\n\n1 2024년 수능 17번2 2024년 수능 4번 응용\n문제 3. – 10점2\n\\(0 \\leq x \\leq 4\\)의 범위에서 함수\n\\[f(x) =\\begin{cases} 3x-1 \\quad (x&lt;2) \\\\ x^2+1 \\quad (x\\geq 2) \\end{cases}\\]\n의 그래프를 그려라.\n(풀이)\n\nf = lambda x: 3*x-1 if x&lt;2 else x**2+1\nx = np.linspace(0,4,101)\nplt.plot(x,list(map(f,x)))\n\n\n\n\n\n\n\n\n\n\n문제 4. – 10점3\n\\(\\frac{3}{2}\\pi &lt; \\theta &lt; 2\\pi\\) 인 \\(\\theta\\) 에 대하여 \\(\\cos\\theta = \\frac{\\sqrt{6}}{3}\\) 일 때 \\(\\tan(\\theta)\\)의 값을 구하라.\n(풀이)\n\ntheta = np.linspace(3/2*np.pi,2*np.pi,100)\nnp.argmin(np.abs(np.cos(theta) - np.sqrt(6)/3))\n\n60\n\n\n\nnp.tan(theta[60])\n\n-0.7120967763793676\n\n\n\n3 2024년 9평 3번4 2024년 9평 25번\n문제 5. – 10점4\n함수 \\(f(x)=x+\\ln x\\)에 대하여 \\(\\int_1^{e} (1+\\frac{1}{x})f(x)dx\\)의 값은?\n(풀이)\n\nf = lambda x: x+np.log(x)\nx = np.linspace(1,np.exp(1),100)\nnp.mean((1+1/x)*f(x)) * (np.exp(1)-1)\n\n6.409521328970472\n\n\n\n\n문제 6. – 20점\n\n(2)번만 맞추어도 정답으로 인정\n\n(1) \\(f'(x)=x\\) 일 경우 \\(f(x)\\)의 그래프 개형을 그려라.\n(2) \\(f'(x)=|\\sin(x)|\\cos(x)\\) 일때 \\(f(x)\\)의 그래프 개형을 그려라.5\n5 2024년 수능 30번 변형\n\\(-3&lt;x&lt;3\\) 에서의 개형을 그릴것\n\n\n# 시각화예시\n\n\n\n\n\n\n\n\n(풀이)\n\nx = np.linspace(-3,3,101)\nff = np.abs(np.sin(x))*np.cos(x)\nf = np.cumsum(ff) * 0.06 \n\n\nplt.plot(x,ff)\nplt.plot(x,f)\n\n\n\n\n\n\n\n\n\n\n문제 7. – 30점\n첫째항이 1이고 공차가 \\(0&lt;d&lt;1\\) 인 등차수열에서, \\(\\sum_{n=1}^{75}a_n=1046.25\\) 를 만족하는 \\(d\\)를 찾아라.\n힌트1: 첫째항이 1이고 공차가 \\(d&gt;0\\)인 등차수열의 일반항은 \\(a_n = 1 +(n-1)d\\)와 같이 표현할 수 있다.\n힌트2: \\(d\\)는 아래중 하나의 값을 가진다.\n\nnp.linspace(0,1,101)[1:-1]\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n(풀이)\n\ndef func(d):\n    n = np.arange(1,76)\n    an = 1+(n-1)*d\n    return np.abs(np.sum(an)-1046.25)\n\n\nd_arr = np.linspace(0,1,101)[1:-1]\nd_arr[np.argmin(list(map(func,d_arr)))]\n\n0.35000000000000003\n\n\n\n\n\n\n\n\nNote\n\n\n\n정답을 구하지 못하여도 논리전개가 올바르면 만점처리함. 노가다로 답을 구한 경우 정답으로 인정하지 않음."
  },
  {
    "objectID": "posts/15wk-1.html",
    "href": "posts/15wk-1.html",
    "title": "15wk-1: 퀴즈10",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\n1. – 50점\n\n정확한 구현시에만 점수있음. 이외는 0점\n\n아래와 같은 기능을 하는 클래스 묶음생성기를 설계하라.\n# 예시1\n\n묶음 = 묶음생성기([1,2,3,4,5,6,7,8],n_groups=2)\n\n\n[x for x in 묶음]\n\n[[1, 3, 5, 7], [2, 4, 6, 8]]\n\n\n#\n# 예시2\n\nanimlas = [\"사자\", \"호랑이\", \"코끼리\", \"닭\", \"얼룩말\", \"캥거루\", \"판다\", \"나무늘보\", \"돼지\", \"양\"]\n묶음 = 묶음생성기(animlas,n_groups=3)\n\n\n[x for x in 묶음]\n\n[['사자', '닭', '판다', '양'], ['호랑이', '얼룩말', '나무늘보'], ['코끼리', '캥거루', '돼지']]\n\n\n#\n# 예시3\n\nsounds = ['어흥', '크앙', '뿌우', '꼬끼오', '이히힝', '캥거캥거', '냠냠', 'Zzz', '꾸울', '메에']\n\n\n묶음 = 묶음생성기(list(zip(animlas,sounds)),n_groups=4)\n\n\n[x for x in 묶음]\n\n[[('사자', '어흥'), ('얼룩말', '이히힝'), ('돼지', '꾸울')],\n [('호랑이', '크앙'), ('캥거루', '캥거캥거'), ('양', '메에')],\n [('코끼리', '뿌우'), ('판다', '냠냠')],\n [('닭', '꼬끼오'), ('나무늘보', 'Zzz')]]\n\n\n#\n(풀이)\n\nclass 묶음생성기:\n    def __init__(self,array,n_groups):\n        self.array = array \n        self.n_groups = n_groups \n        self.i = 0 \n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.i &lt; self.n_groups:\n            group = self.array[self.i::self.n_groups] \n            self.i = self.i + 1 \n            return group\n        else: \n            raise(StopIteration)            \n\n\n\n2. – 50점\n\n정확한 구현시에만 점수있음. 이외에는 0점\n\n아래와 같은 기능을 하는 클래스 애완동물을 설계하라.\n# 예시1\n\n하니 = 애완동물(name=\"하니\",sound=\"멍\")\n나비 = 애완동물(name=\"나비\",sound=\"야오옹\")\n\n동물명 &lt;하니&gt; 와 같이 살기로 결심했습니다.\n동물명 &lt;나비&gt; 와 같이 살기로 결심했습니다.\n\n\n\n하니()\n\n하니가 멍하고 울었습니다.\n\n\n\n나비()\n\n나비가 야오옹하고 울었습니다.\n\n\n\n애완동물.모두울어보세요()\n\n하니가 멍하고 울었습니다.\n나비가 야오옹하고 울었습니다.\n\n\n#\n# 예시2\n\n꿀이 = 애완동물(name=\"꿀이\",sound=\"꿀!\") \n크앙이 = 애완동물(name=\"크앙이\",sound=\"크앙!\") \n\n동물명 &lt;꿀이&gt; 와 같이 살기로 결심했습니다.\n동물명 &lt;크앙이&gt; 와 같이 살기로 결심했습니다.\n\n\n\n꿀이()\n\n꿀이가 꿀!하고 울었습니다.\n\n\n\n크앙이()\n\n크앙이가 크앙!하고 울었습니다.\n\n\n\n애완동물.모두모여보세요()\n\n하니,나비,꿀이,크앙이가 모두 모였습니다.\n\n\n\n애완동물.모두울어보세요()\n\n하니가 멍하고 울었습니다.\n나비가 야오옹하고 울었습니다.\n꿀이가 꿀!하고 울었습니다.\n크앙이가 크앙!하고 울었습니다.\n\n\n#\n# 예시3\n\n복순이 = 애완동물(name=\"복순이\",sound=\"멍멍\") \n\n동물명 &lt;복순이&gt; 와 같이 살기로 결심했습니다.\n\n\n\n복순이()\n\n복순이가 멍멍하고 울었습니다.\n\n\n\n애완동물.모두모여보세요()\n\n하니,나비,꿀이,크앙이,복순이가 모두 모였습니다.\n\n\n\n애완동물.모두울어보세요()\n\n하니가 멍하고 울었습니다.\n나비가 야오옹하고 울었습니다.\n꿀이가 꿀!하고 울었습니다.\n크앙이가 크앙!하고 울었습니다.\n복순이가 멍멍하고 울었습니다.\n\n\n#\n(풀이)\n\nclass 애완동물:\n    petlist = []\n    def __init__(self,name,sound):\n        self.name = name \n        self.sound = sound\n        print(f\"동물명 &lt;{self.name}&gt; 와 같이 살기로 결심했습니다.\") \n        애완동물.petlist.append(self)\n    def __call__(self):\n        print(f\"{self.name}가 {self.sound}하고 울었습니다.\")\n    @classmethod \n    def 모두울어보세요(cls):\n        for pet in cls.petlist:\n            pet()\n    @classmethod\n    def 모두모여보세요(cls):\n        text = \",\".join([pet.name for pet in cls.petlist])\n        print(f\"{text}가 모두 모였습니다.\")"
  },
  {
    "objectID": "posts/08wk-1.html",
    "href": "posts/08wk-1.html",
    "title": "08wk-1: 퀴즈5",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\n1. – 20점\n앞으로 읽어도 뒤로 읽어도 동일한 단어이면 true 그렇지 않으면 false를 리턴하는 함수 solution를 구현하라. 아래는 이러한 함수 solution를 사용한 예시이다.\n\nlst1 = ['기러기', '토마토', '스위스', '인도인', '별똥별', '우영우', '파이썬']\nlst2 = ['level', 'radar', 'noon', 'deified', 'rotor', 'python']\n\n\n[solution(l) for l in lst1]\n\n[True, True, True, True, True, True, False]\n\n\n\n[solution(l) for l in lst2]\n\n[True, True, True, True, True, False]\n\n\n(풀이)\n\nsolution = lambda x: x[::-1] == x\n\n\n[solution(l) for l in lst1]\n\n[True, True, True, True, True, True, False]\n\n\n\n[solution(l) for l in lst2]\n\n[True, True, True, True, True, False]\n\n\n\n\n2. – 40점\n아홉개의 공이있다. 이 가운데 여덟개는 무게가 같고 하나는 남은 하나는 좀 더 무겁다. 우리에게는 저울이 하나 있는데 이 저울로는 왼쪽의 공들이 무거운지 오른쪽의 공들이 무거운지밖에 알아낼 수 없다. 이 저울을 딱 두번만 사용하여 가장 무거운 공을 찾아내는 알고리즘을 solution 함수로 정리하여 제시하라. 공들의 무게는 길이가 9인 리스트로 온다고 가정한다. 출력은 가장 무거운 공이 위치한 index를 리턴하도록 한다.\n다음은 solution 함수를 실제로 구현하여 사용한 예시이다.\n\nsolution([2,1,1,1,1,1,1,1,1])\n\n0\n\n\n\nsolution([2,2,5,2,2,2,2,2,2])\n\n2\n\n\n(풀이)\n\nhint: 공을 세 개씩 세 그룹으로 나누세요\n\n\ndef solution(lst):\n    l1,l2,l3 = lst[:3],lst[3:6],lst[6:]\n    argmax = 0 \n    if sum(l1)&gt;sum(l2): # 0,1,2 중 가장 무거운 공이 있음 \n        if l1[0] &gt; l1[1]:\n            argmax = 0\n        elif l1[0] &lt; l1[1]:\n            argmax = 1 \n        else: \n            argmax = 2 \n    elif sum(l1)&lt;sum(l2): # 3,4,5 중 가장 무거운 공이 있음 \n        if l2[0] &gt; l2[1]:\n            argmax = 0+3\n        elif l2[0] &lt; l2[1]:\n            argmax = 1+3 \n        else: \n            argmax = 2+3 \n    else: # 6,7,8 중 가장 무거운 공이 있음 \n        if l3[0] &gt; l3[1]:\n            argmax = 0+6\n        elif l3[0] &lt; l3[1]:\n            argmax = 1+6 \n        else: \n            argmax = 2+6\n    return argmax \n\n\nsolution([2,1,1,1,1,1,1,1,1])\n\n0\n\n\n\nsolution([2,2,5,2,2,2,2,2,2])\n\n2\n\n\n\n\n5. – 40점\n\n카카오 채용연계형 인턴쉽 기출문제\n\n네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다. 다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.\n1478 --&gt; \"one4seveneight\"\n234567 --&gt; \"23four5six7\"\n10203 --&gt; \"1zerotwozero3\"\n이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.\n참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.\n\n\n\n숫자\n영단어\n\n\n\n\n0\nzero\n\n\n1\none\n\n\n2\ntwo\n\n\n3\nthree\n\n\n4\nfour\n\n\n5\nfive\n\n\n6\nsix\n\n\n7\nseven\n\n\n8\neight\n\n\n9\nnine\n\n\n\n- 제한사항\n\n1 ≤ s의 길이 ≤ 50\ns가 “zero” 또는 “0”으로 시작하는 경우는 주어지지 않습니다.\nreturn 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.\n\n- 입출력 예\n\n\n\ns\nresult\n\n\n\n\n“one4seveneight”\n1478\n\n\n“23four5six7”\n234567\n\n\n“2three45sixseven”\n234567\n\n\n“123”\n123\n\n\n\n- 입출력 예 설명\n\n입출력 예 #1 – 문제 예시와 같습니다.\n입출력 예 #2 – 문제 예시와 같습니다.\n입출력 예 #3 – “three”는 3, “six”는 6, “seven”은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다. 입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.\n입출력 예 #4 – s에는 영단어로 바뀐 부분이 없습니다.\n\n(풀이)\nhint – 아래의 dictionary를 이용하세요\n\ndef solution(s):\n    dct = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    for k,v in dct.items():\n        s = s.replace(k,v)    \n    return s \n\n\nsolution(\"one4seveneight\")\n\n'1478'\n\n\n\nsolution(\"23four5six7\")\n\n'234567'\n\n\n\nsolution(\"2three45sixseven\")\n\n'234567'\n\n\n\nsolution(\"123\")\n\n'123'"
  },
  {
    "objectID": "posts/05wk-2.html#a.-리스트-vs-튜플",
    "href": "posts/05wk-2.html#a.-리스트-vs-튜플",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "A. 리스트 vs 튜플",
    "text": "A. 리스트 vs 튜플\n- 공통점: (1) 컨테이너형타입이라는 점, 그리고 (2) 연산 및 인덱싱을 하는 방법은 리스트와 같음 - 차이점1: [] 대신에 ()를 사용한다. - 차이점2: 불변형이다. (원소의 값을 바꿀 수 없음) - 차이점3: 하나의 원소를 선언할 때는 (1,)와 같이 해야 한다. - 차이점4: 의미가 명확할때는 튜플의 ()를 생략가능하다.\n- 컨테이너형이라는 것이 무슨의미?\n\na=(4,6,'pencil', 3.2+4.6j, [3,4])\n\n\ntype(a[2])\n\nstr\n\n\n\ntype(a[3])\n\ncomplex\n\n\n- 연산의 유사성\n\n(1,2) + (3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n(1,2) * 2\n\n(1, 2, 1, 2)\n\n\n- 인덱싱의 유사성\n\ntpl = (11,21,31)\ntpl[1:]\n\n(21, 31)\n\n\n- 차이점2: 불변형이라는 것은 무슨의미?\n\na[2] = 'Pencil'\n\nTypeError: 'tuple' object does not support item assignment\n\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n\na=[4,6,'pencil', 3.2+4.6j, [3,4]]\n\n\na[2]\n\n'pencil'\n\n\n\na[2]='Pencil'\n\n\na\n\n[4, 6, 'Pencil', (3.2+4.6j), [3, 4]]\n\n\n- 차이점3: 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야 함.\n\n[1]+[2,3,4]\n\n[1, 2, 3, 4]\n\n\n\n(1,)+(2,3,4)\n\n(1, 2, 3, 4)\n\n\n- 차이점4: 의미가 명확할때 튜플의 괄호는 생략가능하다. (이게 중요합니다)\n\na=1,2\na\n\n(1, 2)\n\n\n의미가 명확할때 생략해야함\n\n1,2 + 3,4,5 \n\n(1, 5, 4, 5)\n\n\n\n(1,2) + (3,4,5) \n\n(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "posts/05wk-2.html#b.-선언",
    "href": "posts/05wk-2.html#b.-선언",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "B. 선언",
    "text": "B. 선언\n- 소괄호를 이용\n\na=(1,2,3)\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 생략가능하다는 점이 포인트\n\na=1,2,3\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 원소가 하나인 튜플을 만들고 싶다면?\n\na=(1,)\na\n\n(1,)"
  },
  {
    "objectID": "posts/05wk-2.html#c.-연산",
    "href": "posts/05wk-2.html#c.-연산",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "C. 연산",
    "text": "C. 연산\n- 리스트와 동일\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n(1,2)*2\n\n(1, 2, 1, 2)"
  },
  {
    "objectID": "posts/05wk-2.html#d.-인덱싱",
    "href": "posts/05wk-2.html#d.-인덱싱",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "D. 인덱싱",
    "text": "D. 인덱싱\n- 리스트와 동일\n\na=(1,2,3,-4,-5)\na\n\n(1, 2, 3, -4, -5)\n\n\n\na[-1]\n\n-5\n\n\n\na[-3:]\n\n(3, -4, -5)"
  },
  {
    "objectID": "posts/05wk-2.html#e.-슬기로운-튜플사용-star",
    "href": "posts/05wk-2.html#e.-슬기로운-튜플사용-star",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "E. 슬기로운 튜플사용 (\\(\\star\\))",
    "text": "E. 슬기로운 튜플사용 (\\(\\star\\))\n# 예제 – 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n변수를 아래와 같이 선언하였다고 하자.\n\na=1\nb=2\nc=3\n\n선언된 값을 확인하려면?\n\na\n\n1\n\n\n\nb\n\n2\n\n\n\nc\n\n3\n\n\n튜플을 이용하면?\n\na,b,c # 괄호하나 생략하는것이 이렇게 편하다..\n\n(1, 2, 3)\n\n\n#\n# 예제2 – 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n아래와 같이 =를 5번 쓰면 5개의 변수를 선언할 수 있다.\n\nname = 'Tom'\nage = 20 \nsex = 'M'\nheight = 180\nweight = 70\n\n튜플을 이용하면 좀더 간단히 하나의 = 로도 아래와 같이 선언할 수 있다.\n\nname, age, sex, height, weight = 'Tom', 20, 'M', 180, 70  # 다중할당\n\n#\n# 예제2 – 다중할당2, 위도와 경도\n\ncoor = (37,127) # 서울 \ncoor\n\n(37, 127)\n\n\n\nlat, long = coor # 다중할당\n\n\nlat \n\n37\n\n\n\nlong \n\n127\n\n\n#\n# 잠깐만 – 다중할당은 꼭 튜플에서만 가능한가?\n그건 아니다…\n\n[x,y,z] = [1,2,3] \nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\n[x,y] = 'hi'\nx,y \n\n('h', 'i')\n\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과 세트로 사용함)\n\nx,y,z = 1,2,3\nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\nx,y = 'hi'\nx,y \n\n('h', 'i')\n\n\n#\n# 예제 – 임시변수 사용없이 두 변수의 값을 교환\n\na=10\nb=20\n\n\na,b\n\n(10, 20)\n\n\n\na,b = b,a \n\n\na,b\n\n(20, 10)\n\n\n#\n# 예제 – for문과 튜플\n\nlst = [['guebin', 202112345, 'M'],\n       ['iu',202254321, 'F'],\n       ['hodong', 202011223, 'M']]\nlst\n\n[['guebin', 202112345, 'M'],\n ['iu', 202254321, 'F'],\n ['hodong', 202011223, 'M']]\n\n\n\nlst[0]\n\n['guebin', 202112345, 'M']\n\n\n\nfor name,studentid,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n#\n# 예제 – for문과 튜플, dummy variable _\n\nfor name,studentid,sex in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,studentid,_ in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,_,sex in lst: \n    print(sex)\n\nM\nF\nM\n\n\n\nfor name,_,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n\nfor name,_,_  in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n#\n# 예제 – 튜플과 언패킹연산자 *\n아래와 같이 관심없는것 모두를 other라는 이름으로 받을 수 있음\n\nfor name,*other  in lst: \n    print(name,other)\n\nguebin [202112345, 'M']\niu [202254321, 'F']\nhodong [202011223, 'M']\n\n\n*의 동작을 더 세심히 살펴보자.\n\nhead, body, *tail = range(1,11) \nhead, body, tail\n\n(1, 2, [3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nhead1,head2, *body, tail1,tail2,tail3 = range(1,11) \nhead1,head2, body, tail1,tail2,tail3 \n\n(1, 2, [3, 4, 5, 6, 7], 8, 9, 10)\n\n\n\n*head, body, tail = range(1,11) \nhead, body, tail\n\n([1, 2, 3, 4, 5, 6, 7, 8], 9, 10)\n\n\n(관찰)\n그러고 보니까..\n[*head, body, tail] = [1,2,3,4,5,6,7,8,9,10] \n[head, body, tail] = [[1,2,3,4,5,6,7,8],9,10] \n이렇다는 거잖아?\n*를 붙이면 1차원 자료구조가 풀린다..?\n\n[1,2,[1,2,3]]\n\n[1, 2, [1, 2, 3]]\n\n\n\n[1,2,*[1,2,3]]\n\n[1, 2, 1, 2, 3]\n\n\n- 단독사용은 불가능\n\n*[1,2,3]\n\nSyntaxError: can't use starred expression here (386627056.py, line 1)"
  },
  {
    "objectID": "posts/05wk-2.html#f.-튜플을-왜-쓸까-제-생각..",
    "href": "posts/05wk-2.html#f.-튜플을-왜-쓸까-제-생각..",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "F. 튜플을 왜 쓸까? – 제 생각..",
    "text": "F. 튜플을 왜 쓸까? – 제 생각..\n- 질문: 리스트를 쓰지 않고 왜 튜플을 써야하나?\n- 답변1: (책의 설명)\n\n초보적인 설명: 실수방지\n더 정확한 설명: 빠르다, 여러사람과 작업하기 유리하다, 깊은복사/얕은복사시 원하지 않는 오류 (side effect 이라고 함) 방지\n\n- 답변2: 괄호를 생략할 수 있기 때문에, 리스트 말고 튜플을 쓰면 편함.\n\n소괄호의 생략 + 언패킹 \\(\\Rightarrow\\) 엄청난 가독성.\n컴공과 사람들 의견: 튜플 + 언패킹 \\(\\Rightarrow\\) 엄청난 가독성 \\(\\Rightarrow\\) 충격 \\(\\Rightarrow\\) “파이썬 편하더라고요..”\n\n- 근본적인 의문: 파이썬을 처음 만들때 리스트에 괄호를 생략하는 기능을 추가했으면 편했잖아?\n- 저의 설명: 리스트=신라면, 튜플=라면사리 같은 느낌으로 이해하면 된다. 불변형(튜플)은 기능제한이 있는데, 가변형(리스트)는 기능이 풍부하다. 대신에, 가변형은 느리고 무겁다.\n\n기능적으로만 보면, 신라면이 있으면 스프를 버리고 라면사리를 얻을 수 있음, 그래서 라면사리는 필요없음.\n그런데 신라면에서 스프를 버려서 라면사리를 항상 얻는다면, 비효율적임.\n우리가 원하는게 (1) 원소를 벡터형태로 모은뒤 (2) 벡터자체를 출력해보고 (3) 각 원소를 sort하고 (4) 원소를 추가 append하고 (5) 원소를 삭제 remove 하는 것 일수도 있음. 그렇지만 진짜 단순하게 (1),(2) 만 원할수도있음.\n단순히 (1)-(2)의 목적으로 리스트를 사용하는건 비효율적이니까 불변형인 튜플을 만듦. (1)-(2)를 사용함에 있어서 편리성을 극대화 하기위해 괄호도 생략하게 해줌.\n\n\ndef mycal(a,b):\n    return a+b, a-b, a*b, a/b # 여러개의 값을 리턴하는듯 보임 -&gt; 사실은 길이가 4인 튜플 1개를 리턴\n\n\nmycal(1,2)\n\n(3, -1, 2, 0.5)\n\n\n\n_,_,mul,_ = mycal(1,2)\n\n\nmul\n\n2"
  },
  {
    "objectID": "posts/05wk-2.html#g.-연습문제들",
    "href": "posts/05wk-2.html#g.-연습문제들",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "G. 연습문제들",
    "text": "G. 연습문제들\n# 문제. 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을 만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은 출력결과를 얻어라. 최종 결과는 예를들면 아래와 같아야 한다.\n\n('2021-43052', 'GuebinChoi')\n\n('2021-43052', 'GuebinChoi')\n\n\n(풀이)\n\nsid = ('2021-43052',)\nname = ('GuebinChoi',)\n\n\nsid+name\n\n('2021-43052', 'GuebinChoi')\n\n\n파이썬프로그래밍 수강생. 아래는 파이썬프로그래밍 수강생들의 학번, 이름, 출석점수, 과제점수, 중간고사점수, 기말고사점수를 저장한 중첩리스트이다.\n\nlst = [['2021-43052', 'GuebinChoi', 5, 10, 20, 25],\n       ['2019-12342', 'Heung-min Son', 10, 15, 30, 15],\n       ['2018-32234', 'hynn', 7, 20, 30, 15],\n       ['2022-42323', 'Minji', 8, 20, 20, 35],\n       ['2023-55342', 'Hanni', 7, 20, 30, 35],\n       ['2022-46624', 'Danielle', 3, 15, 30, 40],\n       ['2022-11239', 'Haerin', 10, 20, 30, 40],\n       ['2022-32114', 'Hyein', 10, 20, 20, 35]]\nlst \n\n[['2021-43052', 'GuebinChoi', 5, 10, 20, 25],\n ['2019-12342', 'Heung-min Son', 10, 15, 30, 15],\n ['2018-32234', 'hynn', 7, 20, 30, 15],\n ['2022-42323', 'Minji', 8, 20, 20, 35],\n ['2023-55342', 'Hanni', 7, 20, 30, 35],\n ['2022-46624', 'Danielle', 3, 15, 30, 40],\n ['2022-11239', 'Haerin', 10, 20, 30, 40],\n ['2022-32114', 'Hyein', 10, 20, 20, 35]]\n\n\n# 문제. 파이썬프로그래밍 수강생의 수는 모두 몇명인가?\n(풀이)\n\nlen(lst)\n\n8\n\n\n#. 전북대학교 지침에 따라 출석점수가 7보다 작은 학생은 (즉 출석점수 &lt; 7 일 경우) F학점을 부여하게 되어있다. 이 기준에 따르면 F를 받는 학생은 모두 몇명인가?\n(풀이)\n\nsum([att&lt;7 for _,_,att,*other in lst])\n\n2\n\n\n# 문제. 파이썬프로그래밍 수업의 경우 출석+레포트 &lt; 21 일 경우 F학점을 부여한다고 한다. 이 기준에 따르면 F를 받는 학생은 모두 몇명인가?\n(풀이)\n\nsum([att+rep&lt;21 for _,_,att,rep,*other in lst])\n\n2\n\n\n# 문제. 리스트의 정렬순서를 [학번, 이름, …, 기말고사점수] 가 아니라 [이름, 학번, … , 기말고사점수] 와 같이 되도록 변경하는 코드를 작성하라.\n(출력예시)\n\n[['GuebinChoi', '2021-43052', 5, 10, 20, 25],\n ['Heung-min Son', '2019-12342', 10, 15, 30, 15],\n ['hynn', '2018-32234', 7, 20, 30, 15],\n ['Minji', '2022-42323', 8, 20, 20, 35],\n ['Hanni', '2023-55342', 7, 20, 30, 35],\n ['Danielle', '2022-46624', 3, 15, 30, 40],\n ['Haerin', '2022-11239', 10, 20, 30, 40],\n ['Hyein', '2022-32114', 10, 20, 20, 35]]\n\n[['GuebinChoi', '2021-43052', 5, 10, 20, 25],\n ['Heung-min Son', '2019-12342', 10, 15, 30, 15],\n ['hynn', '2018-32234', 7, 20, 30, 15],\n ['Minji', '2022-42323', 8, 20, 20, 35],\n ['Hanni', '2023-55342', 7, 20, 30, 35],\n ['Danielle', '2022-46624', 3, 15, 30, 40],\n ['Haerin', '2022-11239', 10, 20, 30, 40],\n ['Hyein', '2022-32114', 10, 20, 20, 35]]\n\n\n(풀이)\n\n[[name,sid,*other] for sid,name,*other in lst]\n\n[['GuebinChoi', '2021-43052', 5, 10, 20, 25],\n ['Heung-min Son', '2019-12342', 10, 15, 30, 15],\n ['hynn', '2018-32234', 7, 20, 30, 15],\n ['Minji', '2022-42323', 8, 20, 20, 35],\n ['Hanni', '2023-55342', 7, 20, 30, 35],\n ['Danielle', '2022-46624', 3, 15, 30, 40],\n ['Haerin', '2022-11239', 10, 20, 30, 40],\n ['Hyein', '2022-32114', 10, 20, 20, 35]]"
  },
  {
    "objectID": "posts/05wk-2.html#a.-인덱싱고급-스트라이딩",
    "href": "posts/05wk-2.html#a.-인덱싱고급-스트라이딩",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "A. 인덱싱고급 (스트라이딩)",
    "text": "A. 인덱싱고급 (스트라이딩)\n- 스트라이딩 [start:end:step]\n\nlst = list('abcdefghijk')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n\n\n\nlen(lst)\n\n11\n\n\n\nlst[0:9:2]\n\n['a', 'c', 'e', 'g', 'i']\n\n\n- 생략\n\nlst[0:9]\n#lst[0:9:]\n#lst[0:9:1]\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n\n\n\nlst[1::3]\n\n['b', 'e', 'h', 'k']\n\n\n\nlst[:8:3]\n\n['a', 'd', 'g']\n\n\n# 예제1: 짝수/홀수 원소 추출\n아래와 같은 문자열이 있다고 하자.\n\nlst = list('abcdefghijk')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n\n\nindex = 0,2,4, ... 에 해당하는 원소를 출력하라.\n\nlst[::2]\n\n['a', 'c', 'e', 'g', 'i', 'k']\n\n\nindex = 1,4,7 ... 에 해당하는 원소를 출력하라.\n\nlst[1::3]\n\n['b', 'e', 'h', 'k']\n\n\n#\n# 예제2 – 세로로..\n\n(예제2를 위한 예비학습) 문자열에서 \\n을 출력하면 출력시 줄바꿈이 일어난다.\n\nprint('1행\\n2행\\n3행')\n\n1행\n2행\n3행\n\n\n예비학습 끝\n\n아래와 같은 문자열이 있다고 하자.\n\ntxt = '너같이사랑스럽고\\n또예쁘고도멋지고\\n속훤히보이는너알\\n았어그동안고마웠\\n지정말정말사랑해'\nprint(txt)\n\n너같이사랑스럽고\n또예쁘고도멋지고\n속훤히보이는너알\n았어그동안고마웠\n지정말정말사랑해\n\n\n위 문자열을 세로로 읽는 코드를 작성하라. (9칸씩 점프하면서 읽으면 된다)\n(풀이)\n\ntxt[::9]\n\n'너또속았지'\n\n\n#\n- step = -1 이면?\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n\n\n\nlst[::-1]\n\n['k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n- 스트라이딩으로 step = -1 옵션 주기 vs 리스트의 .reverse() 메소드 이용하기\n관찰1: reverse 메소드는 리스트 자체를 변화시킴\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst.reverse()  \nlst\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n관찰2: [::-1]는 리스트는 변화시키지 않음\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::-1]\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n- -step 은 쓰기 까다롭다.\n(예제) 처음과 끝을 생략하지 않고 아래와 동일한 효과를 주는 코드를 만들어 보자.\n(풀이)\n결국 lst[?:?:-1]의 꼴에서 적당히 ?의 값을 채우면 된다. –&gt; 어려워\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::-1]\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\n\n\nNone\na\nb\nc\nd\ne\nf\ng\nh\nNone\n\n\n\n\n?\n0\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n?\n\n\n\n\nlst[-1:-9:-1]  # 지양 &lt;-- 쓰지마..\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']"
  },
  {
    "objectID": "posts/05wk-2.html#b.-len함수",
    "href": "posts/05wk-2.html#b.-len함수",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "B. len함수",
    "text": "B. len함수\n- 0차원 자료형은 len함수가 동작하지 않음\n\na=1 \nlen(a)\n\nTypeError: object of type 'int' has no len()\n\n\n\na=True\nlen(a)\n\nTypeError: object of type 'bool' has no len()\n\n\n\na=3.14\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nnote: 이것이 어떠한 수학적인 의미를 가지거나 0차원의 본질적진리를 뜻하는 것은 아님. R에서는 1,3.14,TRUE의 길이가 1로 존재함.\n\n- 1차원 자료형은 len함수가 동작\n\na='guebin'\nlen(a)\n\n6\n\n\n\na=[1,2,3,4,5,6]\nlen(a)\n\n6\n\n\n\na=1,2,3,4,5,6 \nlen(a)\n\n6\n\n\n\na=range(10)\nlen(a)\n\n10\n\n\n- 길이가 1인 1차원 자료형과 0차원 자료형은 다른것임\n\na='g'\nlen(a)\n\n1\n\n\n\na=[1]\nlen(a)\n\n1\n\n\n\na=(1,)\nlen(a)\n\n1\n\n\n\na=range(1)\nlen(a)\n\n1\n\n\n- 길이가 0인 1차원 자료형도 존재함\n\na=''\nlen(a)\n\n0\n\n\n\na=[]\nlen(a)\n\n0\n\n\n\na=()\nlen(a)\n\n0\n\n\n\na=range(0)\nlen(a)\n\n0"
  },
  {
    "objectID": "posts/05wk-2.html#a.-intro-str-list-tuple-정리",
    "href": "posts/05wk-2.html#a.-intro-str-list-tuple-정리",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "A. intro: str, list, tuple 정리",
    "text": "A. intro: str, list, tuple 정리\n- str, list, tuple은 모두 시퀀스형이라는 공통점이 있다. \\(\\to\\) 원소의 위치번호로 인덱싱이 가능\n\nlst = [1,2,3,4]\n\n\nlst[0] # 위치번호=0\n\n1\n\n\n\nlst[-1] # 위치번호=-1\n\n4\n\n\n- str, list, tuple은 차이점도 존재함. 잠깐 정리해보자.\n시퀀스형의 카테고리\n\n컨테니어형: list, tuple\n균일형: str\n가변형: list\n불변형: tuple, str\n\n표로 정리하면\n\n\n\n\n컨테니어형\n균일형\n\n\n\n\n가변형\nlist\n.\n\n\n불변형\ntuple\nstr\n\n\n\n- 시퀀스형이 아닌 1차원 자료형도 있을까? 원소의 위치번호로 인덱싱이 불가능한 자료형\n- 왜 이런게 필요할까?\n\n벡터에서 원소를 뽑는것은 정보의 모임에서 정보를 검색하는 것과 같다.\n정보를 순서대로 나열한뒤에 그 순서를 이용하여 검색하는 방법은 유용하다.\n하지만 경우에 따라서는 키워드를 기억해서 그 키워드를 바탕으로 정보에 접근하는 방법이 유용할 수 있다.\n\n카카오톡 대화내용검색\n(상황1) 오늘아침에 와이프가 뭔가를 카톡으로 부탁했었음. 그런데 그 뭔가가 기억안남.\n(상황2) 방학전에 동료교수과 개강이후 저녁약속을 카톡으로 잡았었음. 그런데 그게 언제인지 기억안남.\n- 순서대로 정리된 자료를 검색할때는 시퀀스형이 유리하다. 그런데 키워드로 검색하고 싶을 경우는 딕셔너리 타입이 유리하다."
  },
  {
    "objectID": "posts/05wk-2.html#b.-선언-1",
    "href": "posts/05wk-2.html#b.-선언-1",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "B. 선언",
    "text": "B. 선언\n- 방법1: 가장 일반적\n\ndct = {'guebin':49, 'hanni':80}\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n- 방법2: dict() 이용\n\ndct = dict(guebin=49, hanni=80)\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n- 방법3: 중첩된 리스트를 만든 뒤에 형태변환\n\n_lst = [['guebin',49],['hanni',80]]\n_lst \n\n[['guebin', 49], ['hanni', 80]]\n\n\n\ndict(_lst)\n\n{'guebin': 49, 'hanni': 80}\n\n\n- 방법4: 중첩된 튜플을 만든 뒤에 형태변환\n\n_tpl = ('guebin',49), ('hanni',80)\n_tpl\n\n(('guebin', 49), ('hanni', 80))\n\n\n\ndict(_tpl)\n\n{'guebin': 49, 'hanni': 80}"
  },
  {
    "objectID": "posts/05wk-2.html#c.-원소추출",
    "href": "posts/05wk-2.html#c.-원소추출",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "C. 원소추출",
    "text": "C. 원소추출\n- 원소의 위치로 추출할 수 없고, key로 추출해야 한다.\n\ndct = {'guebin':49, 'hanni':80}\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\nguebin의 점수를 추출하고 싶다면?\n\ndct['guebin']\n\n49\n\n\n- 만약에 dict가 아니라 list로 정보를 저장했다면?\n(예제) 아래와 같은 리스트에서 guebin의 점수를 추출하고 싶다면?\n\nlst=[['guebin',49],['hanni',80]]\nlst\n\n[['guebin', 49], ['hanni', 80]]\n\n\n(풀이1)\n\nlst[0][1] # guebin의 점수를 출력하란 의미\n\n49\n\n\n(풀이2) – 진짜 최악\n\n[lst[i][1] for i in range(len(lst)) if lst[i][0] == 'guebin']\n\n[49]\n\n\n(풀이3) – 덜 최악\n\n[score for name,score in lst if name == 'guebin']\n\n[49]\n\n\n- ’guebin’의 점수를 추출하는 코드 비교\n\ndct['guebin'] # 코드1: 단순하고, 가독성있음\n\n49\n\n\n\nlst[0][1] # 코드2: 단순하지만, 가독성이 있는건 아님, 확장성이 없음\n\n49\n\n\n\n[lst[i][1] for i in range(len(lst)) if lst[i][0] =='guebin'] # 코드3: 단순하지도 않고, 가독성도 없음.\n\n[49]\n\n\n\n[score for name,score in lst if name=='guebin' ] # 코드4: 단순하지 않지만, 가독성은 있음\n\n[49]"
  },
  {
    "objectID": "posts/05wk-2.html#d.-원소추가-변경-삭제",
    "href": "posts/05wk-2.html#d.-원소추가-변경-삭제",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "D. 원소추가, 변경, 삭제",
    "text": "D. 원소추가, 변경, 삭제\n\ndct={'guebin':49, 'hanni':80}\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n- 원소에 접근: guebin의 점수 출력\n\ndct['guebin']\n\n49\n\n\n- 추가: hynn학생의 점수를 추가\n\ndct['hynn'] = 99\n\n\ndct\n\n{'guebin': 49, 'hanni': 80, 'hynn': 99}\n\n\n- 변경: hanni의 점수를 변경\n\ndct['hanni'] = 100 \n\n\ndct\n\n{'guebin': 49, 'hanni': 100, 'hynn': 99}\n\n\n- 삭제\n(방법1)\n\ndct={'guebin':49, 'hanni':80, 'hynn':99}\ndel dct['guebin']  \ndct\n\n{'hanni': 80, 'hynn': 99}\n\n\n(방법2)\n\ndct={'guebin':49, 'hanni':80, 'hynn':99} \ndct.pop('guebin')\n\n49\n\n\n\ndct\n\n{'hanni': 80, 'hynn': 99}\n\n\n- 참고로 리스트였다면 이러한 삭제작업역시 비효율적이었을 것임\n\nlst = [['guebin',49],['hanni',80],['hynn',99]] \nlst\n\n[['guebin', 49], ['hanni', 80], ['hynn', 99]]\n\n\nguebin의 점수를 삭제하려면?\n\n[[name,score] for name,score in lst if name != 'guebin']\n\n[['hanni', 80], ['hynn', 99]]"
  },
  {
    "objectID": "posts/05wk-2.html#e.-연산",
    "href": "posts/05wk-2.html#e.-연산",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "E. 연산",
    "text": "E. 연산\n- 하나있어요..\n\ndct = {'guebin':49, 'hanni':80} \ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n\n'guebin' in dct\n\nTrue\n\n\n\n'hanni' in dct\n\nTrue\n\n\n\n'hynn' in dct\n\nFalse\n\n\n- in은 사실 다른자료형도 가능했음\n(관찰1)\n\n'a' in 'guebin' \n\nFalse\n\n\n\n'b' in 'guebin' \n\nTrue\n\n\n\n'c' in 'guebin' \n\nFalse\n\n\n(관찰2)\n\ntpl = 1,2,3 \ntpl\n\n(1, 2, 3)\n\n\n\n1 in tpl\n\nTrue\n\n\n\n4 in tpl\n\nFalse\n\n\n(관찰3)\n\nlst = [['guebin',49],['hanni',80],['hynn',99]] \nlst\n\n[['guebin', 49], ['hanni', 80], ['hynn', 99]]\n\n\n\n['guebin',49] in lst\n\nTrue\n\n\n- in연산자가 dict형에 사용되면 key를 기준으로 True, False를 판단한다."
  },
  {
    "objectID": "posts/05wk-2.html#f.-딕셔너리-특수기능",
    "href": "posts/05wk-2.html#f.-딕셔너리-특수기능",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "F. 딕셔너리 특수기능",
    "text": "F. 딕셔너리 특수기능\n(pop)\n\ndct = {'guebin':49, 'hanni':80} \ndct.pop('hanni')\ndct\n\n{'guebin': 49}\n\n\n(get)\n\ndct = {'guebin':49, 'hanni':80} \ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n\ndct.get('guebin') \n\n49\n\n\n아래와 같은 기능\n\ndct['guebin']\n\n49\n\n\n미묘한 차이점이 존재함\n\ndct['hynn'] # hynn이 없어서 키에러 출력, 그런 key는 없다.. \n\nKeyError: 'hynn'\n\n\n\ndct.get('hynn') # hynn이 없으면 아무것도 출력안함 \n\n(keys,values,items)\n\nfor k,v in dct.items():\n    print(k,v)\n\nguebin 49\nhanni 80\n\n\n- .keys()는 딕셔너리의 키를 리턴한다.\n\ndct = {'guebin':49, 'hanni':80} \ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n\n_keys=dct.keys()\n_keys\n\ndict_keys(['guebin', 'hanni'])\n\n\n\ntype(_keys) # 리턴된 자료형은 이상한것임\n\ndict_keys\n\n\n\nlist(_keys) # 아무튼 그 이상한 자료형도 리스트화 가능 \n\n['guebin', 'hanni']\n\n\n- .values()는 딕셔너리의 값들을 리턴한다.\n\n_values = dct.values()\n_values \n\ndict_values([49, 80])\n\n\n\ntype(_values)\n\ndict_values\n\n\n\nlist(_values)\n\n[49, 80]\n\n\n- .items()는 딕셔너리의 (키,값)을 리턴한다.\n\n_items = dct.items()\n_items \n\ndict_items([('guebin', 49), ('hanni', 80)])\n\n\n\ntype(_items)\n\ndict_items\n\n\n\nlist(_items)\n\n[('guebin', 49), ('hanni', 80)]"
  },
  {
    "objectID": "posts/05wk-2.html#g.-for문과-dict-star",
    "href": "posts/05wk-2.html#g.-for문과-dict-star",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "G. for문과 dict (\\(\\star\\))",
    "text": "G. for문과 dict (\\(\\star\\))\n\ndct = {'guebin': 49, 'hanni': 80}\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n(예시1)\n\nfor k in dct.keys():\n    print(k)\n\nguebin\nhanni\n\n\n\nfor k in dct:\n    print(k)\n\nguebin\nhanni\n\n\n\n딕셔너리 그자체도 for문에 넣을 수 있다. 그때는 딕셔너리의 key가 반복된다.\n결과를 보면 dct 대신에 dct.keys()와 list(dct)를 넣었을때와 결과가 같다.\n\n\nNote: list(dct) 하면 key만 리턴된다.\n\n(예시2)\n\nfor v in dct.values():\n    print(v)\n\n49\n80\n\n\n(예시3)\n\nfor i in dct.items():\n    print(i)\n\n('guebin', 49)\n('hanni', 80)\n\n\n(예시4)\n\nfor k,v in dct.items():\n    print(k,v)\n\nguebin 49\nhanni 80\n\n\n(예시5) – {}의 중간고사 점수는 {}점 입니다.\n\nfor name,score in dct.items():\n    print(f'{name}의 중간고사 점수는 {score}점 입니다.')\n\nguebin의 중간고사 점수는 49점 입니다.\nhanni의 중간고사 점수는 80점 입니다."
  },
  {
    "objectID": "posts/05wk-2.html#h.-dict에서-key혹은-value만-뽑아내기",
    "href": "posts/05wk-2.html#h.-dict에서-key혹은-value만-뽑아내기",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "H. dict에서 key혹은 value만 뽑아내기",
    "text": "H. dict에서 key혹은 value만 뽑아내기\n- 예제: 아래의 dict에서 key만 뽑아내고 싶다.\n\ndct = {'guebin':49, 'hanni':80} \n\n(풀이1)\n\nlist(dct)\n\n['guebin', 'hanni']\n\n\n(풀이2)\n\nlist(dct.keys())\n\n['guebin', 'hanni']\n\n\n(풀이3)\n\n[k for k in dct]\n\n['guebin', 'hanni']\n\n\n(풀이4)\n\n[k for k,v in dct.items()]\n\n['guebin', 'hanni']\n\n\n- 예제: 아래의 dict에서 value만 뽑아내고 싶다.\n\ndct = {'guebin':49, 'hanni':80} \n\n(풀이1)\n\nlist(dct.values())\n\n[49, 80]\n\n\n(풀이2)\n\n[dct[k] for k in dct]\n\n[49, 80]\n\n\n(풀이3)\n\n[v for v in dct.values()]\n\n[49, 80]\n\n\n(풀이4)\n\n[v for k,v in dct.items()]\n\n[49, 80]"
  },
  {
    "objectID": "posts/05wk-2.html#a.-바꿔치기",
    "href": "posts/05wk-2.html#a.-바꿔치기",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "A. 바꿔치기",
    "text": "A. 바꿔치기\n# 예제1 – 아래와 같은 리스트를 고려하자.\n\nlst = ['딸기','사과','바나나','딸기','사과','오토바이','자동차','버스','기차','오토바이','자동차']\n\n다음의 맵핑규칙에 따라서 위의 리스트의 원소를 바꾸어라.\n\n\n\n변환전\n변환후\n\n\n\n\n딸기\n과일\n\n\n사과\n과일\n\n\n바나나\n과일\n\n\n오토바이\n탈것\n\n\n자동차\n탈것\n\n\n버스\n탈것\n\n\n기차\n탈것\n\n\n\n(풀이1) – elif를 한번 써본정도의 의미. 추천하는 풀이 X\n\nlst2 = []\nfor l in lst:\n    if l=='딸기':\n        lst2.append('과일')\n    elif l=='사과':\n        lst2.append('과일')\n    elif l=='바나나':\n        lst2.append('과일')\n    elif l=='오토바이':\n        lst2.append('탈것')\n    elif l=='자동차':\n        lst2.append('탈것')\n    elif l=='버스':\n        lst2.append('탈것')\n    else:\n        lst2.append('탈것')        \n\n\nlst,lst2\n\n(['딸기', '사과', '바나나', '딸기', '사과', '오토바이', '자동차', '버스', '기차', '오토바이', '자동차'],\n ['과일', '과일', '과일', '과일', '과일', '탈것', '탈것', '탈것', '탈것', '탈것', '탈것'])\n\n\n(풀이2) – 코드는 쉽고 편함. dct를 만들기 힘듦.\n\ndct = {'딸기':'과일','사과':'과일','바나나':'과일','오토바이':'탈것','자동차':'탈것','버스':'탈것','기차':'탈것'}\ndct\n\n{'딸기': '과일',\n '사과': '과일',\n '바나나': '과일',\n '오토바이': '탈것',\n '자동차': '탈것',\n '버스': '탈것',\n '기차': '탈것'}\n\n\n\n[dct[l] for l in lst]\n\n['과일', '과일', '과일', '과일', '과일', '탈것', '탈것', '탈것', '탈것', '탈것', '탈것']\n\n\n(풀이3) – 코드가 매우 어려움. dct를 만들기 쉬움.\n\ndct = {'과일':['딸기','사과','바나나'], '탈것':['오토바이','자동차','버스','기차']}\ndct\n\n{'과일': ['딸기', '사과', '바나나'], '탈것': ['오토바이', '자동차', '버스', '기차']}\n\n\n\nlst\n\n['딸기', '사과', '바나나', '딸기', '사과', '오토바이', '자동차', '버스', '기차', '오토바이', '자동차']\n\n\n\n[k for l in lst for k in dct if l in dct[k]]\n\n['과일', '과일', '과일', '과일', '과일', '탈것', '탈것', '탈것', '탈것', '탈것', '탈것']\n\n\n#\n# 예제2 – 아래와 같은 리스트가 있다고 하자.\n\nlst = list('abcd'*2+'bbb')\nlst\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'b', 'b']\n\n\n아래의 규칙에 의하여 lst의 각 원소의 값을 바꾸고 싶다고 하자. 이를 구현하는 코드를 작성하라.\n\n\n\n변환전\n변환후\n\n\n\n\n‘a’\n[1,0,0,0]\n\n\n‘b’\n[0,1,0,0]\n\n\n‘c’\n[0,0,1,0]\n\n\n‘d’\n[0,0,0,1]\n\n\n\n(풀이)\n\ndct = {'a':[1,0,0,0], 'b':[0,1,0,0], 'c':[0,0,1,0], 'd':[0,0,0,1]}\ndct\n\n{'a': [1, 0, 0, 0], 'b': [0, 1, 0, 0], 'c': [0, 0, 1, 0], 'd': [0, 0, 0, 1]}\n\n\n\n[dct[l] for l in lst]\n\n[[1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1],\n [1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1],\n [0, 1, 0, 0],\n [0, 1, 0, 0],\n [0, 1, 0, 0]]\n\n\n# 예제3 – 예제2을 역변환하라. 즉 아래의 리스트를\n\nlst2= [[1, 0, 0, 0],\n       [0, 1, 0, 0],\n       [0, 0, 1, 0],\n       [0, 0, 0, 1],\n       [1, 0, 0, 0],\n       [0, 1, 0, 0],\n       [0, 0, 1, 0],\n       [0, 0, 0, 1],\n       [0, 1, 0, 0],\n       [0, 1, 0, 0],\n       [0, 1, 0, 0]]\n\n아래와 같이 바꾸라.\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'b', 'b']\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'b', 'b']\n\n\n(풀이) – 실패\n\ndct = {[1,0,0,0]:'a', [0,1,0,0]:'b', [0,0,1,0]:'c', [0,0,0,1]:'d'}\ndct\n\nTypeError: unhashable type: 'list'\n\n\ndct의 key에 대응하는것은 불변형만 가능\n(풀이1)\n\ndct = {(1,0,0,0):'a', (0,1,0,0):'b', (0,0,1,0):'c', (0,0,0,1):'d'}\ndct\n\n{(1, 0, 0, 0): 'a', (0, 1, 0, 0): 'b', (0, 0, 1, 0): 'c', (0, 0, 0, 1): 'd'}\n\n\n\n[dct[tuple(l)] for l in lst2]\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'b', 'b']\n\n\n(풀이2)\n\ndct = {'a':[1,0,0,0], 'b':[0,1,0,0], 'c':[0,0,1,0], 'd':[0,0,0,1]} # 예제2의 dct\n\n\n[k for l in lst2 for k in dct if dct[k]==l]\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'b', 'b']"
  },
  {
    "objectID": "posts/05wk-2.html#b.-연습문제",
    "href": "posts/05wk-2.html#b.-연습문제",
    "title": "05wk-2: 파이썬의 자료형 (2)",
    "section": "B. 연습문제",
    "text": "B. 연습문제\n# 문제. 아래와 같은 맵핑을 고려하자.\n\n\n\n문자\n숫자\n\n\n\n\na\n0\n\n\nb\n1\n\n\n\n이를 딕셔너리로 표현하면 아래와 같다.\n\ndct = {'a':0, 'b':1} \n\n위 규칙에 따라서 아래의 리스트의 원소를 문자로 각각 변환하라.\n\nlst = [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1]\n\n# 출력은 아래와 같아야 한다. \n['b', 'a', 'b', 'a', 'b', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'a', 'b']\n(풀이)\n\n[k for l in lst for k in dct if l == dct[k]]\n\n['b', 'a', 'b', 'a', 'b', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'a', 'b']\n\n\n# 문제. 아래와 같은 맵핑을 고려하자.\n\n\n\n월\n의미\n\n\n\n\n1,2\n겨울방학\n\n\n3,4,5,6\n1학기\n\n\n7,8\n여름방학\n\n\n9,10,11,12\n2학기\n\n\n\n이러한 규칙에 맞게 아래의 리스트를 적절한 문자열로 변환하라.\n\nmonth = [1,2,2,3,4,5,6,7,8,9,9,10,11,12] \n\n## 출력은 아래와 같아야 한다. \n['겨울방학', '겨울방학', '겨울방학', '1학기', '1학기', '1학기', '1학기', '여름방학', '여름방학', '2학기', '2학기', '2학기', '2학기', '2학기']\n(풀이1) – 좀 더 추천함\n\ndct = {'겨울방학':range(1,3), '1학기':range(3,7), '여름방학':range(7,9), '2학기':range(9,13)}\n\n\n[k for m in month for k in dct if m in dct[k]]\n\n['겨울방학',\n '겨울방학',\n '겨울방학',\n '1학기',\n '1학기',\n '1학기',\n '1학기',\n '여름방학',\n '여름방학',\n '2학기',\n '2학기',\n '2학기',\n '2학기',\n '2학기']\n\n\n(풀이2) – 추천안함\n\ndct = {1:'겨울방학',2:'겨울방학',3:'1학기',4:'1학기',5:'1학기',6:'1학기',7:'여름방학',8:'여름방학',9:'2학기',10:'2학기',11:'2학기',12:'2학기'}\n\n\n[dct[m] for m in month]\n\n['겨울방학',\n '겨울방학',\n '겨울방학',\n '1학기',\n '1학기',\n '1학기',\n '1학기',\n '여름방학',\n '여름방학',\n '2학기',\n '2학기',\n '2학기',\n '2학기',\n '2학기']\n\n\n## – 합성변환\n아래와 같은 맵핑을 고려하자.\n(규칙1)\n\n\n\n문자\n숫자\n\n\n\n\n바나나\n0\n\n\n사과\n1\n\n\n오토바이\n2\n\n\n자동차\n3\n\n\n자전거\n4\n\n\n\n(규칙2)\n\n\n\n아이템\n카테고리\n\n\n\n\n바나나\n과일\n\n\n사과\n과일\n\n\n오토바이\n탈것\n\n\n자동차\n탈것\n\n\n자전거\n탈것\n\n\n\n각각의 규칙을 나타내는 딕셔너리는 아래와 같이 선언되어있다고 하자.\n\ndct1 = {'바나나':0, '사과':1, '오토바이':2, '자동차':3, '자전거':4} \ndct2 = {'과일':['바나나','사과'], '탈것':['오토바이','자동차','자전거']} \n\n# 문제. 규칙1를 이용하여 아래와 같은 리스트를 변환하는 함수를 구현하고 그 함수를 f라 선언하라.\n# 입력 \n[0,1,0,1,4]\n\n# 출력 \n['바나나', '사과', '바나나', '사과', '자전거']\n(사용예시)\n\nf([0,1,0,1,4])\n\n['바나나', '사과', '바나나', '사과', '자전거']\n\n\n(풀이)\n\nf = lambda lst: [k for l in lst for k in dct1 if l == dct1[k]]\n\n\nf([0,1,0,1,4])\n\n['바나나', '사과', '바나나', '사과', '자전거']\n\n\n# 문제. 규칙2를 이용하여 아래와 같이 리스트를 변환하는 함수를 구현하고 그 함수를 g라고 선언하라.\n# 입력 \n['바나나','바나나','바나나','자동차']\n\n# 출력 \n['과일','과일','과일','탈것']\n(사용예시)\n\ng(['바나나','바나나','바나나','자동차'])\n\n['과일', '과일', '과일', '탈것']\n\n\n(풀이)\n\ng = lambda lst: [k for l in lst for k in dct2 if l in dct2[k]]\n\n\ng(['바나나','바나나','바나나','자동차'])\n\n['과일', '과일', '과일', '탈것']\n\n\n# 문제. 규칙1-2를 이용하여 아래와 같은 숫자로 이루어진 입력을 ‘과일’, ‘탈것’ 중 하나로 바꾸는 코드를 구현하라.\n# 입력 \n[0,1,0,1,3,4,2,2,3,4,1,0]\n\n# 출력 \n['과일', '과일', '과일', '과일', '탈것', '탈것', '탈것', '탈것', '탈것', '탈것', '과일', '과일']\nhint \\(g(f(x))\\) 를 이용하라.\n(풀이)\n\ng(f([0,1,0,1,3,4,2,2,3,4,1,0]))\n\n['과일', '과일', '과일', '과일', '탈것', '탈것', '탈것', '탈것', '탈것', '탈것', '과일', '과일']"
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브-클래스를-수정은-불편해",
    "href": "posts/12wk-2.html#a.-모티브-클래스를-수정은-불편해",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브: 클래스를 수정은 불편해",
    "text": "A. 모티브: 클래스를 수정은 불편해\n- 예시1: UpJump ver1\n\nclass Up:\n    def __init__(self):\n        self.value = 0\n    def up(self):\n        self.value = self.value + 1 \n    def __repr__(self):\n        return str(self.value) \n\n\na = Up()\na\n\n0\n\n\n\na.up()\n\n\na\n\n1\n\n\n\na.jump(2)\n\nAttributeError: 'Up' object has no attribute 'jump'\n\n\n\na.jump()는 아직 구현되지 않은 기능임.\n\n- 예시2: UpJump\n\nclass UpJump:\n    def __init__(self):\n        self.value = 0\n    def up(self):\n        self.value = self.value + 1 \n    def __repr__(self):\n        return str(self.value) \n    #---# 여기까지는 똑같이\n    def jump(self,jump_size):\n        self.value = self.value + jump_size\n\n\na = UpJump()\n\n\na\n\n0\n\n\n\na.up()\na\n\n1\n\n\n\na.jump(5)\na\n\n6\n\n\n- 예시3: UpJump의 다른 구현\n\nclass UpJump(Up):\n    def jump(self,jump_size):\n        self.value = self.value + jump_size\n\n\na = UpJump()\n\n\na.up()\na\n\n1\n\n\n\na.jump(5)\na\n\n6"
  },
  {
    "objectID": "posts/12wk-2.html#b.-꿀팁",
    "href": "posts/12wk-2.html#b.-꿀팁",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. 꿀팁",
    "text": "B. 꿀팁\n- 클래스를 조금 수정하고 싶을때, 아래와 같은 문법을 이용하면 편리하다.\nclass 새로운_클래스_이름(수정할_클래스_이름):\n    def 수정_및_추가할_함수이름(self,...):\n        ...\n- 사용예시\n\nclass UpJump2(UpJump):\n    def __repr__(self):\n        return f\"현재 이 인스턴스는 {self.value}의 값을 가지고 있습니다.\"\n\n\na = UpJump2()\na\n\n현재 이 인스턴스는 0의 값을 가지고 있습니다.\n\n\n\na.up()\na\n\n현재 이 인스턴스는 1의 값을 가지고 있습니다.\n\n\n\na.jump(5)\na\n\n현재 이 인스턴스는 6의 값을 가지고 있습니다."
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브",
    "href": "posts/12wk-2.html#a.-모티브",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브",
    "text": "A. 모티브\n- 모티브: 아래의 연산구조를 관찰하자.\n\na=1\nb=2\na+b\n\n3\n\n\n\na라는 인스턴스와 b라는 인스턴스를 +라는 기호가 연결하고 있다.\n\n- 이번에는 아래의 연산구조를 관찰하자.\n\na=[1,2]\nb=[3,4]\na+b\n\n[1, 2, 3, 4]\n\n\n\na라는 인스턴스와 b라는 인스턴스를 +라는 기호가 연결하고 있다.\n\n- 동작이 다른 이유?\n\n클래스를 배우기 이전: int자료형의 +는 “정수의 덧셈”을 의미하고 list자료형의 +는 “자료의 추가”를 의미한다.\n클래스를 배운 이후: 아마 클래스는 +라는 연산을 정의하는 숨겨진 메소드가 있을것이다. (print가 그랬듯이) 그리고 int클래스에서는 그 메소드를 “정수의 덧셈”이 되도록 정의하였고 list클래스에서는 그 메소드를 “자료의 추가”를 의미하도록 정의하였다.\n\n- 아래의 결과를 관찰\n\na = 1\nb = -2\n\n\na.__add__(b) # a+b\n\n-1\n\n\n\nb.__add__(a) # a+b\n\n-1\n\n\n\na = [1,2]\nb = [3,4]\n\n\na.__add__(b) # a+b \n\n[1, 2, 3, 4]\n\n\n\nb.__add__(a) # b+a \n\n[3, 4, 1, 2]\n\n\n- 확인: a+b는 사실 내부적으로 a.__add__(b)의 축약구문이다.\n- 추측: 따라서 만약 a.__add__(b)의 기능을 바꾸면 (재정의하면) a+b의 기능도 바뀔 것이다."
  },
  {
    "objectID": "posts/12wk-2.html#b.-student-__add__의-사용",
    "href": "posts/12wk-2.html#b.-student-__add__의-사용",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. Student: __add__의 사용",
    "text": "B. Student: __add__의 사용\n- StudentWrong 클래스 선언\n\nclass StudentWrong:\n    def __init__(self,age=20.0, semester=0):\n        self.age = age \n        self.semester = semester\n        print(f\"입학을 축하합니다. 당신의 나이는 {self.age}이고 현재 학기는 {self.semester}학기 입니다.\")\n    def __repr__(self):\n        text = f\"나이: {self.age}\\n학기: {self.semester}\"\n        return text\n    def __add__(self,registration_status):\n        if registration_status == \"휴학\":\n            self.age = self.age +0.5 \n        elif registration_status == \"등록\":\n            self.age = self.age +0.5 \n            self.semester = self.semester + 1\n\n\nboram = StudentWrong()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\nboram\n\n나이: 20.0\n학기: 0\n\n\n- 사용\n\nboram + \"휴학\"\nboram\n\n나이: 20.5\n학기: 0\n\n\n\nboram + \"등록\"\nboram\n\n나이: 21.0\n학기: 1\n\n\n\nboram + \"휴학\"\nboram\n\n나이: 21.5\n학기: 1\n\n\n\nboram + \"등록\"\nboram\n\n나이: 22.0\n학기: 2\n\n\n\nboram + \"등록\"\nboram\n\n나이: 22.5\n학기: 3\n\n\n\nboram + \"등록\"\nboram\n\n나이: 23.0\n학기: 4\n\n\n- 잘못된 사용\n\nseoyeon = StudentWrong()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\nseoyeon + \"등록\" + \"등록\"\nseoyeon # 서연의 나이는 21, 학기는 2\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n\n\n- 올바른 코드\n\nclass Student:\n    def __init__(self,age=20.0, semester=0):\n        self.age = age \n        self.semester = semester\n        print(f\"입학을 축하합니다. 당신의 나이는 {self.age}이고 현재 학기는 {self.semester}학기 입니다.\")\n    def __repr__(self):\n        text = f\"나이: {self.age}\\n학기: {self.semester}\"\n        return text\n    def __add__(self,registration_status):\n        if registration_status == \"휴학\":\n            self.age = self.age +0.5 \n        elif registration_status == \"등록\":\n            self.age = self.age +0.5 \n            self.semester = self.semester + 1\n        return self \n\n\nseoyeon = Student()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\nseoyeon + \"등록\" + \"휴학\" + \"등록\" + \"등록\"\n\n나이: 22.0\n학기: 3"
  },
  {
    "objectID": "posts/12wk-2.html#c.-student의-다른구현1",
    "href": "posts/12wk-2.html#c.-student의-다른구현1",
    "title": "12wk-2: 클래스 (2)",
    "section": "C. Student의 다른구현1",
    "text": "C. Student의 다른구현1\n\nclass Student(StudentWrong):\n    def __add__(self,registration_status):\n        if registration_status == \"휴학\":\n            self.age = self.age +0.5 \n        elif registration_status == \"등록\":\n            self.age = self.age +0.5 \n            self.semester = self.semester + 1\n        return self\n\n\nseoyeon = Student()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\nseoyeon + \"등록\" + \"휴학\" + \"등록\" + \"등록\"\n\n나이: 22.0\n학기: 3"
  },
  {
    "objectID": "posts/12wk-2.html#d.-student의-다른구현2",
    "href": "posts/12wk-2.html#d.-student의-다른구현2",
    "title": "12wk-2: 클래스 (2)",
    "section": "D. Student의 다른구현2",
    "text": "D. Student의 다른구현2\n\nclass Student(StudentWrong):\n    def __add__(self,registration_status):\n        super().__add__(registration_status)\n        return self\n\n\nseoyeon = Student()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\nseoyeon + \"등록\" + \"휴학\" + \"등록\" + \"등록\"\n\n나이: 22.0\n학기: 3\n\n\n\n파이썬의 비밀: a+b는 사실 a.__add__(b)의 축약형이다."
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브-1",
    "href": "posts/12wk-2.html#a.-모티브-1",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브",
    "text": "A. 모티브\n\na = [11,22,33]\na\n\n[11, 22, 33]\n\n\n\na[0]\n\n11\n\n\n\n이거 좋아보인다?\n\n\na.__getitem__(0) # a[0]의 축약표현\n\n11\n\n\n\na.__getitem__(1) # a[1]의 축약표현\n\n22\n\n\n\na.__getitem__(-1) # a[-1]의 축약표현\n\n33\n\n\n\n이런거였어??"
  },
  {
    "objectID": "posts/12wk-2.html#b.-rps1-__getitem__의-사용",
    "href": "posts/12wk-2.html#b.-rps1-__getitem__의-사용",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. RPS1: __getitem__의 사용",
    "text": "B. RPS1: __getitem__의 사용\n\nclass RPSBase:\n    def __init__(self,action_space):\n        self.action_space = action_space \n        self.actions = []\n    def act(self):\n        action = np.random.choice(self.action_space)\n        self.actions.append(action)\n        return action\n    def __repr__(self):\n        text = f\"낼 수 있는 패: {self.action_space}\\n기록: {self.actions}\"\n        return text\n\n\nA = RPSBase(['가위','바위','보'])\nA\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\nA.act()\nA.act()\n\n'바위'\n\n\n\nA\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['바위', '바위']\n\n\n\nA[0], A[1]\n\nTypeError: 'RPSBase' object is not subscriptable\n\n\n\n이 결과가 “A.actions[0]=바위”, “A.actions[1]=가위”로 나왔으면 좋겠다.. 그런데 지금은 불가능함.\n\n\nA.__getitem__(0)\n\nAttributeError: 'RPSBase' object has no attribute '__getitem__'\n\n\n\nclass RPS1(RPSBase):\n    def __getitem__(self,idx):\n        return self.actions[idx]\n\n\nA = RPS1(['가위','바위','보'])\nA\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\nA.act()\nA.act()\nA.act()\nA.act()\n\n'보'\n\n\n\nA\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['바위', '보', '보', '보']\n\n\n\nA[0],A[1],A[2],A[-1]\n\n('바위', '보', '보', '보')\n\n\n\n파이썬의 비밀: A[0]는 A.__getitem__(0)의 축약형이다."
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브-2",
    "href": "posts/12wk-2.html#a.-모티브-2",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브",
    "text": "A. 모티브\n\nA = RPS1(['가위','바위'])\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: []\n\n\n\nA.act()\nA.act()\nA.act()\nA.act()\n\n'바위'\n\n\n\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: ['바위', '바위', '가위', '바위']\n\n\n\nA[0]\n\n'바위'\n\n\n\nA[0] = \"보\"\n\nTypeError: 'RPS1' object does not support item assignment\n\n\n\n여기서 이 문법이 가능하면 결과 조작이긴 함.\n그런데 경우에 따라서는 이런 문법이 필요할 때도 있음."
  },
  {
    "objectID": "posts/12wk-2.html#b.-rps2-__setitem__-사용",
    "href": "posts/12wk-2.html#b.-rps2-__setitem__-사용",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. RPS2: __setitem__ 사용",
    "text": "B. RPS2: __setitem__ 사용\n- 관찰\n\nlst = [1,2,3] \nlst\n\n[1, 2, 3]\n\n\n\nlst[0] = 11\nlst\n\n[11, 2, 3]\n\n\n\nlst.__setitem__(0,-11) # lst[0] = -11 의 역할\nlst\n\n[-11, 2, 3]\n\n\n- RPS예제\n\nclass RPS2(RPS1):\n    def __setitem__(self,idx,val):\n        self.actions[idx] = val \n\n\nA = RPS2(['가위','바위'])\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: []\n\n\n\nA.act()\nA.act()\nA.act()\nA.act()\n\n'가위'\n\n\n\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: ['바위', '가위', '바위', '가위']\n\n\n\nA[0]\n\n'바위'\n\n\n\nA[0] = \"보\"\n# A.__setitem__(0,\"보\")\n# A.actions[0] = \"보\" \n\n\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: ['보', '가위', '바위', '가위']\n\n\n\n파이썬의 비밀: A[0]=\"보\"는 A.__setitem__(0,\"보\")의 축약형이다."
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브-3",
    "href": "posts/12wk-2.html#a.-모티브-3",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브",
    "text": "A. 모티브\n\nA = RPS2(['가위','바위'])\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: []\n\n\n\nA.act()\nA.act()\nA.act()\nA.act()\n\n'가위'\n\n\n\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: ['가위', '가위', '바위', '가위']\n\n\n\nA[0],A[1],A[2],A[3]\n\n('가위', '가위', '바위', '가위')\n\n\n\nlen(A)\n\nTypeError: object of type 'RPS2' has no len()\n\n\n\n이게 4라고 나왔으면.."
  },
  {
    "objectID": "posts/12wk-2.html#b.-rps3-__len__-의-사용",
    "href": "posts/12wk-2.html#b.-rps3-__len__-의-사용",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. RPS3: __len__ 의 사용",
    "text": "B. RPS3: __len__ 의 사용\n- 관찰\n\na = [1,2,3]\nlen(a)\n\n3\n\n\n\na.__len__()\n\n3\n\n\n- 구현\n\nclass RPS3(RPS2):\n    def __len__(self):\n        return len(self.actions)\n\n\nA = RPS3(['가위','바위'])\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: []\n\n\n\nA.act()\nA.act()\nA.act()\nA.act()\nA.act()\nA.act()\nA.act()\n\n'가위'\n\n\n\nA\n\n낼 수 있는 패: ['가위', '바위']\n기록: ['가위', '가위', '바위', '가위', '가위', '바위', '가위']\n\n\n\nlen(A)\n\n7\n\n\n\n파이썬의 비밀: len(A)는 A.__len__()의 축약형이다."
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브-4",
    "href": "posts/12wk-2.html#a.-모티브-4",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브",
    "text": "A. 모티브\n\nA = RPS3(['가위','바위'])\nB = RPS3(['가위','보'])\n\n\nA.act()\nB.act()\n\n'보'\n\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['가위'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['보'])\n\n\n\nA[0] = \"가위\"\nB[0] = \"가위\"\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['가위'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['가위'])\n\n\n\nA == B\n\nFalse\n\n\n\n의미상으로는 A와 B 모두 “가위”를 냈으므로, 현재는 비겼음.\n그래서 A==B의 결과가 True가 나오는 것이 더 의미상 맞는것 같다."
  },
  {
    "objectID": "posts/12wk-2.html#b.-rps4-__eq__-의-사용",
    "href": "posts/12wk-2.html#b.-rps4-__eq__-의-사용",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. RPS4: __eq__ 의 사용",
    "text": "B. RPS4: __eq__ 의 사용\n- 관찰\n\na = 33 \nb = 33 \nc = 55\n\n\na.__eq__(b)  # a==b\n\nTrue\n\n\n\na.__eq__(c)  # a==c\n\nFalse\n\n\n- 구현\n\nclass RPS4(RPS3):\n    def __eq__(self,other):\n        return self[-1] == other[-1]\n\n\nA = RPS4(['가위','바위'])\nB = RPS4(['가위','보'])\n\n1회 대결\n\nA.act()\nB.act()\n\n'보'\n\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['바위'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['보'])\n\n\n\nA == B\n\nFalse\n\n\n2회 대결\n\nA.act()\nB.act()\n\n'가위'\n\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['바위', '바위'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['보', '가위'])\n\n\n\nA == B\n\nFalse"
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브-5",
    "href": "posts/12wk-2.html#a.-모티브-5",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브",
    "text": "A. 모티브\n\nA = RPS4(['가위','바위'])\nB = RPS4(['가위','보'])\n\n1회 대결\n\nA.act()\nB.act()\n\n'보'\n\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['가위'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['보'])\n\n\n\nA&gt;B\n\nTypeError: '&gt;' not supported between instances of 'RPS4' and 'RPS4'"
  },
  {
    "objectID": "posts/12wk-2.html#b.-rps5-__gt__-의-사용",
    "href": "posts/12wk-2.html#b.-rps5-__gt__-의-사용",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. RPS5: __gt__ 의 사용",
    "text": "B. RPS5: __gt__ 의 사용\n- 관찰\n\na = 11\nb = 22 \n\n\na.__gt__(b) # a&lt;b \n\nFalse\n\n\n\nb.__gt__(a) # b&gt;a\n\nTrue\n\n\n- 구현\n\nclass RPS5(RPS4):\n    def __gt__(self,other):\n        return [self[-1], other[-1]] in [[\"가위\",\"보\"], [\"바위\",\"가위\"], [\"보\",\"바위\"]]\n\n\nA = RPS5(['가위','바위'])\nB = RPS5(['가위','보'])\n\n1회대결\n\nA.act()\nB.act()\n\n'보'\n\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['가위'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['보'])\n\n\n\nA &gt; B\n\nTrue\n\n\n2회대결\n\nA.act()\nB.act()\n\n'보'\n\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['가위', '가위'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['보', '보'])\n\n\n\nA &gt; B # 이건 원래 A.__gt__(B) 의 실행임 \n\nTrue\n\n\n- 이상태에서 A&lt;B 를 한다면?\n\nA &lt; B # 이건 원래 A.__lt__(B) 의 실행임 \n\nFalse\n\n\n\nA &lt; B, A == B, A &gt; B\n\n(False, False, True)\n\n\n- 비교연산자 정리\n\n\n\n특수메소드\n의미\n\n\n\n\n__eq__\nself == other\n\n\n__gt__\nself &gt; other\n\n\n__lt__\nself &lt; other\n\n\n__ge__\nself &gt;= other\n\n\n__le__\nself &lt;= other\n\n\n\n\n파이썬의 비밀10: __eq__, __gt__, __lt__, __ge__, __le__는 각각 ==, &gt;, &lt;, &gt;=, &lt;= 를 재정의한다."
  },
  {
    "objectID": "posts/12wk-2.html#a.-모티브-6",
    "href": "posts/12wk-2.html#a.-모티브-6",
    "title": "12wk-2: 클래스 (2)",
    "section": "A. 모티브",
    "text": "A. 모티브\n\na = 3 \nb = 2 \n\n\na*b\n\n6\n\n\n\na.__mul__(b)\n\n6\n\n\n- 하고싶은것: A*B 가 두 플레이어 A,B의 “대결”을 의미하도록 하고싶다!"
  },
  {
    "objectID": "posts/12wk-2.html#b.-rps6-__mul__-의-사용",
    "href": "posts/12wk-2.html#b.-rps6-__mul__-의-사용",
    "title": "12wk-2: 클래스 (2)",
    "section": "B. RPS6: __mul__ 의 사용",
    "text": "B. RPS6: __mul__ 의 사용\n- 구현\n\nclass RPS6(RPS5):\n    def __init__(self,action_space):\n        super().__init__(action_space)\n        self.results = [] \n    def __mul__(self,other):\n        self.act()\n        other.act()\n        if self&gt;other:\n            self.results.append(\"승리\")\n            other.results.append(\"패배\") \n        elif self&lt;other:\n            self.results.append(\"패배\")\n            other.results.append(\"승리\")\n        else:\n            self.results.append(\"무승부\")\n            other.results.append(\"무승부\")\n    def __repr__(self):\n        text = super().__repr__()\n        text = text + f\"\\n승패: {self.results}\"\n        return text\n\n\nA = RPS6(['가위','바위'])\nB = RPS6(['가위','보'])\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: []\n 승패: [],\n 낼 수 있는 패: ['가위', '보']\n 기록: []\n 승패: [])\n\n\n\nA*B\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['바위']\n 승패: ['승리'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['가위']\n 승패: ['패배'])\n\n\n\nA*B\n\n\nA,B\n\n(낼 수 있는 패: ['가위', '바위']\n 기록: ['바위', '가위']\n 승패: ['승리', '무승부'],\n 낼 수 있는 패: ['가위', '보']\n 기록: ['가위', '가위']\n 승패: ['패배', '무승부'])"
  },
  {
    "objectID": "posts/14wk-2.html#a.-수용력과-이해력",
    "href": "posts/14wk-2.html#a.-수용력과-이해력",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 수용력과 이해력",
    "text": "A. 수용력과 이해력\n- 수용력 테스트1: 2주차-2\n\\(f(x)=x^2\\)위의 임의의 점을 입력하면 접선을 리턴하는 함수를 구현하라.\n\ndef make_func(x0):\n    f = lambda x: x**2\n    def func(x):\n        h = 0.0001\n        a = (f(x0+h)-f(x0))/h \n        return a*(x-x0) + f(x0)\n    return func\n\n이거…. 얼마전에 배운내용이었음..\n- 수용력 테스트2: map + list\n\nf = lambda x: max(x)\nx1 = [1,1,2]\nx2 = [2,3,6,8]\nx3 = [4,5,10,15]\nlist(map(f,[x1,x2,x3]))  # [f(x1), f(x2), f(x3)]\n\n[2, 8, 15]\n\n\n- 이해력 테스트1: map()으로 생성된 인스턴스는 iterable\n\nfor i in map(f,[x1,x2,x3]):\n    print(i)\n\n2\n8\n15\n\n\n- 이해력 테스트2: str은 callable\n\nstr(1)\n\n'1'\n\n\n\nstr.__call__(1)\n\n'1'\n\n\n\nlist(map(str,[1,2,3]))\n\n['1', '2', '3']\n\n\n- 이해력 테스트3: \"+\".join(??) 자리에 올 수 있는건?\n\n\"+\".join(list(map(str,[1,2,3])))\n\n'1+2+3'\n\n\n\n\"+\".join(map(str,[1,2,3]))\n\n'1+2+3'"
  },
  {
    "objectID": "posts/14wk-2.html#b.-흡수력과-활용력",
    "href": "posts/14wk-2.html#b.-흡수력과-활용력",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. 흡수력과 활용력",
    "text": "B. 흡수력과 활용력\n\natt = np.random.choice(np.arange(10,21)*5,20); rep = np.random.choice(np.arange(5,21)*5,20); mid = np.random.choice(np.arange(0,21)*5,20); fin = np.random.choice(np.arange(0,21)*5,20)\ndf = pd.DataFrame({'att':att,'rep':rep,'mid':mid,'fin':fin})[:5]\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n0\n100\n35\n70\n35\n\n\n1\n85\n60\n20\n95\n\n\n2\n75\n45\n0\n0\n\n\n3\n70\n65\n30\n5\n\n\n4\n75\n25\n25\n35\n\n\n\n\n\n\n\n- 흡수력 테스트: 이거 보고 바로 구조가 이해되면 흡수력이 좋은것임\n\ndf.apply({'att': lambda x: x+1})\n\n\n\n\n\n\n\n\natt\n\n\n\n\n0\n101\n\n\n1\n86\n\n\n2\n76\n\n\n3\n71\n\n\n4\n76\n\n\n\n\n\n\n\n\ndef func(x):\n    return \"메롱\"\ndf.apply({'att': func})\n\n\n\n\n\n\n\n\natt\n\n\n\n\n0\n메롱\n\n\n1\n메롱\n\n\n2\n메롱\n\n\n3\n메롱\n\n\n4\n메롱\n\n\n\n\n\n\n\n- 활용력 테스트: 위의코드를 보고 이 코드까지 떠올릴 수 있으면 문일지십의 단계\n\nfloat.__call__(1) # float은 callable\n\n1.0\n\n\n\ndf.apply({'att': float})\n\n\n\n\n\n\n\n\natt\n\n\n\n\n0\n100.0\n\n\n1\n85.0\n\n\n2\n75.0\n\n\n3\n70.0\n\n\n4\n75.0\n\n\n\n\n\n\n\n이 경지를 얻는게 중요함. 이 경지를 얻지 못하면 아래와 같은 코드를 외워야함.\n\ndf[['att']].astype(float)\n\n\n\n\n\n\n\n\natt\n\n\n\n\n0\n100.0\n\n\n1\n85.0\n\n\n2\n75.0\n\n\n3\n70.0\n\n\n4\n75.0\n\n\n\n\n\n\n\n저것도 모른다면 아래처럼 컴프리헨션을 활용해야겠죠..\n\n[float(l) for l in df.att]\n\n[100.0, 85.0, 75.0, 70.0, 75.0]\n\n\n\n_df = pd.DataFrame([float(l) for l in df.att])\n_df.columns = ['att']\n_df\n\n\n\n\n\n\n\n\natt\n\n\n\n\n0\n100.0\n\n\n1\n85.0\n\n\n2\n75.0\n\n\n3\n70.0\n\n\n4\n75.0\n\n\n\n\n\n\n\n절망 그 자체의 코드\n\nlst = [] \nfor i in range(len(df.att)):\n    lst.append(float(df.att.iloc[i]))\nlst\n\n[100.0, 85.0, 75.0, 70.0, 75.0]\n\n\n\n_df = pd.DataFrame(lst)\n_df.columns = ['att']\n_df\n\n\n\n\n\n\n\n\natt\n\n\n\n\n0\n100.0\n\n\n1\n85.0\n\n\n2\n75.0\n\n\n3\n70.0\n\n\n4\n75.0\n\n\n\n\n\n\n\n\n수용력 \\(\\to\\) 이해력 \\(\\to\\) 흡수력 \\(\\to\\) 활용력"
  },
  {
    "objectID": "posts/14wk-2.html#a.-대표예시",
    "href": "posts/14wk-2.html#a.-대표예시",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 대표예시",
    "text": "A. 대표예시\n# 예제1 – 은근히 짜증나는 plt.plot()\n\nplt.plot([1,2,3,4],[2,3,4,2],'r--')\n\n\n\n\n\n\n\n\n\nplt.plot([1,2,3,4],[2,3,4,2],color='lime','--')\n\nSyntaxError: positional argument follows keyword argument (2277522587.py, line 1)\n\n\n\nplt.plot([1,2,3,4],[2,3,4,2],'--',color='lime')\n\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#b.-개념",
    "href": "posts/14wk-2.html#b.-개념",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. 개념",
    "text": "B. 개념\n# 예시1 – 함수사용시, 함수의 입력값을 전달하는 두가지 방식, 원칙1\n- 함수 사용시, 함수의 입력값을 전달하는 두가지 방식은 아래와 같다.\n\ndef func(x,y):\n    return x**y \n\n\nfunc(2,3) # 이렇게 입력하는 경우\n\n8\n\n\n\nfunc(x=2,y=3) # 이렇게 입력하는 경우\n\n8\n\n\n- 여기에서 func(2,3)와 같이 사용할때, 함수의 입력값을 위치인자로 전달했다고 한다. 이는 컴퓨터가 입력값 2,3이 있는 위치에 따라서 x,y를 할당한다는 의미이다. 즉 앞에있는걸 x로 뒤에있는걸 y로 받는다는 의미이다. 따라서 func(2,3)와 func(3,2)는 다르게 동작한다.\n\nfunc(2,3), func(3,2)\n\n(8, 9)\n\n\n- func(x=2,y=3)와 같이 사용하면, 함수의 입력값을 키워드인자로 전달했다고 한다. 이는 컴퓨터가 입력값의 위치에 따라 x,y를 할당하는게 아닌 키워드값 자체를 보고 할당한다는 것이다. 따라서 func(x=2,y=3) 와 func(y=3,x=2)는 같은 동작을 한다.\n\nfunc(x=2,y=3), func(y=3,x=2)\n\n(8, 8)\n\n\n- 위치인자와 키워드인자를 이해할때 위치인자는 입력을 튜플로 키워드인자는 입력을 딕셔러니로 생각하면 편리하다.\n\ntpl = (2,3)\nfunc(*tpl)\n\n8\n\n\n\ntpl = (3,2)\nfunc(*tpl)\n\n9\n\n\n\ndct = dict(x=2,y=3) \nfunc(**dct)\n\n8\n\n\n\ndct = dict(y=3,x=2) \nfunc(**dct)\n\n8\n\n\n\n원칙1: 위치인자의 입력은 튜플로, 키워드인자의 입력은 딕셔너리로 생각한다.\n\n#\n# 예시2 – 함수를 정의할때, 입력값을 정의하는 두가지 방식, 원칙2,3\n- 함수를 정의할때, 함수의 입력값을 아래와 같이 기본값을 주어 정의할 수 있다.\n\ndef jump(x,y=1):\n    return x+y\n\n\njump(5)\n\n6\n\n\n\n원칙2: 미리정의된 입력값은 생략가능하다 –&gt; 미리 정의된 키워드인자(=기본값을 가지고 있는 키워드인자)는 생략가능하다.\n\n\njump(3,5) # x=1,y=2 라는 의미\n\n8\n\n\n- 이때 x는 위치인자로 정의되었다고 하고, y는 키워드 인자로 정의되었다고 표현한다. 그래서 엄밀하게 개념상으로는 아래와 같다.\ndef func(x,y): # x,y는 모두 위치인자로 정의되었음. \n    return x**y \ndef jump(x,y=1): # x는 위치인자로, y는 키워드 인자로 정의되었음. \n    return x+y\n- 이러한 설명은 와닿지 않는데, 위치인자로 정의되었다고 해도 그걸 키워드인자로 모두 쓸 수 있고 키워드인자로 정의되었다고 해도 그걸 위치인자로 쓸 수 있기 때문이다.\n\nfunc(2,3) # 위치인자로 정의된걸 위치인자로 사용\n\n8\n\n\n\nfunc(x=2,y=3) # 위치인자로 정의된걸 키워드인자로 사용\n\n8\n\n\n\njump(1,y=2) # 위치인자로 정의된건 위치인자로, 키워드인자로 정의된건 키워드인자로 사용\n\n3\n\n\n\njump(1,2) # 정의된것 무시하고 둘다 위치인자로사용\n\n3\n\n\n\njump(x=1,y=2) # 정의된것 무시하고 둘다 키워드인자로 사용\n\n3\n\n\n\n원칙3: 위치인자로 정의되었을지라도 키워드인자로 쓸 수 있고, 키워드 인자로 정의되었을지라도 위치인자로 쓸 수 있다.\n\n#\n# 예제3 – 원칙4: 함수의 입력값을 전달할때, 위치인자는 키워드인자 뒤에 올 수 없다.\n\nfunc(1,2) # 가능\n\n1\n\n\n\nfunc(1,y=2) # 가능\n\n1\n\n\n\nfunc(x=1,2) # 불가능\n\nSyntaxError: positional argument follows keyword argument (3028310640.py, line 1)\n\n\n\nfunc(y=2,1) # 불가능\n\nSyntaxError: positional argument follows keyword argument (872138673.py, line 1)\n\n\n\njump(1,y=2) # 가능\n\n3\n\n\n\njump(x=1,y=2) # 가능\n\n3\n\n\n\njump(1,2) # 가능\n\n3\n\n\n\njump(x=1,2) # 불가능\n\nSyntaxError: positional argument follows keyword argument (2833435458.py, line 1)\n\n\n\n원칙4: 함수에 입력값을 전달할때, 위치인자는 키워드인자 뒤에 올 수 없다. (\\(\\star\\star\\star\\))\n\n#\n# 예제4 – 길이가 변하는 위치인자 *args, 원칙5,6,7\n\ndef dummy(x,y,*args):\n    return x,y,args\n\n\ndummy(1,2,3,4,5,6,7,8,9,10)\n\n(1, 2, (3, 4, 5, 6, 7, 8, 9, 10))\n\n\n\n원칙5: 가변위치인자를 입력을 받을때는 위치인자 뒤에, *args를 사용하면 된다. 이때 함수내에서 *args를 다룰때는 *를 제외하고 튜플로 취급하면된다.\n\n\ndummy(1) \n\nTypeError: dummy() missing 1 required positional argument: 'y'\n\n\n\ndummy(1,2)\n\n(1, 2, ())\n\n\n\n원칙6: 위치인자는 생략불가능 하지만, 가변위치인자는(*args)는 생략가능하다.\n\n- 아래는 위치인자, 가변위치인자, 키워드인자를 사용한 예시이다.\n\ndef mysum(x,y,*args,verbose=False):\n    if verbose:\n        text = \"+\".join(map(str,args))\n        print(f\"{x}+{y}+{text}={x+y+sum(args)}\")\n    return x+y+sum(args)\n\n\nmysum(1,2,3,4,5)\n\n15\n\n\n\nmysum(1,2,3,4,5,verbose=True)\n\n1+2+3+4+5=15\n\n\n15\n\n\n- 이제 아래의 코드를 관찰해보자.\n\nmysum(1,2,3,4,5,True)\n\n16\n\n\n컴퓨터 입장에서는 마지막의 True를 verbose에 해당하는 입력값이라 이해 못할 것이다. 따라서 이 상황에서 verbose를 사용하려면 키워드인자로 밖에 쓸 수 없다.\n\n원칙7: 함수를 정의할 때 *args 와 키워드인자가 동시에 정의되었다면, 함수를 사용할 때 키워드인자를 쓰려면 반드시 키워드인자로만 써야한다!\n\n#\n# 예제5 – 길이가 변하는 키워드인자, **kwargs\n\ndef dummy(**kwargs):\n    return kwargs\n\n\n원칙8: 가변키워드인자를 입력으로 받는 함수를 정의할때는 **kwargs를 사용하면 된다. 함수내에서 **kwargs를 다룰때는 **를 제외하고 딕셔너리로 취급하면된다.\n\n\ndummy(a=1,b=2,c=3,d=4)\n\n{'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n\n#\n# 예제6 – 피자주문 (\\(\\star\\star\\))\n–예비학습–\n\ntoppings = () \nbool(toppings)\n\nFalse\n\n\n\ntoppings = (1,2,3)\nbool(toppings)\n\nTrue\n\n\n\nextra_order = {}\nbool(extra_order)\n\nFalse\n\n\n\nextra_order = {'a':[1,2,3],'b':[2,3,4]}\nbool(extra_order)\n\nTrue\n\n\n–예비학습끝–\n\ndef order_pizza(pizza, *toppings, size=\"medium\", **extra_orders):\n    print(f\"[{pizza}피자 ({size}사이즈) 주문함]\")\n    \n    if toppings: #(\"베이컨\",\"할라피뇨\")\n        print(\"toppings:\")\n        for topping in toppings:\n            print(f\"  - {topping}\")\n    \n    if extra_orders:\n        print(\"extra_orders:\")\n        for key, value in extra_orders.items():\n            print(f\"  - {key}: {value}\")\n\n\norder_pizza(\"페퍼로니\")\n\n[페퍼로니피자 (medium사이즈) 주문함]\n\n\n\norder_pizza(\"페퍼로니\",size=\"large\")\n\n[페퍼로니피자 (large사이즈) 주문함]\n\n\n\norder_pizza(\"페퍼로니\",\"베이컨\",\"할라피뇨\")\n\n[페퍼로니피자 (medium사이즈) 주문함]\ntoppings:\n  - 베이컨\n  - 할라피뇨\n\n\n\norder_pizza(\"페퍼로니\",\"베이컨\",\"할라피뇨\",size=\"large\")\n\n[페퍼로니피자 (large사이즈) 주문함]\ntoppings:\n  - 베이컨\n  - 할라피뇨\n\n\n\norder_pizza(\"페퍼로니\",\"베이컨\",\"할라피뇨\",size=\"large\",스파게티=1,스프라이트=2)\n\n[페퍼로니피자 (large사이즈) 주문함]\ntoppings:\n  - 베이컨\n  - 할라피뇨\nextra_orders:\n  - 스파게티: 1\n  - 스프라이트: 2\n\n\n#\n# 예제7 – /\n\ndef dummy(x,y,/,z):\n    return x,y,z\n\n\ndummy(1,2,3)\n\n(1, 2, 3)\n\n\n\ndummy(x=1,y=2,z=3) \n\nTypeError: dummy() got some positional-only arguments passed as keyword arguments: 'x, y'\n\n\n\n원칙9: / 의 앞의 변수는 전용위치인자가 된다. 즉 사용시 위치인자로만 사용가능하다.\n\n#\n# 예제8 – *\n\ndef dummy(a,b,/,c,d,*,f=1,g=1):\n    return a,b,c,d,f,g\n\n\ndummy(a=1,b=1,c=1,d=1,f=1,g=1) # a,b는 위치인자만 가능 \n\nTypeError: dummy() got some positional-only arguments passed as keyword arguments: 'a, b'\n\n\n\ndummy(1,2,3,4,-1,-1) # f,g 는 키워드인자만 가능\n\nTypeError: dummy() takes 4 positional arguments but 6 were given\n\n\n\ndummy(1,2,3,4,f=-1,g=-1),dummy(1,2,3,d=4,f=-1,g=-1),dummy(1,2,c=3,d=4,f=-1,g=-1)\n# c,d는 위치인자 키워드인자 둘다가능 (정의는 위치로 되어있음)\n\n((1, 2, 3, 4, -1, -1), (1, 2, 3, 4, -1, -1), (1, 2, 3, 4, -1, -1))\n\n\n\n원칙9: * 의 뒤의 변수는 전용키워드인자가 된다. 즉 사용시 키워드인자로만 사용가능하다.\n\n\ndef dummy(a,b,/,c,d,*,f,g):\n    return a,b,c,d,f,g\n\n\n원칙10: * 를 사용하면 기본값이 없는 키워드인자를 정의할 수 있다.\n\n\ndummy(1,2,3,4,-1,-1)\n\nTypeError: dummy() takes 4 positional arguments but 6 were given\n\n\n\ndummy(1,2,3,4,f=-1,g=-1)\n\n(1, 2, 3, 4, -1, -1)\n\n\n#\n요약 – 저의 머리..\n\n함수의 도움말을 보고 키워드인자와 위치인자를 파악한다.\n위치인자로 정의된건 위치인자로 쓰고 키워드인자로 정의된건 키워드인자로 쓴다. (다른생각 하지말자)\n원칙4: 위치인자는 무조건 키워드인자 앞에 쓴다. 를 기억하자.\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#a.-왜-배워야함",
    "href": "posts/14wk-2.html#a.-왜-배워야함",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 왜 배워야함?",
    "text": "A. 왜 배워야함?\n- 이거 자체만 읽을줄 알아도 함수를 눈치껏 쓸 수 있다.\nplt.hist(\n    x: 'ArrayLike | Sequence[ArrayLike]',\n    bins: 'int | Sequence[float] | str | None' = None,\n    range: 'tuple[float, float] | None' = None,\n    density: 'bool' = False,\n    weights: 'ArrayLike | None' = None,\n    cumulative: 'bool | float' = False,\n    bottom: 'ArrayLike | float | None' = None,\n    histtype: \"Literal['bar', 'barstacked', 'step', 'stepfilled']\" = 'bar',\n    align: \"Literal['left', 'mid', 'right']\" = 'mid',\n    orientation: \"Literal['vertical', 'horizontal']\" = 'vertical',\n    rwidth: 'float | None' = None,\n    log: 'bool' = False,\n    color: 'ColorType | Sequence[ColorType] | None' = None,\n    label: 'str | Sequence[str] | None' = None,\n    stacked: 'bool' = False,\n    *,\n    data=None,\n    **kwargs,\n) -&gt; 'tuple[np.ndarray | list[np.ndarray], np.ndarray, BarContainer | Polygon | list[BarContainer | Polygon]]'\n\nplt.hist(\n    x = np.random.randn(10000),\n    bins = [-3.0,-2.0,0.0,2.0,3.0]\n);"
  },
  {
    "objectID": "posts/14wk-2.html#b.-사용히는-방법",
    "href": "posts/14wk-2.html#b.-사용히는-방법",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. 사용히는 방법",
    "text": "B. 사용히는 방법\n\ndef greet(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n\n\ndef add(a: int, b: int) -&gt; int:\n    return a + b"
  },
  {
    "objectID": "posts/14wk-2.html#c.-읽는-방법",
    "href": "posts/14wk-2.html#c.-읽는-방법",
    "title": "14wk-2: 클래스 (4)",
    "section": "C. 읽는 방법",
    "text": "C. 읽는 방법\n\nfrom typing import List, Tuple, Dict, Optional, Union, Any, Callable\n\n# 예시1\n\ndef process_items(items: List[str]) -&gt; int:\n    return len(items)\n\n# 입력예시: [\"apple\", \"banana\", \"cherry\"]\n# 출력예시: 3 \n\n\nprocess_items(['apple', 'banana', 'cherry'])\n\n3\n\n\n#\n# 예시2\n\ndef get_coordinates() -&gt; Tuple[float, float]:\n    return (45.0, 90.0)\n\n# 입력 형식 예시: None\n# 출력 형식 예시: (45.0, 90.0)\n\n\nget_coordinates()\n\n(45.0, 90.0)\n\n\n#\n# 예시3\n\ndef count_words(text: str) -&gt; Dict[str, int]:\n    words = text.split()\n    return {word: words.count(word) for word in words}\n\n# 입력 형식 예시: \"apple banana apple cherry banana apple\"\n# 출력 형식 예시: {'apple': 3, 'banana': 2, 'cherry': 1}\n\n\ntext = \"apple banana apple cherry banana apple\"\ncount_words(text)\n\n{'apple': 3, 'banana': 2, 'cherry': 1}\n\n\n#\n# 예시4\n\ndef find_item(items: List[str], search: str) -&gt; Optional[int]:\n    try:\n        return items.index(search)\n    except ValueError:\n        return None\n\n# 설명: 문자열 리스트에서 특정 문자열의 인덱스를 찾고, 찾지 못하면 `None`을 반환\n# 입력 형식 예시: \n# - item: ['apple', 'banana', 'cherry']\n# - search: 'banana'\n# 출력 형식 예시: 1 또는 None\n\n\nfind_item(['apple', 'banana', 'cherry'], 'banana')\n\n1\n\n\n\nfind_item(['apple', 'banana', 'cherry'], 'orange')\n\n\nprint(find_item(['apple', 'banana', 'cherry'], 'orange'))\n\nNone\n\n\n#\n# 예시5\n\ndef process_value(value: Union[int, str]) -&gt; str:\n    if isinstance(value, int):\n        return f\"Number: {value}\"\n    else:\n        return f\"String: {value}\"\n    \n# 입력 형식 예시: \n# - value: 10  &lt;-- 이것도 가능하고 \n# - value: \"hello\"  &lt;-- 이것도 가능하다\n# 출력 형식 예시: \"Number: 10\" 또는 \"String: hello\" (문자열) \n\n\nprocess_value(10)\n\n'Number: 10'\n\n\n\nprocess_value(\"hello\")\n\n'String: hello'\n\n\n#\n# 예시6\n\ndef print_value(value: Any) -&gt; None:\n    print(value)\n    \n# 입력 형식 예시\n# - value: 아무거나\n# 출력 형식 예시\n# - None \n\n\nprint_value(123)\n\n123\n\n\n\nprint_value('hello')\n\nhello\n\n\n#\n# 예시7\n\ndef apply_function(x: int, func: Callable[[int], float]) -&gt; float:\n    return func(x)\n\n# 입력형식예시\n# - x: 1 \n# - func: np.sqrt,  &lt;-- 이런건 가능. int를 입력으로 받아서, float형을 리턴하는 callable object\n# - func: lambda x: x**2,  &lt;-- 이런건 권장X. int를 입력으로 받아서, int형을 리턴하니까..\n# 출력형식예시\n# - 1.7320508075688772\n\n\napply_function(3,np.sqrt)\n\n1.7320508075688772\n\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#a.-개념",
    "href": "posts/14wk-2.html#a.-개념",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 개념",
    "text": "A. 개념\n- 데코레이터 쓰는법\n\n함수입력,함수출력을 수행하는 함수를 만든다.\n입력함수 위에 데코를 쓴다. 그러면 그 입력함수는 출력함수로 바뀐다.\n\n- 데코레이터 코드 템플릿1 – 이걸 외우진 마세요\n데코레이터 선언\ndef decorator_name(func):\n    ...\n    return wrapper\ndef 꾸밈함수이름(입력함수):\n    ... \n    return 출력함수\n데코레이터 사용\n@decorator_name\ndef myfunc():\n    pass\n@꾸밈함수이름\ndef 꾸밈당하는함수():\n    pass \n# 예제1 – 코드 템플릿1: 사용예시\n\n# 데코레이터 선언\ndef 무조건메롱을리턴(func):\n    wrapper = lambda x: \"메롱\"\n    return wrapper\n\n\ndef f(x):\n    return x**2\nlist(map(f,[1,2,3,4,5]))\n\n[1, 4, 9, 16, 25]\n\n\n\n@무조건메롱을리턴\ndef f(x):\n    return x**2\nlist(map(f,[1,2,3,4,5]))\n\n['메롱', '메롱', '메롱', '메롱', '메롱']\n\n\n#\n# 예제2 – 데코레이터와 같은코드\n- 코드1\n\ndef 무조건메롱을리턴(func):\n    wrapper = lambda x: \"메롱\"\n    return wrapper\n\ndef f(x):\n    return x**2\n\nf = 무조건메롱을리턴(f)\n\n[f(x) for x in range(5)]\n\n['메롱', '메롱', '메롱', '메롱', '메롱']\n\n\n- 코드2\n\ndef 무조건메롱을리턴(func):\n    wrapper = lambda x: \"메롱\"\n    return wrapper\n\n@무조건메롱을리턴\ndef f(x):\n    return x**2\n\n[f(x) for x in range(5)]\n\n['메롱', '메롱', '메롱', '메롱', '메롱']\n\n\n- 좀 더 확장하면..\n코드1\n@dec2\n@dec1\ndef func(arg1, arg2, ...):\n    pass\n코드2\ndef func(arg1, arg2, ...);\n    pass \nfunc = dec2(dec1(func))\n코드1과 코드2를 두번쓸 수 있음\n- 데코레이터 코드 템플릿2 – 아래의 형태를 기억할것\ndef decorator_name(func):\n    def wrapper(*args, **kwargs):\n        func_result = func(*args, **kwargs)\n        return func_result\n    return wrapper\ndef 아무것도안꾸미는함수(입력함수):\n    def 출력함수(*args, **kwargs):\n        입력함수의출력 = 입력함수(*args, **kwargs)\n        return 입력함수의출력\n    return 출력함수\n위의 코드는 아무것도 안꾸미는 코드"
  },
  {
    "objectID": "posts/14wk-2.html#b.-대표예시",
    "href": "posts/14wk-2.html#b.-대표예시",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. 대표예시",
    "text": "B. 대표예시\n# 예제1 – 출력결과는 항상 리스트로\n\ndef 출력은리스트로(func):\n    def wrapper(*args,**kwargs):\n        func_result = func(*args,**kwargs)\n        return list(func_result)\n    return wrapper\n\n\ndef 입력은넘파이로(func):\n    def wrapper(*args,**kwargs):\n        args = [np.array(l) for l in args]\n        kwargs = {k:np.array(v) for k,v in kwargs.items()}\n        func_result = func(*args,**kwargs)\n        return func_result\n    return wrapper\n\n\n@출력은리스트로\n@입력은넘파이로\ndef add(a,b):\n    return a+b    \n\n\nadd([1,2],[3,4])\n\n[4, 6]\n\n\n\nadd(a=[1,2],b=[3,4])\n\n[4, 6]\n\n\n\nadd([1,2,3],b=[2,3,4])\n\n[3, 5, 7]\n\n\n#\n# 예시2 – 실행시간측정\n\ndef 시간측정(func):\n    def wrapper(*args,**kwargs):\n        t1 = time.time()\n        func_result = func(*args,**kwargs)\n        t2 = time.time()\n        print(f\"실행시간: {t2-t1}\")\n        return func_result \n    return wrapper\n\n\n@시간측정\n@출력은리스트로\n@입력은넘파이로\ndef sub(a,b):\n    return a-b \n\n\nsub([1,2,3],[1,2,3])\n\n실행시간: 2.002716064453125e-05\n\n\n[0, 0, 0]\n\n\n#\n# 예시3 – 출력결과 시각화\n\ndef 출력시각화(func):\n    def wrapper(*args,**kwargs):\n        func_result = func(*args,**kwargs)\n        plt.plot(func_result,'--o')\n        return func_result \n    return wrapper\n\n\n@시간측정\n@출력시각화\n@출력은리스트로\n@입력은넘파이로\ndef mul(a,b):\n    return a*b \n\n\nmul([1,-1,1],[2,3,4])\n\n실행시간: 0.006300926208496094"
  },
  {
    "objectID": "posts/14wk-2.html#c.-내장-데코레이터",
    "href": "posts/14wk-2.html#c.-내장-데코레이터",
    "title": "14wk-2: 클래스 (4)",
    "section": "C. 내장 데코레이터",
    "text": "C. 내장 데코레이터\n- 아래는 모두 내장데코레이터였음..\n@classmethod\n@staticmethod"
  },
  {
    "objectID": "posts/14wk-2.html#a.-대표예제",
    "href": "posts/14wk-2.html#a.-대표예제",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 대표예제",
    "text": "A. 대표예제\n# 예시1 – for/if 마스터..\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,20); rep = np.random.choice(np.arange(5,21)*5,20); mid = np.random.choice(np.arange(0,21)*5,20); fin = np.random.choice(np.arange(0,21)*5,20)\ndf = pd.DataFrame({'att':att,'rep':rep,'mid':mid,'fin':fin})\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n0\n65\n55\n50\n40\n\n\n1\n95\n100\n50\n80\n\n\n2\n65\n90\n60\n30\n\n\n3\n55\n80\n75\n80\n\n\n4\n80\n30\n30\n100\n\n\n5\n75\n40\n100\n15\n\n\n6\n65\n45\n45\n90\n\n\n7\n60\n60\n25\n0\n\n\n8\n95\n65\n20\n10\n\n\n9\n90\n80\n80\n20\n\n\n10\n55\n75\n35\n25\n\n\n11\n95\n95\n45\n0\n\n\n12\n95\n55\n15\n35\n\n\n13\n50\n80\n40\n30\n\n\n14\n50\n55\n15\n85\n\n\n15\n95\n30\n30\n95\n\n\n16\n50\n50\n45\n10\n\n\n17\n65\n55\n15\n45\n\n\n18\n70\n70\n40\n35\n\n\n19\n90\n90\n80\n90\n\n\n\n\n\n\n\n\ngrades = [] \nfor i in range(len(df)):\n    row = df.iloc[i]\n    att,rep,mid,fin = row \n    total = att*0.1 + rep*0.2 + mid *0.3 + fin*0.4\n    if total &gt;= 70: \n        grade =  \"A+\"\n    elif 40 &lt; total: \n        grade = \"B0\"\n    else: \n        grade = \"F\"\n    grades.append(grade)\n\n\ngrades\n\n['B0',\n 'A+',\n 'B0',\n 'A+',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'F',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'F',\n 'B0',\n 'A+']\n\n\n#\n# 예시2 – 사실 머리속에는 파이프라인의 개념이 있지 않나?\n\nrow = df.iloc[0]\nrow\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 0, dtype: int64\n\n\n\ndef calculate_total(row):\n    att, rep, mid, fin = row \n    total = att*0.1 + rep*0.2 + mid*0.3 + fin*0.4 \n    return total\n\n\ntotal = calculate_total(row)\ntotal\n\n48.5\n\n\n\ndef make_grade(total):\n    if total &gt;= 70: \n        return \"A+\"\n    elif 40 &lt; total: \n        return \"B0\"\n    else: \n        return \"F\"    \n\n\nmake_grade(total)\n\n'B0'\n\n\n\n# 깔끔 그자체\nrow = df.iloc[0]\ntotal = calculate_total(row)\ngrade = make_grade(total) \n\n\n# 그렇지만 for문과 결합하면 더러워짐 \nn = len(df)\ngrades = []\nfor i in range(n):\n    row = df.iloc[i]\n    total = calculate_total(row)\n    grade = make_grade(total)\n    grades.append(grade) \ngrades\n\n['B0',\n 'A+',\n 'B0',\n 'A+',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'F',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'F',\n 'B0',\n 'A+']\n\n\n# 예시3 – 제너레이터의 개발\n- row-wise 하게 쪼갠다.\n\ndef each_row(df):\n    n = len(df) \n    for i in range(n):\n        yield df.iloc[i]\n\n\nrows = each_row(df) # 마치 rows = [row1,row2,...] 와 같은 형태로 있다고 생각하자.\n\n- total을 계산한다. (row 별로)\n\ndef calculate_total(rows):\n    for row in rows:\n        att, rep, mid, fin = row \n        total = att*0.1 + rep*0.2 + mid*0.3 + fin*0.4 \n        yield total\n\n\ntotals = calculate_total(rows)  # totals = [total1,total2,...] 와 같은 형태로 있다고 생각하자. \n\n- grade를 계산한다 (row별로)\n\ndef make_grade(totals):\n    for total in totals:\n        if total &gt;= 70: \n            yield \"A+\"\n        elif 40 &lt; total: \n            yield \"B0\"\n        else: \n            yield \"F\"\n\n\ngrades = make_grade(totals)  # grades = [grade1,grade2,...] 와 같은 형태로 있다고 생각하자.\n\n- 합친다.. (형태변환)\n\nlist(grades)\n\n['B0',\n 'A+',\n 'B0',\n 'A+',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'F',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'B0',\n 'B0',\n 'B0',\n 'F',\n 'F',\n 'B0',\n 'A+']\n\n\n- 최종코드\n\n#list(make_grade(calculate_total(each_row(df))))\n\n\nrows = each_row(df) \ntotals = calculate_total(rows)\ngrades = make_grade(totals)\ndf.assign(grade = list(grades))\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ngrade\n\n\n\n\n0\n65\n55\n50\n40\nB0\n\n\n1\n95\n100\n50\n80\nA+\n\n\n2\n65\n90\n60\n30\nB0\n\n\n3\n55\n80\n75\n80\nA+\n\n\n4\n80\n30\n30\n100\nB0\n\n\n5\n75\n40\n100\n15\nB0\n\n\n6\n65\n45\n45\n90\nB0\n\n\n7\n60\n60\n25\n0\nF\n\n\n8\n95\n65\n20\n10\nF\n\n\n9\n90\n80\n80\n20\nB0\n\n\n10\n55\n75\n35\n25\nB0\n\n\n11\n95\n95\n45\n0\nB0\n\n\n12\n95\n55\n15\n35\nF\n\n\n13\n50\n80\n40\n30\nB0\n\n\n14\n50\n55\n15\n85\nB0\n\n\n15\n95\n30\n30\n95\nB0\n\n\n16\n50\n50\n45\n10\nF\n\n\n17\n65\n55\n15\n45\nF\n\n\n18\n70\n70\n40\n35\nB0\n\n\n19\n90\n90\n80\n90\nA+\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#b.-제너레이터의-개념",
    "href": "posts/14wk-2.html#b.-제너레이터의-개념",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. 제너레이터의 개념",
    "text": "B. 제너레이터의 개념\n- 제너레이터의 정체: 이터레이터 + \\(\\alpha\\)\n\nlst = [1,2,3] \nlst_iterator = iter(lst) \n\n\nisinstance(lst_iterator,collections.abc.Iterator), isinstance(lst_iterator,collections.abc.Generator)\n\n(True, False)\n\n\n\ndef make_gen(lst):\n    for l in lst:\n        yield l \n\n\nlst_generator = make_gen(lst)\n\n\nisinstance(lst_generator,collections.abc.Iterator), isinstance(lst_generator,collections.abc.Generator)\n\n(True, True)\n\n\n\nset(dir(lst_generator))-set(dir(lst_iterator))\n\n{'__del__',\n '__name__',\n '__qualname__',\n 'close',\n 'gi_code',\n 'gi_frame',\n 'gi_running',\n 'gi_suspended',\n 'gi_yieldfrom',\n 'send',\n 'throw'}\n\n\n\n제너레이터는 이터레이터에 추가하여 위의 기능들이 있음.\n저는 저걸 딱히 쓴적이 없어요.. (책에도 별로 추천안함)\n그냥 제너레이터 = 이터레이터 라고 생각하세요\n\n- 만드는 방법1: 함수를 이용하는 방법\n\ndef make_gen(lst):\n    for l in lst:\n        yield l\n\n\nmake_gen([1,2,3])\n\n&lt;generator object make_gen at 0x7dde564bb440&gt;\n\n\n- 만드는 방법2: 제너레이터 표현식 (튜플 컴프리헨션이라고 속으로 생각해도 무방, 튜플 컴프리헨션은 없는 용어임)\n\n(l for l in [1,2,3])\n\n&lt;generator object &lt;genexpr&gt; at 0x7dde564bb5e0&gt;"
  },
  {
    "objectID": "posts/14wk-2.html#c.-개념을-위한-예제들",
    "href": "posts/14wk-2.html#c.-개념을-위한-예제들",
    "title": "14wk-2: 클래스 (4)",
    "section": "C. 개념을 위한 예제들",
    "text": "C. 개념을 위한 예제들\n# 예시1\n\ndef make_gen():\n    yield 1\n    yield 2\n    yield 3\ngen = make_gen()\n\n\nfor i in gen:\n    print(i)\n\n1\n2\n3\n\n\n\ngen = make_gen()\n\n\nnext(gen)\n\n1\n\n\n\nnext(gen)\n\n2\n\n\n\nnext(gen)\n\n3\n\n\n\nnext(gen)\n\nStopIteration: \n\n\n#\n# 예시2 – 무한시퀀스 + 지연실행\n\ndef make_gen():\n    a = 3 \n    yield a \n    while True:\n        a = a+2 \n        yield a \n\n\ngen = make_gen()\n\n\nlst = [] \n\n\nfor _ in range(10):\n    lst.append(next(gen))\n\n\nlst\n\n[3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\n\n\nfor _ in range(10):\n    lst.append(next(gen))\n\n\nlst\n\n[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]\n\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#a.-상속의-사용방법",
    "href": "posts/14wk-2.html#a.-상속의-사용방법",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 상속의 사용방법",
    "text": "A. 상속의 사용방법\n- 클래스를 조금 수정하고 싶을때, 아래와 같은 문법을 이용하면 편리하다.\nclass 새로운_클래스_이름(수정할_클래스_이름): \n    def 수정_및_추가할_함수이름(self,...):\n        ...\n# 예시1 – UpJump\n\n\n\n\n\nflowchart LR\n  C[UpJump] --&gt; |\"거슬러올라가면\"| A[Up]\n\n\n\n\n\n\n\nclass Up:\n    def __init__(self):\n        self.value = 0\n    def up(self):\n        self.value = self.value + 1 \n    def __repr__(self):\n        return str(self.value) \n\n\nclass UpJump(Up):\n    def jump(self,jump_size):\n        self.value = self.value + jump_size\n\n#\n# 예시2 – AddMul 클래스\n- Add 클래스 선언\n\nclass Add:\n    def __init__(self,a,b):\n        self.a = a \n        self.b = b \n    def add(self):\n        return self.a + self.b \n\n\na = Add(2,3)\n\n\na.add()\n\n5\n\n\n\na.mul()\n\nAttributeError: 'Add' object has no attribute 'mul'\n\n\n- Mul 클래스 선언\n\nclass Mul:\n    def __init__(self,a,b):\n        self.a = a \n        self.b = b \n    def mul(self):\n        return self.a * self.b \n\n\na = Mul(3,4)\na.mul()\n\n12\n\n\n\na.add()\n\nAttributeError: 'Mul' object has no attribute 'add'\n\n\n- AddMul 클래스를 선언 (기존의 Add, Mul 상속받아서 이용)\n\n\n\n\n\nflowchart LR\n  C[AddMul] --&gt; |\"거슬러올라가면\"| A[Add]\n  C[AddMul] --&gt; |\"거슬러올라가면\"| B[Mul] \n\n\n\n\n\n\n\nclass AddMul(Add,Mul):\n    pass \n\n\na = AddMul(2,3)\n\n\na.add()\n\n5\n\n\n\na.mul()\n\n6\n\n\n\n어, 근데 __init__이 겹치지 않나?\n\n\nclass Add:\n    def __init__(self,a,b):\n        print(\"Add클래스에서 정의된 __init__ 메소드가 실행됩니다\")\n        self.a = a \n        self.b = b \n    def add(self):\n        return self.a + self.b \nclass Mul:\n    def __init__(self,a,b):\n        print(\"Mul클래스에서 정의된 __init__ 메소드가 실행됩니다\")        \n        self.a = a \n        self.b = b \n    def mul(self):\n        return self.a * self.b    \nclass AddMul(Add,Mul):\n    pass     \n\n\na = AddMul(5,6)\n\nAdd클래스에서 정의된 __init__ 메소드가 실행됩니다\n\n\n\n알아서 교통정리함\n\n- 교통정리하는 비법?\n\nAddMul.__mro__\n\n(__main__.AddMul, __main__.Add, __main__.Mul, object)\n\n\n개념상 아래와 같은 서열인데,\n\n\n\n\n\nflowchart LR\n  B[Add] --&gt; |\"거슬러올라가면\"| A[object]\n  C[Mul] --&gt; |\"거슬러올라가면\"| A[object]\n  D[AddMul] --&gt; |\"거슬러올라가면\"| B[Add]\n  D[AddMul] --&gt; |\"거슬러올라가면\"| C[Mul]\n\n\n\n\n\n\n공식적으로는 아래와 같은 서열로 이해한다.\n\n\n\n\n\nflowchart LR\n  C[Mul] --&gt; |\"거슬러올라가면\"| A[object]\n  D[AddMul] --&gt; |\"거슬러올라가면\"| B[Add]\n  B[Add] --&gt; |\"거슬러올라가면\"| C[Mul]\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n모든 상속구조를 거슬러 올라가면 피라미드의 정점에 object 클래스가 있다. 즉 object는 최상위 super 클래스이다. 아래의 말을 기억하자.\n\n모든 클래스는 type 클래스에서 찍힌 인스턴스이며, 모든 클래스는 object 클래스의 subclass이다.\n\n그냥 개념놀음임..\n\n\n\n\n\n\n\n\nWarning\n\n\n\n다이어그램 표시시 object는 앞으로 생략하겠음.\n\n\n\n\n\n\n\n\nNote\n\n\n\n아래는 같은코드임\n# 코드1\nclass Klass():\n    pass\n# 코드2\nclass Klass(object):\n    pass\n코드1은 사실상 코드2의 생략버전임.\n\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#b.-super",
    "href": "posts/14wk-2.html#b.-super",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. super()",
    "text": "B. super()\n# 예시1 – 기본적인 사용법\n\n\n\n\n\nflowchart LR\n  B[Student] --&gt; |\"거슬러올라가면\"| A[StudentWrong]\n\n\n\n\n\n\n\nclass StudentWrong:\n    def __init__(self,age=20.0, semester=0):\n        self.age = age \n        self.semester = semester\n        print(f\"입학을 축하합니다. 당신의 나이는 {self.age}이고 현재 학기는 {self.semester}학기 입니다.\")\n    def __repr__(self):\n        text = f\"나이: {self.age}\\n학기: {self.semester}\"\n        return text\n    def __add__(self,registration_status):\n        if registration_status == \"휴학\":\n            self.age = self.age +0.5 \n        elif registration_status == \"등록\":\n            self.age = self.age +0.5 \n            self.semester = self.semester + 1\nclass Student(StudentWrong):\n    def __add__(self,registration_status):\n        #super().__add__(registration_status) # 방법1 \n        super(Student,self).__add__(registration_status) # 방법2 \n        return self\n\n\nboram = Student()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\nboram + \"휴학\" + \"등록\"\n\n나이: 21.0\n학기: 1\n\n\n#\n- super()는 슈퍼클래스의 인스턴스 비슷한걸 리턴해준다. (유령이라 생각하자)\n\n# 예시2 – 빙의\n아래와 같은 문제를 풀고 싶다고 하자.\n\n사과가 2개씩 3묶음 있다. 사과는 몇개인가?\n규빈은 지금 2층에 있다. 3층 아래로 내려가면 몇층인가?\n[1,2,3]의 평균은 얼마인가?\n100을 3으로 나누면 나머지가 얼마인가?\n2와 3의 최소공배수는 무엇인가?\n\n\nclass ProblemSolver1():\n    def __init__(self):\n        self.sheet = [\"???\"]*5\n    def solve(self):\n        print(\"0. 사과가 2개씩 3묶음 있다. 사과는 몇개인가? --&gt; 6개\")\n        self.sheet[0] = \"6개\"\n\n\nsolver1 = ProblemSolver1()\n\n\nsolver1.sheet\n\n['???', '???', '???', '???', '???']\n\n\n\nsolver1.solve()\n\n0. 사과가 2개씩 3묶음 있다. 사과는 몇개인가? --&gt; 6개\n\n\n\nsolver1.sheet\n\n['6개', '???', '???', '???', '???']\n\n\n\n\n\n\n\nflowchart LR\n  C[ProblemSolver2] --&gt; |\"거슬러올라가면\"| D[ProblemSolver1]\n\n\n\n\n\n\n\nclass ProblemSolver2(ProblemSolver1):\n    def solve(self):\n        ghost1 = super()\n        ghost1.solve()\n        print(\"2. [1,2,3]의 평균은 얼마인가? --&gt; 2\")\n        print(\"3. 100을 3으로 나누면 나머지가 얼마인가? --&gt; 1\")\n        print(\"4. 2와 3의 최소공배수는 무엇인가? --&gt; 6\")\n        self.sheet[2] = \"2\"\n        self.sheet[3] = \"1\"\n        self.sheet[4] = \"6\"        \n\n\nsolver2 = ProblemSolver2()\n\n\nsolver2.sheet\n\n['???', '???', '???', '???', '???']\n\n\n\nsolver2.solve()\n\n0. 사과가 2개씩 3묶음 있다. 사과는 몇개인가? --&gt; 6개\n2. [1,2,3]의 평균은 얼마인가? --&gt; 2\n3. 100을 3으로 나누면 나머지가 얼마인가? --&gt; 1\n4. 2와 3의 최소공배수는 무엇인가? --&gt; 6\n\n\n\nsolver2.sheet\n\n['6개', '???', '2', '1', '6']\n\n\n\n\n\n\n\nflowchart LR\n  B[ProblemSolver3] --&gt; |\"거슬러올라가면\"| C[ProblemSolver2]\n  C[ProblemSolver2] --&gt; |\"거슬러올라가면\"| D[ProblemSolver1]\n\n\n\n\n\n\n\nclass ProblemSolver3(ProblemSolver2):\n    def solve(self):\n        ghost2 = super()\n        ghost2.solve() \n        print(\"1. 규빈은 지금 2층에 있다. 3층 아래로 내려가면 몇층인가? --&gt; 지하1층\")\n        self.sheet[1] = \"지하1층\"\n    def say(self):\n        print(\"다풀었어요\")\n\n\nsolver3 = ProblemSolver3()\n\n\nsolver3.sheet\n\n['???', '???', '???', '???', '???']\n\n\n\nsolver3.solve()\n#a.sheet\n\n0. 사과가 2개씩 3묶음 있다. 사과는 몇개인가? --&gt; 6개\n2. [1,2,3]의 평균은 얼마인가? --&gt; 2\n3. 100을 3으로 나누면 나머지가 얼마인가? --&gt; 1\n4. 2와 3의 최소공배수는 무엇인가? --&gt; 6\n1. 규빈은 지금 2층에 있다. 3층 아래로 내려가면 몇층인가? --&gt; 지하1층\n\n\n\nsolver3.sheet\n\n['6개', '지하1층', '2', '1', '6']\n\n\n\nsolver3.say()\n\n다풀었어요\n\n\n그런데 2층에서 3층 아래로가면 사실 지하 2층이다..\n\n\n\n\n\nflowchart LR\n  A[ProblemSolver4] --&gt; |\"거슬러올라가면\"| B[ProblemSolver3]\n  B[ProblemSolver3] --&gt; |\"거슬러올라가면\"| C[ProblemSolver2]\n  C[ProblemSolver2] --&gt; |\"거슬러올라가면\"| D[ProblemSolver1]\n\n\n\n\n\n\n\nclass ProblemSolver4(ProblemSolver3):\n    def solve(self):\n        ghost2 = super(ProblemSolver3,self) \n        ghost2.solve()\n        print(\"1. 규빈은 지금 2층에 있다. 3층 아래로 내려가면 몇층인가? --&gt; 지하2층\")\n        self.sheet[1] = \"지하2층\"\n\n\nsolver4 = ProblemSolver4()\nsolver4.sheet \n\n['???', '???', '???', '???', '???']\n\n\n\nsolver4.solve()\n\n0. 사과가 2개씩 3묶음 있다. 사과는 몇개인가? --&gt; 6개\n2. [1,2,3]의 평균은 얼마인가? --&gt; 2\n3. 100을 3으로 나누면 나머지가 얼마인가? --&gt; 1\n4. 2와 3의 최소공배수는 무엇인가? --&gt; 6\n1. 규빈은 지금 2층에 있다. 3층 아래로 내려가면 몇층인가? --&gt; 지하2층\n\n\n\nsolver4.sheet\n\n['6개', '지하2층', '2', '1', '6']\n\n\n\nsolver4.say()\n\n다풀었어요\n\n\n- ProblemSolver4를 아래와 같이 구현한다면? (틀린구현) // 빙의개념을 이해할것\n\n\n\n\n\nflowchart LR\n  A[ProblemSolver4Wrong] --&gt; |\"거슬러올라가면\"| B[ProblemSolver3]\n  B[ProblemSolver3] --&gt; |\"거슬러올라가면\"| C[ProblemSolver2]\n  C[ProblemSolver2] --&gt; |\"거슬러올라가면\"| D[ProblemSolver1]\n\n\n\n\n\n\n\nclass ProblemSolver4Wrong(ProblemSolver3):\n    def solve(self):\n        # ghost2 = super(ProblemSolver3,self) \n        # ghost2.solve()\n        solver2 = ProblemSolver2() \n        solver2.solve()\n        print(\"1. 규빈은 지금 2층에 있다. 3층 아래로 내려가면 몇층인가? --&gt; 지하2층\")\n        self.sheet[1] = \"지하2층\"\n\n\nsolver4 = ProblemSolver4Wrong()\nsolver4.sheet \n\n['???', '???', '???', '???', '???']\n\n\n\nsolver4.solve()\n\n0. 사과가 2개씩 3묶음 있다. 사과는 몇개인가? --&gt; 6개\n2. [1,2,3]의 평균은 얼마인가? --&gt; 2\n3. 100을 3으로 나누면 나머지가 얼마인가? --&gt; 1\n4. 2와 3의 최소공배수는 무엇인가? --&gt; 6\n['6개', '???', '2', '1', '6']\n['???', '???', '???', '???', '???']\n1. 규빈은 지금 2층에 있다. 3층 아래로 내려가면 몇층인가? --&gt; 지하2층\n\n\n\nsolver4.sheet\n\n['???', '지하2층', '???', '???', '???']\n\n\n\nsolver4.say()\n\n다풀었어요\n\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#c.-super-쓰지-않기",
    "href": "posts/14wk-2.html#c.-super-쓰지-않기",
    "title": "14wk-2: 클래스 (4)",
    "section": "C. super() 쓰지 않기",
    "text": "C. super() 쓰지 않기\n- 예전에는 super()가 없었다고 한다.\n# 예제1 – super()를 이용 vs 이용하지 않음\n\n\n\n\n\nflowchart LR\n  A[Dummy2] --&gt; |\"거슬러올라가면\"| B[Dummy]\n\n\n\n\n\n\n직선상속\n- 코드1: super() 사용 – 권장\n\nclass Dummy:\n    def __init__(self):\n        self.a = 0 \n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n\nclass Dummy2(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.b = 0         \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")  \n    \na = Dummy2()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\n\n\n- 코드2: super() 사용X – 권장X\n\nclass Dummy:\n    def __init__(self):\n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n        self.a = 0 \n\nclass Dummy2(Dummy):\n    def __init__(self):\n        Dummy.__init__(self)\n        self.b = 0 \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")        \n    \na = Dummy2()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\n\n\n#\n# 예제2 – 안쓰는 이유\n\n\n\n\n\nflowchart LR\n  B[Dummy2] --&gt; |\"거슬러올라가면\"| A[Dummy]\n  C[Dummy3] --&gt; |\"거슬러올라가면\"| A[Dummy]\n  D[Dummy4] --&gt; |\"거슬러올라가면\"| B[Dummy2]\n  D[Dummy4] --&gt; |\"거슬러올라가면\"| C[Dummy3]\n\n\n\n\n\n\n다이아몬드상속\n- 코드1: super() 사용 – 권장\n\nclass Dummy:\n    def __init__(self):\n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n        self.a = 0 \n\nclass Dummy2(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.b = 0 \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")        \n\nclass Dummy3(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.c = 0 \n        print(\"인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\")\n        \nclass Dummy4(Dummy2,Dummy3):\n    def __init__(self):\n        super().__init__()\n        self.d = 0\n        print(\"인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\")        \na = Dummy4()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\n인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\n인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\n\n\n- 코드2: super() 사용X – 권장X\n\nclass Dummy:\n    def __init__(self):\n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n        self.a = 0 \n\nclass Dummy2(Dummy):\n    def __init__(self):        \n        Dummy.__init__(self)\n        self.b = 0 \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")        \n\nclass Dummy3(Dummy):\n    def __init__(self):        \n        Dummy.__init__(self)\n        self.c = 0 \n        print(\"인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\")\n        \nclass Dummy4(Dummy2,Dummy3):\n    def __init__(self):\n        Dummy2.__init__(self)\n        Dummy3.__init__(self)\n        self.d = 0 \n        print(\"인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\")        \na = Dummy4()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\n인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\n\n\n- 원리\n\nclass Dummy:\n    def __init__(self):\n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n        self.a = 0 \n\nclass Dummy2(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.b = 0 \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")        \n\nclass Dummy3(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.c = 0 \n        print(\"인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\")\n        \nclass Dummy4(Dummy2,Dummy3):\n    def __init__(self):\n        super().__init__()\n        self.d = 0\n        print(\"인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\")        \na = Dummy4()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\n인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\n인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\n\n\n\nDummy4.mro()\n\n[__main__.Dummy4, __main__.Dummy2, __main__.Dummy3, __main__.Dummy, object]\n\n\nDummy4.__mro__ 를 타고 올라가서 제일 꼭대기부터 한번씩만 __init__() 을 실행함.\n#\n# 예제3 – 오개념 방지를 위한 예제들\n\n\n\n\n\nflowchart LR\n  B[Dummy2] --&gt; |\"거슬러올라가면\"| A[Dummy]\n  C[Dummy3] --&gt; |\"거슬러올라가면\"| A[Dummy]\n  D[Dummy4] --&gt; |\"거슬러올라가면\"| B[Dummy2]\n  D[Dummy4] --&gt; |\"거슬러올라가면\"| C[Dummy3]\n\n\n\n\n\n\n다이아몬드상속\n- 코드1: 결과를 예상해보자.\n\nclass Dummy:\n    def __init__(self):\n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n        self.a = 0 \n\nclass Dummy2(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.b = 0 \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")        \n\nclass Dummy3(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.c = 0 \n        print(\"인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\")\n        \nclass Dummy4(Dummy2,Dummy3):\n    def __init__(self):\n        super(Dummy2,self).__init__()\n        self.d = 0\n        print(\"인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\")        \na = Dummy4()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\n인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\n\n\n우리가 원한건\n인스턴스생성 -- self.a=0 대입 / Dummy에서 실행\n인스턴스생성 -- self.d=0 대입 / Dummy4에서 실행\n였는뎅..\n왜 이런일이?\n- mro/super는 상속순서를 직선으로 재정렬함\n개념적으로는 아래구조의 상속이지만\n\n\n\n\n\nflowchart LR\n  B[Dummy2] --&gt; |\"거슬러올라가면\"| A[Dummy]\n  C[Dummy3] --&gt; |\"거슬러올라가면\"| A[Dummy]\n  D[Dummy4] --&gt; |\"거슬러올라가면\"| B[Dummy2]\n  D[Dummy4] --&gt; |\"거슬러올라가면\"| C[Dummy3]\n\n\n\n\n\n\n실제로는 아래구조의 상속임\n\n\n\n\n\nflowchart LR\n  A[Dummy4] --&gt; |\"거슬러올라가면\"| B[Dummy2]\n  B[Dummy2] --&gt; |\"거슬러올라가면\"| C[Dummy3]\n  C[Dummy3] --&gt; |\"거슬러올라가면\"| D[Dummy]\n\n\n\n\n\n\n\nDummy4.mro()\n\n[__main__.Dummy4, __main__.Dummy2, __main__.Dummy3, __main__.Dummy, object]\n\n\n따라서 super(Dummy2,self) 가 구체화하는건 Dummy의 유령인스턴스가 아니라 Dummy3의 유령인스턴스임\n- 코드2: 결과를 예상해보자.\n\nclass Dummy:\n    def __init__(self):\n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n        self.a = 0 \n\nclass Dummy2(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.b = 0 \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")        \n\nclass Dummy3(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.c = 0 \n        print(\"인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\")\n        \nclass Dummy4(Dummy2,Dummy3):\n    def __init__(self):\n        Dummy.__init__(self)\n        self.d = 0\n        print(\"인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\")        \na = Dummy4()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\n\n\n\n이러면 혼란이 없음\n\n- 코드3: 결과를 예상해보자.\n\nclass Dummy:\n    def __init__(self):\n        print(\"인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\")\n        self.a = 0 \n\nclass Dummy2(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.b = 0 \n        print(\"인스턴스생성 -- self.b=0 대입 / Dummy2에서 정의됨\")        \n\nclass Dummy3(Dummy):\n    def __init__(self):\n        super().__init__()\n        self.c = 0 \n        print(\"인스턴스생성 -- self.c=0 대입 / Dummy3에서 정의됨\")\n        \nclass Dummy4(Dummy3,Dummy2):\n    def __init__(self):\n        super(Dummy2,self).__init__()\n        self.d = 0\n        print(\"인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\")        \na = Dummy4()\n\n인스턴스생성 -- self.a=0 대입 / Dummy에서 정의됨\n인스턴스생성 -- self.d=0 대입 / Dummy4에서 정의됨\n\n\n\nsuper()를 굳이 써야겠으면 Dummy4를 정의할때 mro를 고려하여 class Dummy4(Dummy2,Dummy3): 대신에 class Dummy4(Dummy3,Dummy2): 로 바꿔주면 된다.\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#d.-리스트의-상속-쓰지마세여",
    "href": "posts/14wk-2.html#d.-리스트의-상속-쓰지마세여",
    "title": "14wk-2: 클래스 (4)",
    "section": "D. 리스트의 상속 – 쓰지마세여",
    "text": "D. 리스트의 상속 – 쓰지마세여\n- list와 비슷한데 멤버들의 빈도가 계산되는 메소드를 포함하는 새로운 나만의 list를 만들고 싶다.\n\nlst = list('asdfasssdfa')\nlst \n\n['a', 's', 'd', 'f', 'a', 's', 's', 's', 'd', 'f', 'a']\n\n\n- 각 원소들의 빈도를 구해보면 아래와 같다.\n\n{s:lst.count(s) for s in set(lst)}\n\n{'f': 2, 'a': 3, 'd': 2, 's': 4}\n\n\n\nlst.freq() # 이렇게 실행하면 위의결과가 나왔으면 좋겠다.\n\nAttributeError: 'list' object has no attribute 'freq'\n\n\n- 이것을 내가 정의하는 새로운 list의 메소드로 넣고 싶다.\n\nclass List(list):\n    def freq(self):\n        return {s:self.count(s) for s in set(self)}\n\n\nlst2 = List('asdfasssdfa')\n\n\nlst2\n\n['a', 's', 'd', 'f', 'a', 's', 's', 's', 'd', 'f', 'a']\n\n\n\nlst\n\n['a', 's', 'd', 'f', 'a', 's', 's', 's', 'd', 'f', 'a']\n\n\n\n#lst2+lst ## 거의 lst2는 일반적인 lst와 같은역할\n\n- 기존리스트에서 추가로 frequency() 메소드가 존재함.\n\nlst2.freq()\n\n{'f': 2, 'a': 3, 'd': 2, 's': 4}\n\n\n\nlst.freq()\n\nAttributeError: 'list' object has no attribute 'freq'\n\n\n\n\n\n\n\n\nWarning\n\n\n\n사실 내장클래스의 상속은 추천하지 않는다. 여러가지 문제가 생기기 때문.."
  },
  {
    "objectID": "posts/14wk-2.html#a.-파이썬의-에러메시지",
    "href": "posts/14wk-2.html#a.-파이썬의-에러메시지",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 파이썬의 에러메시지",
    "text": "A. 파이썬의 에러메시지\nTypeError: 타입이 맞지 않는 연산을 수행하려고 할 때 발생. 예를 들어, 숫자와 문자열을 더하려고 할 때 발생.\n\nresult = 10 + \"20\"  # TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\nSyntaxError: 코드의 구문이 잘못되었을 때 발생. 주로 오타, 괄호 불일치, 콜론(:) 빠뜨림 등의 문제로 인해 발생.\n\nx = 5\nif x == 5\n    print(\"x is equal to 5\")  # SyntaxError: invalid syntax\n\nSyntaxError: expected ':' (3172478983.py, line 2)\n\n\nNameError: 정의되지 않은 변수나 함수를 사용하려고 할 때 발생.\n\nprint(unknown_variable)  # NameError: name 'unknown_variable' is not defined\n\nNameError: name 'unknown_variable' is not defined\n\n\nValueError: 함수나 메서드에 전달되는 인자의 값이 올바르지 않을 때 발생.\n\nint_value = int(\"abc\")  # ValueError: invalid literal for int() with base 10: 'abc'\n\nValueError: invalid literal for int() with base 10: 'abc'\n\n\nAttributeError: 객체가 속성(attribute)이나 메서드(method)를 가지고 있지 않을 때 발생\n\nmy_list = [1, 2, 3]\nmy_list.append(4)\nmy_list.upper()  # AttributeError: 'list' object has no attribute 'upper'\n\nAttributeError: 'list' object has no attribute 'upper'\n\n\nImportError: 모듈을 임포트하는 과정에서 문제가 발생할 때 발생. 임포트하려는 모듈이 존재하지 않거나, 임포트 경로 설정이 잘못된 경우에 해당.\n\nimport non_existent_module  # ImportError: No module named 'non_existent_module'\n\nModuleNotFoundError: No module named 'non_existent_module'\n\n\nIOError: 파일 입출력 작업 중에 발생하는 에러. 파일이 존재하지 않거나, 파일에 쓰기 권한이 없는 경우 등에 해당.\n\nfile = open('file.txt', 'r')  # IOError: [Errno 2] No such file or directory: 'file.txt'\n\nFileNotFoundError: [Errno 2] No such file or directory: 'file.txt'\n\n\nKeyboardInterrupt: 사용자가 프로그램의 실행을 중단할 때 발생.\n\nwhile True:\n    pass  # 무한 루프\n# KeyboardInterrupt: \n\nKeyboardInterrupt: \n\n\nIndexError: 유효하지 않은 인덱스를 사용하여 시퀀스(리스트, 튜플, 문자열 등)의 요소에 접근하려고 할 때 발생.\n\nmy_list = [1, 2, 3]\nprint(my_list[5])  # IndexError: list index out of range\n\nIndexError: list index out of range\n\n\nKeyError: 딕셔너리에서 존재하지 않는 키를 사용하여 요소에 접근하려고 할 때 발생.\n\nmy_dict = {'name': 'John', 'age': 25}\nprint(my_dict['address'])  # KeyError: 'address'\n\nKeyError: 'address'\n\n\nFileNotFoundError: 존재하지 않는 파일을 열려고 할 때 발생.\n\nfile = open('nonexistent_file.txt')  # FileNotFoundError: [Errno 2] No such file or directory: 'nonexistent_file.txt'\n\nFileNotFoundError: [Errno 2] No such file or directory: 'nonexistent_file.txt'\n\n\nZeroDivisionError: 0으로 나누기 연산을 수행하려고 할 때 발생.\n\nresult = 10 / 0  # ZeroDivisionError: division by zero\n\nZeroDivisionError: division by zero"
  },
  {
    "objectID": "posts/14wk-2.html#b.-typeerror에-대한-심층분석",
    "href": "posts/14wk-2.html#b.-typeerror에-대한-심층분석",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. TypeError에 대한 심층분석",
    "text": "B. TypeError에 대한 심층분석\n- .__add__ 가 올바르게 정의되지 않아서 생기는 경우\n\nclass StudentWrong:\n    def __init__(self,age=20.0, semester=0):\n        self.age = age \n        self.semester = semester\n        print(f\"입학을 축하합니다. 당신의 나이는 {self.age}이고 현재 학기는 {self.semester}학기 입니다.\")\n    def __repr__(self):\n        text = f\"나이: {self.age}\\n학기: {self.semester}\"\n        return text\n    def __add__(self,registration_status):\n        if registration_status == \"휴학\":\n            self.age = self.age +0.5 \n        elif registration_status == \"등록\":\n            self.age = self.age +0.5 \n            self.semester = self.semester + 1\n\n\nseoyeon = StudentWrong()\nseoyeon + \"등록\" + \"등록\"\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n\n\n- .__getitem__이 정의되지 않은 오브젝트에서 인덱싱을 시도할때 생기는 오류\n\nclass Dummy:\n    pass \na = Dummy()\na[0]\n\nTypeError: 'Dummy' object is not subscriptable\n\n\n- .__setitem__이 정의되지 않은 오브젝트에서 할당을 시도할때 생기는 오류\n\nclass Dummy:\n    pass \na = Dummy()\na[0] = 5\n\nTypeError: 'Dummy' object does not support item assignment\n\n\n- .__len__ 이 정의되지 않은 오브젝트에서 len을 이용할때 생기는 오류\n\nclass Dummy:\n    pass \na = Dummy()\nlen(a)\n\nTypeError: object of type 'Dummy' has no len()\n\n\n- .__call__이 정의되지 않은 오브젝트를 함수처럼 이용하려 할때 생기는 오류\n\nclass Dummy:\n    pass \na = Dummy()\na()\n\nTypeError: 'Dummy' object is not callable\n\n\n- .__iter__가 정의되지 않은 오브젝트를 iterable 오브젝트처럼 사용하려 할때 생기는 오류\n\nclass Dummy:\n    pass \na = Dummy()\nfor i in a:\n    print(i)\n\nTypeError: 'Dummy' object is not iterable"
  },
  {
    "objectID": "posts/14wk-2.html#a.-모듈",
    "href": "posts/14wk-2.html#a.-모듈",
    "title": "14wk-2: 클래스 (4)",
    "section": "A. 모듈",
    "text": "A. 모듈\n1. .ipynb 파일이 아니라 .py 파일은 뭐지?\n2. from ?? import ?? as ?? 이런거 어렵다면?? \n3. __init__.py --&gt; 이게 보인다면?"
  },
  {
    "objectID": "posts/14wk-2.html#b.-스크립트실행",
    "href": "posts/14wk-2.html#b.-스크립트실행",
    "title": "14wk-2: 클래스 (4)",
    "section": "B. 스크립트실행",
    "text": "B. 스크립트실행\n1. 터미널(검은화면)에서 python ??.py 같은걸 실행하는걸 본다면??\n2. if __name__ == \"__main__\": --&gt; 이런게 보인다면?"
  },
  {
    "objectID": "posts/14wk-2.html#c.-패키지-제작-설치",
    "href": "posts/14wk-2.html#c.-패키지-제작-설치",
    "title": "14wk-2: 클래스 (4)",
    "section": "C. 패키지 제작, 설치",
    "text": "C. 패키지 제작, 설치\n1. 깃허브에서 setup.py 보인다면?? \n2. pip install 이런걸 알고 싶다면??\n3. conda install 이런걸 알고 싶다면??"
  },
  {
    "objectID": "posts/14wk-2.html#d.-with",
    "href": "posts/14wk-2.html#d.-with",
    "title": "14wk-2: 클래스 (4)",
    "section": "D. with",
    "text": "D. with\n1. 파일열거나 불러올때 많이씀\n2. plt.plot 등을 사용할때 테마변경.. \n3. tensorflow 배울때 with를 모르면 gradient tape의 개념을 이해할 수 없음..."
  },
  {
    "objectID": "posts/14wk-2.html#e.-깊은복사-얕은복사",
    "href": "posts/14wk-2.html#e.-깊은복사-얕은복사",
    "title": "14wk-2: 클래스 (4)",
    "section": "E. 깊은복사, 얕은복사",
    "text": "E. 깊은복사, 얕은복사\n1. 아래와 같은 얶까 당할때 있음.. 절대 어디가 틀린지 모름.. \n2. 가능하다면 그냥 모르고 사는게 행복함. \n- 예시1\n\na = [1,2,3]\nb = a \nb.append(4)\nb\n\n[1, 2, 3, 4]\n\n\n\na\n\n[1, 2, 3, 4]\n\n\n#\n- 예시2\n\na = [1] \nb = a  # b=[1] \na = a+[2] # a=[1,2] \na = a+[3] # a=[1,2,3] \na = a+[4] # a=[1,2,3,4] \na,b\n\n([1, 2, 3, 4], [1])\n\n\n\na = [1] \nb = a \na += [2] \na += [3]\na += [4] \na,b\n\n([1, 2, 3, 4], [1, 2, 3, 4])\n\n\n#"
  },
  {
    "objectID": "posts/14wk-2.html#g.-시각화",
    "href": "posts/14wk-2.html#g.-시각화",
    "title": "14wk-2: 클래스 (4)",
    "section": "G. 시각화",
    "text": "G. 시각화\n1. import matplotlib.pyplot as plt\n2. import seaborn as sns \n3. from plotnine import * \n4. import plotly.express as px"
  },
  {
    "objectID": "posts/14wk-2.html#h.-판다스",
    "href": "posts/14wk-2.html#h.-판다스",
    "title": "14wk-2: 클래스 (4)",
    "section": "H. 판다스",
    "text": "H. 판다스"
  },
  {
    "objectID": "posts/14wk-2.html#i.-에러관리",
    "href": "posts/14wk-2.html#i.-에러관리",
    "title": "14wk-2: 클래스 (4)",
    "section": "I. 에러관리",
    "text": "I. 에러관리\n1. try, except, finally\n2. raise"
  },
  {
    "objectID": "posts/14wk-2.html#j.-collection",
    "href": "posts/14wk-2.html#j.-collection",
    "title": "14wk-2: 클래스 (4)",
    "section": "J. collection",
    "text": "J. collection\n1. from collections import Counter \n2. from collections import deque\n3. from collections import OrderedDict\n4. from collections import defaultdict\n5. from collections import namedtuple\n\nfrom collections import Counter\n\nlst = ['a', 'b', 'c', 'a', 'b', 'a']\ncounter = Counter(lst)\ncounter\n\nCounter({'a': 3, 'b': 2, 'c': 1})"
  },
  {
    "objectID": "posts/14wk-2.html#k.-기타-유용한-내장패키지",
    "href": "posts/14wk-2.html#k.-기타-유용한-내장패키지",
    "title": "14wk-2: 클래스 (4)",
    "section": "K. 기타 유용한 내장패키지",
    "text": "K. 기타 유용한 내장패키지\n1. import bisec\n2. import heapq"
  },
  {
    "objectID": "posts/10wk-2.html#a.-numpy-대비-장점",
    "href": "posts/10wk-2.html#a.-numpy-대비-장점",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. numpy 대비 장점?",
    "text": "A. numpy 대비 장점?\n- 장점1: 모든 자료형이 동일할 필요가 없다.\n(문제) – 아래의 리스트에서 능력치가 90 보다 큰 선수들을 출력하라.\n\nlst = [['Bruno Fernandes', 'Europe', 88],\n       ['L. Goretzka', 'Europe', 87],\n       ['L. Suárez', 'South America', 88],\n       ['K. De Bruyne', 'Europe', 91],\n       ['M. Acuña', 'South America', 84],\n       ['J. Kimmich', 'Europe', 89]]\n\n(풀이) – 아마 이렇게..\n\n[[name,continent,x] for name, continent, x in lst if x&gt;90]\n\n[['K. De Bruyne', 'Europe', 91]]\n\n\n(풀이) – 말린다면..\n\narr = np.array(lst)\narr\n\narray([['Bruno Fernandes', 'Europe', '88'],\n       ['L. Goretzka', 'Europe', '87'],\n       ['L. Suárez', 'South America', '88'],\n       ['K. De Bruyne', 'Europe', '91'],\n       ['M. Acuña', 'South America', '84'],\n       ['J. Kimmich', 'Europe', '89']], dtype='&lt;U21')\n\n\n\narr[arr[:,2] &gt; 90]\n\nUFuncTypeError: ufunc 'greater' did not contain a loop with signature matching types (&lt;class 'numpy.dtypes.StrDType'&gt;, &lt;class 'numpy.dtypes.Int64DType'&gt;) -&gt; &lt;class 'numpy.dtypes.BoolDType'&gt;\n\n\n(풀이) – 판다스였다면\n\ndf = pd.DataFrame(lst)\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\nBruno Fernandes\nEurope\n88\n\n\n1\nL. Goretzka\nEurope\n87\n\n\n2\nL. Suárez\nSouth America\n88\n\n\n3\nK. De Bruyne\nEurope\n91\n\n\n4\nM. Acuña\nSouth America\n84\n\n\n5\nJ. Kimmich\nEurope\n89\n\n\n\n\n\n\n\n\ndf[df.iloc[:,2] &gt; 90]\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n3\nK. De Bruyne\nEurope\n91\n\n\n\n\n\n\n\n(분석)\n\narr[:,0],arr[:,1],arr[:,2] # 문자열,문자열,문자열 -&gt; 각 col의 자료형이 반드시 같아야함\n\n(array(['Bruno Fernandes', 'L. Goretzka', 'L. Suárez', 'K. De Bruyne',\n        'M. Acuña', 'J. Kimmich'], dtype='&lt;U21'),\n array(['Europe', 'Europe', 'South America', 'Europe', 'South America',\n        'Europe'], dtype='&lt;U21'),\n array(['88', '87', '88', '91', '84', '89'], dtype='&lt;U21'))\n\n\n\ndf.iloc[:,0], df.iloc[:,1], df.iloc[:,2] # object,object,int -&gt; 각 col의 자료형이 다를수도있음.\n\n(0    Bruno Fernandes\n 1        L. Goretzka\n 2          L. Suárez\n 3       K. De Bruyne\n 4           M. Acuña\n 5         J. Kimmich\n Name: 0, dtype: object,\n 0           Europe\n 1           Europe\n 2    South America\n 3           Europe\n 4    South America\n 5           Europe\n Name: 1, dtype: object,\n 0    88\n 1    87\n 2    88\n 3    91\n 4    84\n 5    89\n Name: 2, dtype: int64)\n\n\n- 장점2: 인덱싱과 해싱을 동시에 할 수 있다. (순서형자료형과 맵핑형자료형의 장점을 동시에 가짐)\n\nlist의 장점 \\(\\to\\) numpy 가 계승\ndct의 장점 \\(\\to\\) pandas 가 계승 + list/numpy의 장점 일부흡수\n\n\ndct = {'att':[30,40,50],'mid':[50,60,70]}\ndf = pd.DataFrame(dct)\ndf\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n\ndf['att'], dct['att'] # 해싱\n\n(0    30\n 1    40\n 2    50\n Name: att, dtype: int64,\n [30, 40, 50])\n\n\n\ndf.iloc[[1],[0,1]] # 인덱싱\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n1\n40\n60\n\n\n\n\n\n\n\n\n느낌: 판다스데이터프레임은 엑셀 그자체!"
  },
  {
    "objectID": "posts/10wk-2.html#b.-선언방법",
    "href": "posts/10wk-2.html#b.-선언방법",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. 선언방법",
    "text": "B. 선언방법\n- 방법1: dictionary에서 만든다. (맵핑형자료에서 생성)\n\npd.DataFrame({'att':[30,40,50],'mid':[50,60,70]})\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n\npd.DataFrame({'att':(30,40,50),'mid':(50,60,70)})\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n\npd.DataFrame({'att':np.array([30,40,50]),'mid':np.array([50,60,70])})\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n- 방법2: ndarray 혹은 list 등에서 만든다. (보통 2차원의 중첩구조를 가지는 순서형자료에서 생성하는게 일반적임)\n\nnp.arange(2*3).reshape(2,3)\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\npd.DataFrame(np.arange(2*3).reshape(2,3))\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5"
  },
  {
    "objectID": "posts/10wk-2.html#c.-자료형-len-shape-for문의-반복변수",
    "href": "posts/10wk-2.html#c.-자료형-len-shape-for문의-반복변수",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "C. 자료형, len, shape, for문의 반복변수",
    "text": "C. 자료형, len, shape, for문의 반복변수\n\ndf = pd.DataFrame({'att':[30,40,50],'mid':[5,45,90]})\ndf\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n5\n\n\n1\n40\n45\n\n\n2\n50\n90\n\n\n\n\n\n\n\n- type\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n- len\n\nlen(df) # row의 갯수 \n\n3\n\n\n- shape\n\ndf.shape \n\n(3, 2)\n\n\n- for문의 반복변수\n\nfor k in df:\n    print(k) # 딕셔너리같죠\n\natt\nmid\n\n\n\nfor k in {'att':[30,40,50],'mid':[5,45,90]}: \n    print(k)\n\natt\nmid\n\n\n참고: df는 진짜 딕셔너리 느낌 강해요\n\ndf.keys()\n\nIndex(['att', 'mid'], dtype='object')\n\n\n\nfor k,v in df.items():\n    print(k)\n    print(v)\n    print('\\n')\n\natt\n0    30\n1    40\n2    50\nName: att, dtype: int64\n\n\nmid\n0     5\n1    45\n2    90\nName: mid, dtype: int64"
  },
  {
    "objectID": "posts/10wk-2.html#d.-pd.series",
    "href": "posts/10wk-2.html#d.-pd.series",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "D. pd.Series",
    "text": "D. pd.Series\n- 2차원 ndarray가 pd.DataFrame에 대응한다면 1차원 ndarray는 pd.Series에 대응한다.\n\ns=pd.Series(np.random.randn(10))\ns\n\n0    0.252373\n1   -1.075307\n2   -0.368705\n3    0.784600\n4    0.549906\n5   -0.479970\n6   -1.991117\n7   -0.407330\n8   -0.131100\n9    0.388155\ndtype: float64\n\n\n\ntype(s)\n\npandas.core.series.Series\n\n\n\nlen(s)\n\n10\n\n\n\ns.shape\n\n(10,)\n\n\n\nfor x in s: \n    print(x)\n\n0.2523733143388311\n-1.0753068117512616\n-0.36870536789029595\n0.7845995696103139\n0.5499055415241653\n-0.47997013360871355\n-1.9911174129623606\n-0.40733045301228693\n-0.13110029817116495\n0.38815521816133036"
  },
  {
    "objectID": "posts/10wk-2.html#a.-열의-선택",
    "href": "posts/10wk-2.html#a.-열의-선택",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. 열의 선택",
    "text": "A. 열의 선택\n\ndf\n\n\n\n\n\n\n\n\ndate\nX1\nX2\nX3\nX4\n\n\n\n\n0\n12/30\n65\n55\n50\n40\n\n\n1\n12/31\n95\n100\n50\n80\n\n\n2\n01/01\n65\n90\n60\n30\n\n\n3\n01/02\n55\n80\n75\n80\n\n\n4\n01/03\n80\n30\n30\n100\n\n\n\n\n\n\n\n- 방법1: df.? + col-name\n\n# df.X1\n\n- 방법2: df[?] + str, [str,str]\n\n# df['X1'] # str \n# df[['X1']] # [str]\n# df[['X1','X3']] # [str,str]\n\n- 방법3: df.iloc[:,?] + int, int:int, [int,int], [bool,bool], range\n\n# df.iloc[:,0] # int\n# df.iloc[:,-2:] # int:int - 슬라이싱\n# df.iloc[:,1::2] # int:int - 스트라이딩\n# df.iloc[:,[0]] # [int]\n# df.iloc[:,[0,1]] # [int,int]\n# df.iloc[:,[True,True,False,False]] # bool의 list \n# df.iloc[:,range(2)] # range\n\n- 방법4: df.loc[:,?] + str, ‘str:str’, [str,str], [bool,bool]\n\n# df.loc[:,'X1'] # str\n# df.loc[:,'X1':'X3'] # 'str':'str' -- 칼럼이름으로 슬라이싱 **\n# df.loc[:,'X1'::2] # 'str':'str' -- 칼럼이름으로 스트라이딩 ** \n# df.loc[:,['X1']] # [str]\n# df.loc[:,['X1','X4']] # [str,str]\n# df.loc[:,[True,False,False,True]] # bool의 list"
  },
  {
    "objectID": "posts/10wk-2.html#b.-행의-선택",
    "href": "posts/10wk-2.html#b.-행의-선택",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. 행의 선택",
    "text": "B. 행의 선택\n- 방법1: df[] + int:int, str:str, [bool,bool], pd.Series([bool,bool]) – \\((\\star\\star\\star\\star\\star)\\)\n\n# df[:2] # int:int -- 슬라이싱 // df.iloc[:2,:], df.iloc[:2] 와 같음\n# df[::2] # int:int -- 스트라이딩 \n# ts['12/30':'01/02'] # str:str -- 슬라이싱\n# ts['12/31'::2] # str:str -- 스트라이딩\n# df[['12' in date for date in df.date]] # [bool,bool]\n# df[df.X1 &lt; 70] # pd.Series([bool,bool])\n\n- 방법2: df.iloc[], df.iloc[,:] + int, int:int, [int,int], [bool,bool], range\n\n# df.iloc[0] # int \n# df.iloc[-2:] # int:int -- 슬라이싱\n# df.iloc[1::2] # int:int -- 스트라이딩\n# df.iloc[[0]] # [int]\n# df.iloc[[0,1]] # [int,int]\n# df.iloc[['12' in date for date in df.date]] # [bool,bool]\n# df.iloc[range(2)] # range\n\n\n# df.iloc[0,:] # int \n# df.iloc[-2:,:] # int:int -- 슬라이싱\n# df.iloc[1::2,:] # int:int -- 스트라이딩\n# df.iloc[[0],:] # [int]\n# df.iloc[[0,1],:] # [int,int]\n# df.iloc[['12' in date for date in df.date],:] # [bool,bool]\n# df.iloc[range(2),:] # range\n\n- 방법3: df.loc[], df.loc[,:] + int, str, int:int, str:str, [int,int], [str,str], [bool,bool], pd.Series([bool,bool])\n\n# df.loc[0] # int \n# ts.loc['12/30'] # str \n# df.loc[:2] # int:int \n# ts.loc[:'01/02'] # str:str \n# df.loc[[0,1]] # [int,int]\n# ts.loc[['12/30','01/01']] # [str,str]\n# df.loc[['12' in date for date in df.date]] # [bool,bool]\n# df.loc[df.X1&gt;70] # pd.Series([bool,bool])"
  },
  {
    "objectID": "posts/10wk-2.html#c.-제-스타일",
    "href": "posts/10wk-2.html#c.-제-스타일",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "C. 제 스타일",
    "text": "C. 제 스타일\n- 가장 안전한 코드\n\n# df.loc[:,:]\n\n- 상황1: 하나의 col을 뽑으려 할때 좋은 코드\n\n# df.X1 # 최애 \n# df['X1'] # 차애 \n# df[['X1']] # 차애\n\n- 상황2: row 슬라이싱을 할때 좋은 코드 \\((\\star\\star\\star)\\)\n\n# df[:5] # 최애 \n# ts[:'01/02'] # 시계열인 경우 \n\n- 상황3: 조건에 맞는 row를 뽑을때 좋은 코드\n\n# df[df.X1&lt;60] # 최애\n# df.loc[['12' in date for date in df.date]] # 차애\n\n- 상황4: 하나의 row를 뽑으려 할때 좋은 코드\n\n# df.iloc[0] # 최애 \n# df.loc[0] # 차애\n\n- 상황5: (row,col)을 뽑으려 할때 좋은 코드\n\n# 최애: pd.Series를 뽑고 -&gt; 인덱스로접근\n# df.X1[0]\n# df['X1'][0]\n\n# 차애: iloc, loc 으로 한번에 뽑기\n# df.iloc[0,0]\n# df.loc[0,'X1']\n\n위의 상황이외에는 df.loc[:,:]를 사용하는것이 유리하다\n- 상황6: column 슬라이싱을 할때\n\n# df.loc[:,'X1':'X3'] # 끝점포함\n\n- 상황7: row + column 슬라이싱을 하는 가장 좋은 코드\n\n# df.loc[::2,'X1':'X2']\n\n- 상황8: 조건에 맞는 col을 뽑기에 가장 좋은 코드\n\n# df.loc[:,[len(colname)&gt;2 for colname in df.columns]]\n\n- 상황9: 조건에 맞는 row, col을 뽑기에 가장 좋은 코드\n\n# df.loc[df.X1&gt;70,[len(colname)&gt;2 for colname in df.columns]]"
  },
  {
    "objectID": "posts/10wk-2.html#d.-제-스타일-x",
    "href": "posts/10wk-2.html#d.-제-스타일-x",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "D. 제 스타일 X",
    "text": "D. 제 스타일 X\n- 제가 안쓰는 코드1\n\ndf[:1]\n\n\n\n\n\n\n\n\ndate\nX1\nX2\nX3\nX4\n\n\n\n\n0\n12/30\n65\n55\n50\n40\n\n\n\n\n\n\n\n이러면 내 입장에서는 마치 아래가 동작할 것 같잖아..\n\ndf[0] \n\nKeyError: 0\n\n\n- 제가 안쓰는 코드2: bool의 list를 사용할때 iloc은 가급적 쓰지마세요\n\ndf.iloc[list(df['X1']&lt;80),:]\n\n\n\n\n\n\n\n\ndate\nX1\nX2\nX3\nX4\n\n\n\n\n0\n12/30\n65\n55\n50\n40\n\n\n2\n01/01\n65\n90\n60\n30\n\n\n3\n01/02\n55\n80\n75\n80\n\n\n\n\n\n\n\n이러면 마치 아래도 동작할 것 같잖아..\n\ndf.iloc[df['X1']&lt;80,:]\n\nNotImplementedError: iLocation based boolean indexing on an integer type is not available"
  },
  {
    "objectID": "posts/10wk-2.html#e.-요약",
    "href": "posts/10wk-2.html#e.-요약",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "E. 요약",
    "text": "E. 요약\n- 알아두면 좋은 규칙\n\n.iloc[] 와 .iloc[,:]는 완전히 동등하다.\n.loc[] 와 .loc[,:]는 완전히 동등하다.\n결과를 pd.Series 형태가 아닌 pd.DataFrame 형태로 얻고 싶다면 [[?]]를 사용하면 된다.\n\n- 정리\n\nROWCOL\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype of indexer\n.\n[]\n.iloc\n.loc\n내가 쓴다면?\n\n\n\n\nint\nX\nX\nO\n\\(\\Delta\\)\ndf.iloc[3,:]\n\n\nint:int\nX\nO\nO\n\\(\\Delta\\)\ndf[3:5]\n\n\n[int,int]\nX\nX\nO\n\\(\\Delta\\)\ndf.iloc[idx,:]\n\n\nstr\nX\nX\nX\nO\nts.loc['time1',:]\n\n\nstr:str\nX\nO\nX\nO\nts.loc['time1':'time2',:]\n\n\n[str,str]\nX\nX\nX\nO\n안할 듯\n\n\n[bool,bool]\nX\nO\nO\nO\ndf[filtered_idx]\n\n\npd.Series([bool,bool])\nX\nO\nX\nO\ndf[df.X1&gt;20]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype of indexer\n.\n[]\n.iloc\n.loc\n내가 쓴다면?\n\n\n\n\nint\nX\nX\nO\nX\ndf.iloc[:,0]\n\n\nint:int\nX\nX\nO\nX\ndf.iloc[:,0:2]\n\n\n[int,int]\nX\nX\nO\nX\ndf.iloc[:,idx]\n\n\nstr\nO\nO\nX\nO\ndf.loc[:,'X1']\n\n\nstr:str\nX\nX\nX\nO\ndf.loc[:,'X1':'X4']\n\n\n[str,str]\nX\nO\nX\nO\ndf.loc[:,colname_list]\n\n\n[bool,bool]\nX\nX\nO\nO\ndf.loc[:,bool_list]"
  },
  {
    "objectID": "posts/10wk-2.html#a.-열의-이름-변경",
    "href": "posts/10wk-2.html#a.-열의-이름-변경",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. 열의 이름 변경",
    "text": "A. 열의 이름 변경\n- 방법1: df.columns에 대입\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.columns = ['A','B']\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n0.037335\n-0.540520\n\n\n1\n-0.019184\n-0.711376\n\n\n2\n0.320825\n-0.245878\n\n\n\n\n\n\n\n- 방법2: df.set_axis()\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.set_axis(['A','B'],axis=1)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n-0.252874\n1.569584\n\n\n1\n-0.957351\n-0.120713\n\n\n2\n1.400832\n-0.916344\n\n\n\n\n\n\n\n- 방법3: df.rename()\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.rename({0:'AA',1:'BB'},axis=1)\n\n\n\n\n\n\n\n\nAA\nBB\n\n\n\n\n0\n-1.793611\n0.047263\n\n\n1\n-0.326602\n0.054525\n\n\n2\n-1.117781\n0.405474"
  },
  {
    "objectID": "posts/10wk-2.html#b.-행의-이름-변경",
    "href": "posts/10wk-2.html#b.-행의-이름-변경",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. 행의 이름 변경",
    "text": "B. 행의 이름 변경\n- 방법1: df.index에 대입\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n-1.074150\n0.030191\n\n\n1\n-2.527365\n0.964030\n\n\n2\n0.305062\n-0.858343\n\n\n\n\n\n\n\n\ndf.index = ['guebin','jiyoon','boram']\ndf\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\nguebin\n-1.074150\n0.030191\n\n\njiyoon\n-2.527365\n0.964030\n\n\nboram\n0.305062\n-0.858343\n\n\n\n\n\n\n\n- 방법2: df.set_axis()\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.set_axis([11,22,33],axis=0)\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n11\n0.003062\n0.005044\n\n\n22\n0.915182\n0.303740\n\n\n33\n1.665422\n-0.164989\n\n\n\n\n\n\n\n- 방법3: df.rename()\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.rename({1:'guebin'},axis=0)\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n0.937158\n0.504850\n\n\nguebin\n-0.891393\n0.592022\n\n\n2\n1.386969\n0.773002\n\n\n\n\n\n\n\n- 방법4: 임의의 열을 행이름 으로 지정!\n\ndf = pd.DataFrame({'id':['2021-43052','2021-43052'], 'hour':[3,2], 'height':[176,172]})\ndf.set_index('id')\n\n\n\n\n\n\n\n\nhour\nheight\n\n\nid\n\n\n\n\n\n\n2021-43052\n3\n176\n\n\n2021-43052\n2\n172"
  },
  {
    "objectID": "posts/10wk-2.html#ab에-대한-연습문제",
    "href": "posts/10wk-2.html#ab에-대한-연습문제",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "# A~B에 대한 연습문제",
    "text": "# A~B에 대한 연습문제\n- 데이터 load\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n# 예제1: 열의 이름 출력하고, 열의 이름중 공백()이 있을 경우 언더바(_) 로 바꾸자.\n컬럼출력\n\ndf.columns\n\nIndex(['ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Overall',\n       'Potential', 'Club', 'Club Logo', 'Value', 'Wage', 'Special',\n       'Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position',\n       'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight',\n       'Release Clause', 'Kit Number', 'Best Overall Rating'],\n      dtype='object')\n\n\n\ndf.columns에 직접대입\n\n\nnew_colnames = [l.replace(' ','_') for l in df.columns]\n\n\n# df.columns = new_colnames\n# df\n\n\nset_axis() 이용\n\n\ndf.set_axis(new_colnames,axis=1)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub_Logo\n...\nReal_Face\nPosition\nJoined\nLoaned_From\nContract_Valid_Until\nHeight\nWeight\nRelease_Clause\nKit_Number\nBest_Overall_Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n\nrename() 이용\n\n\ndf.rename({l:l.replace(' ','_') for l in df.columns if ' ' in l},axis=1)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub_Logo\n...\nReal_Face\nPosition\nJoined\nLoaned_From\nContract_Valid_Until\nHeight\nWeight\nRelease_Clause\nKit_Number\nBest_Overall_Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n#\n예제2: ID를 row-index로 지정하라.\n\n직접지정\n\n\n# df.index = df.ID\n# df\n\n\nset_axis()\n\n\ndf.set_axis(df.ID,axis=0)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\nID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n209658\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n212198\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n224334\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n192985\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n224232\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n269526\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n267946\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n270567\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n256624\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n256376\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n\nrename()\n\n\ndf.rename({i:j for i,j in zip(df.index, df.ID)})\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n209658\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n212198\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n224334\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n192985\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n224232\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n269526\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n267946\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n270567\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n256624\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n256376\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n\nset_index()\n\n\ndf.set_index('ID')\n\n\n\n\n\n\n\n\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\nValue\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\nID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n€91M\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n€78.5M\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n€46.5M\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n€107.5M\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n€89.5M\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n€100K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n€100K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n€70K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n€90K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n€90K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 28 columns\n\n\n\n#"
  },
  {
    "objectID": "posts/10wk-2.html#c.-df.t",
    "href": "posts/10wk-2.html#c.-df.t",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "C. df.T",
    "text": "C. df.T\n- 데이터 load\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n- df.T를 이용하여 데이터를 살피면 편리함\n\ndf.T.iloc[:,:2]\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\nID\n209658\n212198\n\n\nName\nL. Goretzka\nBruno Fernandes\n\n\nAge\n27\n27\n\n\nPhoto\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nhttps://cdn.sofifa.net/players/212/198/23_60.png\n\n\nNationality\nGermany\nPortugal\n\n\nFlag\nhttps://cdn.sofifa.net/flags/de.png\nhttps://cdn.sofifa.net/flags/pt.png\n\n\nOverall\n87\n86\n\n\nPotential\n88\n87\n\n\nClub\nFC Bayern München\nManchester United\n\n\nClub Logo\nhttps://cdn.sofifa.net/teams/21/30.png\nhttps://cdn.sofifa.net/teams/11/30.png\n\n\nValue\n€91M\n€78.5M\n\n\nWage\n€115K\n€190K\n\n\nSpecial\n2312\n2305\n\n\nPreferred Foot\nRight\nRight\n\n\nInternational Reputation\n4.0\n3.0\n\n\nWeak Foot\n4.0\n3.0\n\n\nSkill Moves\n3.0\n4.0\n\n\nWork Rate\nHigh/ Medium\nHigh/ High\n\n\nBody Type\nUnique\nUnique\n\n\nReal Face\nYes\nYes\n\n\nPosition\n&lt;span class=\"pos pos28\"&gt;SUB\n&lt;span class=\"pos pos15\"&gt;LCM\n\n\nJoined\nJul 1, 2018\nJan 30, 2020\n\n\nLoaned From\nNaN\nNaN\n\n\nContract Valid Until\n2026\n2026\n\n\nHeight\n189cm\n179cm\n\n\nWeight\n82kg\n69kg\n\n\nRelease Clause\n€157M\n€155M\n\n\nKit Number\n8.0\n8.0\n\n\nBest Overall Rating\nNaN\nNaN\n\n\n\n\n\n\n\n- 출력옵션 조정\n\npd.options.display.max_rows = 12\ndisplay(df.T.iloc[:,:2])\npd.reset_option(\"display.max_rows\")\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\nID\n209658\n212198\n\n\nName\nL. Goretzka\nBruno Fernandes\n\n\nAge\n27\n27\n\n\nPhoto\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nhttps://cdn.sofifa.net/players/212/198/23_60.png\n\n\nNationality\nGermany\nPortugal\n\n\n...\n...\n...\n\n\nHeight\n189cm\n179cm\n\n\nWeight\n82kg\n69kg\n\n\nRelease Clause\n€157M\n€155M\n\n\nKit Number\n8.0\n8.0\n\n\nBest Overall Rating\nNaN\nNaN\n\n\n\n\n29 rows × 2 columns\n\n\n\n\n이 예제에서는 줄이는 옵션을 사용했지만 보통은 늘려서 사용함"
  },
  {
    "objectID": "posts/10wk-2.html#d.-df.dtypes-s.dtype-df.select_dtypes",
    "href": "posts/10wk-2.html#d.-df.dtypes-s.dtype-df.select_dtypes",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "D. df.dtypes, s.dtype, df.select_dtypes()",
    "text": "D. df.dtypes, s.dtype, df.select_dtypes()\n- df.dtypes\n\ndf.dtypes\n\nID                            int64\nName                         object\nAge                           int64\nPhoto                        object\nNationality                  object\nFlag                         object\nOverall                       int64\nPotential                     int64\nClub                         object\nClub Logo                    object\nValue                        object\nWage                         object\nSpecial                       int64\nPreferred Foot               object\nInternational Reputation    float64\nWeak Foot                   float64\nSkill Moves                 float64\nWork Rate                    object\nBody Type                    object\nReal Face                    object\nPosition                     object\nJoined                       object\nLoaned From                  object\nContract Valid Until         object\nHeight                       object\nWeight                       object\nRelease Clause               object\nKit Number                  float64\nBest Overall Rating          object\ndtype: object\n\n\n- s.dtype\n\ndf.Name.dtype\n\ndtype('O')\n\n\n- ==를 이용한 자료형 체크\n\ndf.Name.dtype == object\ndf.Name.dtype == np.object_\n\nTrue\n\n\n\ndf.Age.dtype == int\ndf.Age.dtype == np.int64\n\nTrue\n\n\n\ndf['International Reputation'].dtype == float\ndf['International Reputation'].dtype == np.float64\n\nTrue\n\n\n# 예제1: df에서 int 자료형만 출력\n- (풀이1)\n\ndf.loc[:,[l == int for l in df.dtypes]]\ndf.loc[:,[l == np.int64 for l in df.dtypes]]\n\n\n\n\n\n\n\n\nID\nAge\nOverall\nPotential\nSpecial\n\n\n\n\n0\n209658\n27\n87\n88\n2312\n\n\n1\n212198\n27\n86\n87\n2305\n\n\n2\n224334\n30\n85\n85\n2303\n\n\n3\n192985\n31\n91\n91\n2303\n\n\n4\n224232\n25\n86\n89\n2296\n\n\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\n19\n48\n61\n762\n\n\n17656\n267946\n17\n48\n64\n761\n\n\n17657\n270567\n25\n51\n56\n759\n\n\n17658\n256624\n18\n50\n65\n758\n\n\n17659\n256376\n20\n50\n61\n749\n\n\n\n\n17660 rows × 5 columns\n\n\n\n- (풀이2)\n\ndf.select_dtypes(int)\ndf.select_dtypes(np.int64)\ndf.select_dtypes([int])\ndf.select_dtypes([np.int64])\n\n\n\n\n\n\n\n\nID\nAge\nOverall\nPotential\nSpecial\n\n\n\n\n0\n209658\n27\n87\n88\n2312\n\n\n1\n212198\n27\n86\n87\n2305\n\n\n2\n224334\n30\n85\n85\n2303\n\n\n3\n192985\n31\n91\n91\n2303\n\n\n4\n224232\n25\n86\n89\n2296\n\n\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\n19\n48\n61\n762\n\n\n17656\n267946\n17\n48\n64\n761\n\n\n17657\n270567\n25\n51\n56\n759\n\n\n17658\n256624\n18\n50\n65\n758\n\n\n17659\n256376\n20\n50\n61\n749\n\n\n\n\n17660 rows × 5 columns\n\n\n\n#\n# 예제2: df에서 int, float 자료형만 출력 – select_dtypes() 이용\n\ndf.select_dtypes([int,float])\ndf.select_dtypes([np.int64,np.float64])\ndf.select_dtypes('number')\ndf.select_dtypes(['number'])\n\n\n\n\n\n\n\n\nID\nAge\nOverall\nPotential\nSpecial\nInternational Reputation\nWeak Foot\nSkill Moves\nKit Number\n\n\n\n\n0\n209658\n27\n87\n88\n2312\n4.0\n4.0\n3.0\n8.0\n\n\n1\n212198\n27\n86\n87\n2305\n3.0\n3.0\n4.0\n8.0\n\n\n2\n224334\n30\n85\n85\n2303\n2.0\n3.0\n3.0\n19.0\n\n\n3\n192985\n31\n91\n91\n2303\n4.0\n5.0\n4.0\n17.0\n\n\n4\n224232\n25\n86\n89\n2296\n3.0\n3.0\n3.0\n23.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\n19\n48\n61\n762\n1.0\n3.0\n1.0\n35.0\n\n\n17656\n267946\n17\n48\n64\n761\n1.0\n2.0\n1.0\n21.0\n\n\n17657\n270567\n25\n51\n56\n759\n1.0\n2.0\n1.0\n12.0\n\n\n17658\n256624\n18\n50\n65\n758\n1.0\n2.0\n1.0\n40.0\n\n\n17659\n256376\n20\n50\n61\n749\n1.0\n2.0\n1.0\n30.0\n\n\n\n\n17660 rows × 9 columns\n\n\n\n#\n# 예제3: df에서 object 자료형만 출력 – select_dtypes() 이용\n\ndf.select_dtypes(object)\ndf.select_dtypes([object])\n\n\n\n\n\n\n\n\nName\nPhoto\nNationality\nFlag\nClub\nClub Logo\nValue\nWage\nPreferred Foot\nWork Rate\nBody Type\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nBest Overall Rating\n\n\n\n\n0\nL. Goretzka\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n€91M\n€115K\nRight\nHigh/ Medium\nUnique\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\nNaN\n\n\n1\nBruno Fernandes\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n€78.5M\n€190K\nRight\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\nNaN\n\n\n2\nM. Acuña\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n€46.5M\n€46K\nLeft\nHigh/ High\nStocky (170-185)\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\nNaN\n\n\n3\nK. De Bruyne\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n€107.5M\n€350K\nRight\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\nNaN\n\n\n4\nN. Barella\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n€89.5M\n€110K\nRight\nHigh/ High\nNormal (170-)\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\nDeng Xiongtao\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n€100K\n€500\nRight\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\nNaN\n\n\n17656\n22 Lim Jun Sub\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n€100K\n€500\nRight\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\nNaN\n\n\n17657\nA. Demir\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n€70K\n€2K\nRight\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\nNaN\n\n\n17658\n21 S. Czajor\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n€90K\n€500\nRight\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\nNaN\n\n\n17659\n21 F. Jakobsson\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n€90K\n€500\nLeft\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\nNaN\n\n\n\n\n17660 rows × 20 columns\n\n\n\n#"
  },
  {
    "objectID": "posts/10wk-2.html#e.-df.sort_values",
    "href": "posts/10wk-2.html#e.-df.sort_values",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "E. df.sort_values()",
    "text": "E. df.sort_values()\n- 예시1: 나이가 어린 순서대로 정렬\n\ndf.sort_values(by='Age')\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n17636\n263636\n22 D. Oncescu\n15\nhttps://cdn.sofifa.net/players/263/636/22_60.png\nRomania\nhttps://cdn.sofifa.net/flags/ro.png\n50\n72\nFC Dinamo 1948 Bucureşti\nhttps://cdn.sofifa.net/teams/100757/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 1, 2021\nNaN\n2025\n190cm\n77kg\n€306K\n34.0\nNaN\n\n\n13712\n271072\nE. Topcu\n16\nhttps://cdn.sofifa.net/players/271/072/23_60.png\nRepublic of Ireland\nhttps://cdn.sofifa.net/flags/ie.png\n48\n58\nDrogheda United\nhttps://cdn.sofifa.net/teams/1572/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 8, 2022\nNaN\n2022\n183cm\n65kg\n€175K\n20.0\nNaN\n\n\n13078\n259442\n22 R. van den Berg\n16\nhttps://cdn.sofifa.net/players/259/442/22_60.png\nNetherlands\nhttps://cdn.sofifa.net/flags/nl.png\n60\n81\nPEC Zwolle\nhttps://cdn.sofifa.net/teams/1914/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nMay 24, 2020\nNaN\n2024\n190cm\n73kg\n€1.8M\n33.0\nNaN\n\n\n11257\n266205\n22 Y. Koré\n16\nhttps://cdn.sofifa.net/players/266/205/22_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n59\n74\nParis FC\nhttps://cdn.sofifa.net/teams/111817/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nAug 11, 2022\nNaN\n2025\n187cm\n75kg\n€1.1M\n34.0\nNaN\n\n\n11278\n261873\n21 H. Kumagai\n16\nhttps://cdn.sofifa.net/players/261/873/21_60.png\nJapan\nhttps://cdn.sofifa.net/flags/jp.png\n52\n70\nVegalta Sendai\nhttps://cdn.sofifa.net/teams/112836/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 16, 2021\nNaN\n2023\n174cm\n64kg\n€375K\n48.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16311\n254196\n21 L. Fernández\n42\nhttps://cdn.sofifa.net/players/254/196/21_60.png\nColombia\nhttps://cdn.sofifa.net/flags/co.png\n61\n61\nSociedad Deportiva Aucas\nhttps://cdn.sofifa.net/teams/110987/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nJan 29, 2018\nNaN\n2024\n187cm\n82kg\n€75K\n1.0\nNaN\n\n\n16036\n216692\nS. Torrico\n42\nhttps://cdn.sofifa.net/players/216/692/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n72\n72\nSan Lorenzo de Almagro\nhttps://cdn.sofifa.net/teams/1013/30.png\n...\nNo\n&lt;span class=\"pos pos0\"&gt;GK\nApr 25, 2013\nNaN\n2022\n183cm\n84kg\n€375K\n12.0\nNaN\n\n\n17257\n645\n17 D. Andersson\n43\nhttps://cdn.sofifa.net/players/000/645/17_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n57\n57\nHelsingborgs IF\nhttps://cdn.sofifa.net/teams/432/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nApr 21, 2016\nNaN\n2022\n187cm\n85kg\nNaN\n39.0\nNaN\n\n\n15375\n1179\nG. Buffon\n44\nhttps://cdn.sofifa.net/players/001/179/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n79\n79\nParma\nhttps://cdn.sofifa.net/teams/50/30.png\n...\nYes\n&lt;span class=\"pos pos0\"&gt;GK\nJul 1, 2021\nNaN\n2024\n192cm\n92kg\n€3M\n1.0\nNaN\n\n\n15272\n254704\n22 K. Miura\n54\nhttps://cdn.sofifa.net/players/254/704/22_60.png\nJapan\nhttps://cdn.sofifa.net/flags/jp.png\n56\n56\nYokohama FC\nhttps://cdn.sofifa.net/teams/113197/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2005\nNaN\n2022\n177cm\n72kg\nNaN\n11.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n- 예시2: 나이가 많은 순서대로 정렬\n\ndf.sort_values(by='Age',ascending=False)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n15272\n254704\n22 K. Miura\n54\nhttps://cdn.sofifa.net/players/254/704/22_60.png\nJapan\nhttps://cdn.sofifa.net/flags/jp.png\n56\n56\nYokohama FC\nhttps://cdn.sofifa.net/teams/113197/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2005\nNaN\n2022\n177cm\n72kg\nNaN\n11.0\nNaN\n\n\n15375\n1179\nG. Buffon\n44\nhttps://cdn.sofifa.net/players/001/179/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n79\n79\nParma\nhttps://cdn.sofifa.net/teams/50/30.png\n...\nYes\n&lt;span class=\"pos pos0\"&gt;GK\nJul 1, 2021\nNaN\n2024\n192cm\n92kg\n€3M\n1.0\nNaN\n\n\n17257\n645\n17 D. Andersson\n43\nhttps://cdn.sofifa.net/players/000/645/17_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n57\n57\nHelsingborgs IF\nhttps://cdn.sofifa.net/teams/432/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nApr 21, 2016\nNaN\n2022\n187cm\n85kg\nNaN\n39.0\nNaN\n\n\n16036\n216692\nS. Torrico\n42\nhttps://cdn.sofifa.net/players/216/692/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n72\n72\nSan Lorenzo de Almagro\nhttps://cdn.sofifa.net/teams/1013/30.png\n...\nNo\n&lt;span class=\"pos pos0\"&gt;GK\nApr 25, 2013\nNaN\n2022\n183cm\n84kg\n€375K\n12.0\nNaN\n\n\n16311\n254196\n21 L. Fernández\n42\nhttps://cdn.sofifa.net/players/254/196/21_60.png\nColombia\nhttps://cdn.sofifa.net/flags/co.png\n61\n61\nSociedad Deportiva Aucas\nhttps://cdn.sofifa.net/teams/110987/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nJan 29, 2018\nNaN\n2024\n187cm\n82kg\n€75K\n1.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17360\n261023\n21 H. Broun\n16\nhttps://cdn.sofifa.net/players/261/023/21_60.png\nScotland\nhttps://cdn.sofifa.net/flags/gb-sct.png\n52\n72\nKilmarnock\nhttps://cdn.sofifa.net/teams/82/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nSep 17, 2020\nNaN\n2022\n182cm\n70kg\n€523K\n40.0\nNaN\n\n\n15536\n263639\n22 M. Pavel\n16\nhttps://cdn.sofifa.net/players/263/639/22_60.png\nRomania\nhttps://cdn.sofifa.net/flags/ro.png\n51\n69\nFC Dinamo 1948 Bucureşti\nhttps://cdn.sofifa.net/teams/100757/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2021\nNaN\n2023\n178cm\n66kg\n€277K\n77.0\nNaN\n\n\n11398\n256405\n21 W. Essanoussi\n16\nhttps://cdn.sofifa.net/players/256/405/21_60.png\nNetherlands\nhttps://cdn.sofifa.net/flags/nl.png\n59\n75\nVVV-Venlo\nhttps://cdn.sofifa.net/teams/100651/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2019\nNaN\n2022\n178cm\n70kg\n€1.1M\n24.0\nNaN\n\n\n15030\n270594\nT. Walczak\n16\nhttps://cdn.sofifa.net/players/270/594/23_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n54\n68\nWisła Płock\nhttps://cdn.sofifa.net/teams/1569/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nSep 7, 2021\nNaN\n2023\n191cm\n88kg\n€494K\n99.0\nNaN\n\n\n17636\n263636\n22 D. Oncescu\n15\nhttps://cdn.sofifa.net/players/263/636/22_60.png\nRomania\nhttps://cdn.sofifa.net/flags/ro.png\n50\n72\nFC Dinamo 1948 Bucureşti\nhttps://cdn.sofifa.net/teams/100757/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 1, 2021\nNaN\n2025\n190cm\n77kg\n€306K\n34.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n- 예시3: 능력치가 좋은 순서대로 정렬\n\ndf.sort_values(by='Overall',ascending=False)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n41\n188545\nR. Lewandowski\n33\nhttps://cdn.sofifa.net/players/188/545/23_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n91\n91\nFC Barcelona\nhttps://cdn.sofifa.net/teams/241/30.png\n...\nYes\n&lt;span class=\"pos pos25\"&gt;ST\nJul 18, 2022\nNaN\n2025\n185cm\n81kg\n€172.2M\n9.0\nNaN\n\n\n124\n165153\nK. Benzema\n34\nhttps://cdn.sofifa.net/players/165/153/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n91\n91\nReal Madrid CF\nhttps://cdn.sofifa.net/teams/243/30.png\n...\nYes\n&lt;span class=\"pos pos21\"&gt;CF\nJul 9, 2009\nNaN\n2023\n185cm\n81kg\n€131.2M\n9.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n56\n158023\nL. Messi\n35\nhttps://cdn.sofifa.net/players/158/023/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n91\n91\nParis Saint-Germain\nhttps://cdn.sofifa.net/teams/73/30.png\n...\nYes\n&lt;span class=\"pos pos23\"&gt;RW\nAug 10, 2021\nNaN\n2023\n169cm\n67kg\n€99.9M\n30.0\nNaN\n\n\n75\n231747\nK. Mbappé\n23\nhttps://cdn.sofifa.net/players/231/747/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n91\n95\nParis Saint-Germain\nhttps://cdn.sofifa.net/teams/73/30.png\n...\nYes\n&lt;span class=\"pos pos25\"&gt;ST\nJul 1, 2018\nNaN\n2025\n182cm\n73kg\n€366.7M\n7.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n15513\n266751\n22 Jung Ho Yeon\n20\nhttps://cdn.sofifa.net/players/266/751/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n45\n53\nGwangJu FC\nhttps://cdn.sofifa.net/teams/112258/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 20, 2022\nNaN\n2026\n180cm\n73kg\n€145K\n23.0\nNaN\n\n\n16215\n268279\n22 J. Looschen\n24\nhttps://cdn.sofifa.net/players/268/279/22_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n44\n47\nSV Meppen\nhttps://cdn.sofifa.net/teams/110597/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nMar 19, 2022\nNaN\n2026\n178cm\n78kg\n€92K\n42.0\nNaN\n\n\n16042\n255283\n20 Kim Yeong Geun\n22\nhttps://cdn.sofifa.net/players/255/283/20_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n44\n49\nGyeongnam FC\nhttps://cdn.sofifa.net/teams/111588/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 9, 2020\nNaN\n2020\n174cm\n71kg\n€53K\n43.0\nNaN\n\n\n14634\n269038\n22 Zhang Wenxuan\n16\nhttps://cdn.sofifa.net/players/269/038/22_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n44\n59\nGuangzhou FC\nhttps://cdn.sofifa.net/teams/111839/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nMay 1, 2022\nNaN\n2022\n175cm\n70kg\n€239K\n29.0\nNaN\n\n\n17618\n168933\n07 I. Paskov\n33\nhttps://cdn.sofifa.net/players/168/933/07_60.png\nBulgaria\nhttps://cdn.sofifa.net/flags/bg.png\n43\n42\nNaN\nhttps://cdn.sofifa.net/flags/bg.png\n...\nNaN\n&lt;span class=\"pos pos28\"&gt;SUB\nNaN\nNaN\nNaN\n184cm\n79kg\nNaN\n24.0\nNaN\n\n\n\n\n17660 rows × 29 columns"
  },
  {
    "objectID": "posts/10wk-2.html#f.-df.info",
    "href": "posts/10wk-2.html#f.-df.info",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "F. df.info()",
    "text": "F. df.info()\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 17660 entries, 0 to 17659\nData columns (total 29 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   ID                        17660 non-null  int64  \n 1   Name                      17660 non-null  object \n 2   Age                       17660 non-null  int64  \n 3   Photo                     17660 non-null  object \n 4   Nationality               17660 non-null  object \n 5   Flag                      17660 non-null  object \n 6   Overall                   17660 non-null  int64  \n 7   Potential                 17660 non-null  int64  \n 8   Club                      17449 non-null  object \n 9   Club Logo                 17660 non-null  object \n 10  Value                     17660 non-null  object \n 11  Wage                      17660 non-null  object \n 12  Special                   17660 non-null  int64  \n 13  Preferred Foot            17660 non-null  object \n 14  International Reputation  17660 non-null  float64\n 15  Weak Foot                 17660 non-null  float64\n 16  Skill Moves               17660 non-null  float64\n 17  Work Rate                 17660 non-null  object \n 18  Body Type                 17622 non-null  object \n 19  Real Face                 17622 non-null  object \n 20  Position                  17625 non-null  object \n 21  Joined                    16562 non-null  object \n 22  Loaned From               694 non-null    object \n 23  Contract Valid Until      17299 non-null  object \n 24  Height                    17660 non-null  object \n 25  Weight                    17660 non-null  object \n 26  Release Clause            16509 non-null  object \n 27  Kit Number                17625 non-null  float64\n 28  Best Overall Rating       21 non-null     object \ndtypes: float64(4), int64(5), object(20)\nmemory usage: 3.9+ MB"
  },
  {
    "objectID": "posts/10wk-2.html#a.-기본-query",
    "href": "posts/10wk-2.html#a.-기본-query",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. 기본 query",
    "text": "A. 기본 query\n- 예시1: A&gt;0 and B&lt;0\n\n#ts[(ts.A&gt;0) & (ts.B&lt;0)]\nts.query('A&gt;0 and B&lt;0')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2022-12-30\n0.210974\n-0.691147\n-0.484299\n0.265967\nM\n\n\n2022-12-31\n1.062767\n-0.958027\n-0.128911\n-0.156103\nM\n\n\n2023-01-11\n1.033974\n-0.098040\n-1.367873\n-0.777833\nF\n\n\n\n\n\n\n\n- 예시2: A&lt;B&lt;C\n\nts.query('A&lt;B&lt;C')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2023-01-07\n-0.795211\n0.749976\n1.882239\n-0.847576\nF\n\n\n2023-01-08\n-0.326690\n-0.265898\n0.398331\n0.198163\nF\n\n\n2023-01-09\n-0.770815\n-0.143819\n0.095757\n-0.716950\nF\n\n\n2023-01-13\n-0.789317\n-0.179441\n0.615646\n-0.110530\nF\n\n\n\n\n\n\n\n- 예시3: (A+B)/2 &gt; 0\n\n#ts[(ts.A + ts.B)/2 &gt;0]\nts.query('(A+B)/2 &gt;0')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2022-12-26\n0.913373\n1.273686\n-1.031498\n0.107483\nM\n\n\n2022-12-28\n0.044797\n0.013809\n-0.780978\n0.288263\nM\n\n\n2022-12-29\n0.584282\n1.763700\n0.943253\n0.153924\nM\n\n\n2022-12-31\n1.062767\n-0.958027\n-0.128911\n-0.156103\nM\n\n\n2023-01-01\n1.358383\n0.972339\n-0.888977\n-1.260350\nM\n\n\n2023-01-06\n-0.949612\n1.078584\n0.079759\n0.897018\nF\n\n\n2023-01-10\n-0.519762\n0.619891\n0.317133\n-0.728839\nF\n\n\n2023-01-11\n1.033974\n-0.098040\n-1.367873\n-0.777833\nF\n\n\n2023-01-12\n0.351120\n0.137920\n-1.809062\n0.470261\nF\n\n\n2023-01-14\n0.183356\n0.362680\n0.318493\n-1.005962\nF\n\n\n\n\n\n\n\n- 예시4: (A+B)/2 &gt; 0 and Sex=='M'\n\nts.query('(A+B)/2&gt;0 and Sex==\"M\"')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2022-12-26\n0.913373\n1.273686\n-1.031498\n0.107483\nM\n\n\n2022-12-28\n0.044797\n0.013809\n-0.780978\n0.288263\nM\n\n\n2022-12-29\n0.584282\n1.763700\n0.943253\n0.153924\nM\n\n\n2022-12-31\n1.062767\n-0.958027\n-0.128911\n-0.156103\nM\n\n\n2023-01-01\n1.358383\n0.972339\n-0.888977\n-1.260350\nM\n\n\n\n\n\n\n\n\nts.query(\"(A+B)/2&gt;0 and Sex=='F'\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2023-01-06\n-0.949612\n1.078584\n0.079759\n0.897018\nF\n\n\n2023-01-10\n-0.519762\n0.619891\n0.317133\n-0.728839\nF\n\n\n2023-01-11\n1.033974\n-0.098040\n-1.367873\n-0.777833\nF\n\n\n2023-01-12\n0.351120\n0.137920\n-1.809062\n0.470261\nF\n\n\n2023-01-14\n0.183356\n0.362680\n0.318493\n-1.005962\nF"
  },
  {
    "objectID": "posts/10wk-2.html#b.-외부변수를-이용",
    "href": "posts/10wk-2.html#b.-외부변수를-이용",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. 외부변수를 이용",
    "text": "B. 외부변수를 이용\n- 예시: A &gt; mean(A)\n(풀이1)\n\nts[ts.A &gt; -0.0734821041290727]\nts.query('A &gt; A.mean()')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2022-12-26\n0.913373\n1.273686\n-1.031498\n0.107483\nM\n\n\n2022-12-28\n0.044797\n0.013809\n-0.780978\n0.288263\nM\n\n\n2022-12-29\n0.584282\n1.763700\n0.943253\n0.153924\nM\n\n\n2022-12-30\n0.210974\n-0.691147\n-0.484299\n0.265967\nM\n\n\n2022-12-31\n1.062767\n-0.958027\n-0.128911\n-0.156103\nM\n\n\n2023-01-01\n1.358383\n0.972339\n-0.888977\n-1.260350\nM\n\n\n2023-01-11\n1.033974\n-0.098040\n-1.367873\n-0.777833\nF\n\n\n2023-01-12\n0.351120\n0.137920\n-1.809062\n0.470261\nF\n\n\n2023-01-14\n0.183356\n0.362680\n0.318493\n-1.005962\nF\n\n\n\n\n\n\n\n(풀이2)\n\nm = ts.A.mean()\nts[ts.A&gt;m]\nts.query('A &gt; @m')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2022-12-26\n0.913373\n1.273686\n-1.031498\n0.107483\nM\n\n\n2022-12-28\n0.044797\n0.013809\n-0.780978\n0.288263\nM\n\n\n2022-12-29\n0.584282\n1.763700\n0.943253\n0.153924\nM\n\n\n2022-12-30\n0.210974\n-0.691147\n-0.484299\n0.265967\nM\n\n\n2022-12-31\n1.062767\n-0.958027\n-0.128911\n-0.156103\nM\n\n\n2023-01-01\n1.358383\n0.972339\n-0.888977\n-1.260350\nM\n\n\n2023-01-11\n1.033974\n-0.098040\n-1.367873\n-0.777833\nF\n\n\n2023-01-12\n0.351120\n0.137920\n-1.809062\n0.470261\nF\n\n\n2023-01-14\n0.183356\n0.362680\n0.318493\n-1.005962\nF"
  },
  {
    "objectID": "posts/10wk-2.html#c.-index로-query",
    "href": "posts/10wk-2.html#c.-index로-query",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "C. Index로 query",
    "text": "C. Index로 query\n- 예시: (2022년 12월30일 보다 이전 날짜) \\(\\cup\\) (2023년 1월10일)\n\nts.query('index &lt; \"2022-12-30\" or index == \"2023-01-10\"')\n\n/tmp/ipykernel_642677/2579726232.py:1: FutureWarning: The behavior of 'isin' with dtype=datetime64[ns] and castable values (e.g. strings) is deprecated. In a future version, these will not be considered matching by isin. Explicitly cast to the appropriate dtype before calling isin instead.\n  ts.query('index &lt; \"2022-12-30\" or index == \"2023-01-10\"')\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nSex\n\n\n\n\n2022-12-26\n0.913373\n1.273686\n-1.031498\n0.107483\nM\n\n\n2022-12-27\n-0.231464\n-2.486921\n-2.037792\n0.455930\nM\n\n\n2022-12-28\n0.044797\n0.013809\n-0.780978\n0.288263\nM\n\n\n2022-12-29\n0.584282\n1.763700\n0.943253\n0.153924\nM\n\n\n2023-01-10\n-0.519762\n0.619891\n0.317133\n-0.728839\nF"
  },
  {
    "objectID": "posts/10wk-2.html#d.-열의-이름에-공백이-있을-경우",
    "href": "posts/10wk-2.html#d.-열의-이름에-공백이-있을-경우",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "D. 열의 이름에 공백이 있을 경우",
    "text": "D. 열의 이름에 공백이 있을 경우\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n- 예시: Skill Moves &gt; 4\n\ndf.query('`Skill Moves` &gt; 4').head(5)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n19\n193082\nJ. Cuadrado\n34\nhttps://cdn.sofifa.net/players/193/082/23_60.png\nColombia\nhttps://cdn.sofifa.net/flags/co.png\n83\n83\nJuventus\nhttps://cdn.sofifa.net/teams/45/30.png\n...\nYes\n&lt;span class=\"pos pos3\"&gt;RB\nJul 1, 2017\nNaN\n2023\n179cm\n72kg\n€23M\n11.0\nNaN\n\n\n27\n189509\nThiago\n31\nhttps://cdn.sofifa.net/players/189/509/23_60.png\nSpain\nhttps://cdn.sofifa.net/flags/es.png\n86\n86\nLiverpool\nhttps://cdn.sofifa.net/teams/9/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nSep 18, 2020\nNaN\n2024\n174cm\n70kg\n€102.7M\n6.0\nNaN\n\n\n44\n232411\nC. Nkunku\n24\nhttps://cdn.sofifa.net/players/232/411/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n86\n89\nRB Leipzig\nhttps://cdn.sofifa.net/teams/112172/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nNaN\nNaN\nNaN\n175cm\n73kg\n€166.9M\n12.0\nNaN\n\n\n62\n233927\nLucas Paquetá\n24\nhttps://cdn.sofifa.net/players/233/927/23_60.png\nBrazil\nhttps://cdn.sofifa.net/flags/br.png\n82\n87\nOlympique Lyonnais\nhttps://cdn.sofifa.net/teams/66/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nOct 1, 2020\nNaN\n2025\n180cm\n72kg\n€90.9M\n10.0\nNaN\n\n\n75\n231747\nK. Mbappé\n23\nhttps://cdn.sofifa.net/players/231/747/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n91\n95\nParis Saint-Germain\nhttps://cdn.sofifa.net/teams/73/30.png\n...\nYes\n&lt;span class=\"pos pos25\"&gt;ST\nJul 1, 2018\nNaN\n2025\n182cm\n73kg\n€366.7M\n7.0\nNaN\n\n\n\n\n5 rows × 29 columns"
  },
  {
    "objectID": "posts/10wk-2.html#a.-df.assign",
    "href": "posts/10wk-2.html#a.-df.assign",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. df.assign()",
    "text": "A. df.assign()\n- 예시: total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35 를 계산하여 할당\n\ndf.assign(total = df.att*0.1 + df.rep*0.2 + df.mid*0.35 + df.fin*0.35)\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ntotal\n\n\n\n\n0\n65\n55\n50\n40\n49.00\n\n\n1\n95\n100\n50\n80\n75.00\n\n\n2\n65\n90\n60\n30\n56.00\n\n\n3\n55\n80\n75\n80\n75.75\n\n\n4\n80\n30\n30\n100\n59.50\n\n\n5\n75\n40\n100\n15\n55.75\n\n\n6\n65\n45\n45\n90\n62.75\n\n\n7\n60\n60\n25\n0\n26.75\n\n\n8\n95\n65\n20\n10\n33.00\n\n\n9\n90\n80\n80\n20\n60.00\n\n\n10\n55\n75\n35\n25\n41.50\n\n\n11\n95\n95\n45\n0\n44.25\n\n\n12\n95\n55\n15\n35\n38.00\n\n\n13\n50\n80\n40\n30\n45.50\n\n\n14\n50\n55\n15\n85\n51.00\n\n\n15\n95\n30\n30\n95\n59.25\n\n\n16\n50\n50\n45\n10\n34.25\n\n\n17\n65\n55\n15\n45\n38.50\n\n\n18\n70\n70\n40\n35\n47.25\n\n\n19\n90\n90\n80\n90\n86.50\n\n\n\n\n\n\n\n\nNote: 이 방법은 df원본을 손상시키지 않음"
  },
  {
    "objectID": "posts/10wk-2.html#b.-df.eval",
    "href": "posts/10wk-2.html#b.-df.eval",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. df.eval()",
    "text": "B. df.eval()\n- 예시: total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35 를 계산하여 할당\n\ndf.eval(\"total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35\")\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ntotal\n\n\n\n\n0\n65\n55\n50\n40\n49.00\n\n\n1\n95\n100\n50\n80\n75.00\n\n\n2\n65\n90\n60\n30\n56.00\n\n\n3\n55\n80\n75\n80\n75.75\n\n\n4\n80\n30\n30\n100\n59.50\n\n\n5\n75\n40\n100\n15\n55.75\n\n\n6\n65\n45\n45\n90\n62.75\n\n\n7\n60\n60\n25\n0\n26.75\n\n\n8\n95\n65\n20\n10\n33.00\n\n\n9\n90\n80\n80\n20\n60.00\n\n\n10\n55\n75\n35\n25\n41.50\n\n\n11\n95\n95\n45\n0\n44.25\n\n\n12\n95\n55\n15\n35\n38.00\n\n\n13\n50\n80\n40\n30\n45.50\n\n\n14\n50\n55\n15\n85\n51.00\n\n\n15\n95\n30\n30\n95\n59.25\n\n\n16\n50\n50\n45\n10\n34.25\n\n\n17\n65\n55\n15\n45\n38.50\n\n\n18\n70\n70\n40\n35\n47.25\n\n\n19\n90\n90\n80\n90\n86.50\n\n\n\n\n\n\n\n\nNote: 이 방법은 df원본을 손상시키지 않음"
  },
  {
    "objectID": "posts/10wk-2.html#c.-dfcolname-xxx",
    "href": "posts/10wk-2.html#c.-dfcolname-xxx",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "C. df[colname] = xxx",
    "text": "C. df[colname] = xxx\n- 예시: total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35 를 계산하여 할당.\n\ndf['total'] = df.att*0.1 + df.rep*0.2 + df.mid*0.35 + df.fin*0.35\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ntotal\n\n\n\n\n0\n65\n55\n50\n40\n49.00\n\n\n1\n95\n100\n50\n80\n75.00\n\n\n2\n65\n90\n60\n30\n56.00\n\n\n3\n55\n80\n75\n80\n75.75\n\n\n4\n80\n30\n30\n100\n59.50\n\n\n5\n75\n40\n100\n15\n55.75\n\n\n6\n65\n45\n45\n90\n62.75\n\n\n7\n60\n60\n25\n0\n26.75\n\n\n8\n95\n65\n20\n10\n33.00\n\n\n9\n90\n80\n80\n20\n60.00\n\n\n10\n55\n75\n35\n25\n41.50\n\n\n11\n95\n95\n45\n0\n44.25\n\n\n12\n95\n55\n15\n35\n38.00\n\n\n13\n50\n80\n40\n30\n45.50\n\n\n14\n50\n55\n15\n85\n51.00\n\n\n15\n95\n30\n30\n95\n59.25\n\n\n16\n50\n50\n45\n10\n34.25\n\n\n17\n65\n55\n15\n45\n38.50\n\n\n18\n70\n70\n40\n35\n47.25\n\n\n19\n90\n90\n80\n90\n86.50\n\n\n\n\n\n\n\n\nNote: 이 방법은 df를 영구적으로 변화시킴"
  },
  {
    "objectID": "posts/10wk-2.html#a.-zip",
    "href": "posts/10wk-2.html#a.-zip",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. zip",
    "text": "A. zip\n- 예시1\n\nx = [11,22,33]\ny = [44,55,66]\nfor xi,yi in zip(x,y):\n    print(xi,yi)\n\n11 44\n22 55\n33 66\n\n\n- 예시2\n\ndf = pd.DataFrame({'year':[2022,2023,2022,2022,2019],'month':[12,10,8,2,1],'day':[31,22,31,28,15]})\ndf\n\n\n\n\n\n\n\n\nyear\nmonth\nday\n\n\n\n\n0\n2022\n12\n31\n\n\n1\n2023\n10\n22\n\n\n2\n2022\n8\n31\n\n\n3\n2022\n2\n28\n\n\n4\n2019\n1\n15\n\n\n\n\n\n\n\n\ndf.assign(ymd = [f\"{y}-{m}-{d}\" for y,m,d in zip(df.year, df.month, df.day)])\n\n\n\n\n\n\n\n\nyear\nmonth\nday\nymd\n\n\n\n\n0\n2022\n12\n31\n2022-12-31\n\n\n1\n2023\n10\n22\n2023-10-22\n\n\n2\n2022\n8\n31\n2022-8-31\n\n\n3\n2022\n2\n28\n2022-2-28\n\n\n4\n2019\n1\n15\n2019-1-15"
  },
  {
    "objectID": "posts/10wk-2.html#b.-enumerate",
    "href": "posts/10wk-2.html#b.-enumerate",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. enumerate",
    "text": "B. enumerate\n- 예시1\n\nx = [11,22,33]\nfor i,xi in enumerate(x):\n    print(i,xi)\n\n0 11\n1 22\n2 33\n\n\n- 예시2\n\nlst = np.random.choice(['사과','딸기','배'],100,replace=True).tolist()\nlst[:5]\n\n['배', '사과', '사과', '딸기', '딸기']\n\n\n\ndct = {l:i for i,l in enumerate(set(lst))}\ndct\n\n{'딸기': 0, '사과': 1, '배': 2}\n\n\n\n[dct[l] for l in lst][:5]\n\n[2, 1, 1, 0, 0]"
  },
  {
    "objectID": "posts/10wk-2.html#a.-함수",
    "href": "posts/10wk-2.html#a.-함수",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. 함수",
    "text": "A. 함수\n- 예시1: 함수내부 / 함수외부\n\nx = None \ny = None \n\n\ndef f(x):\n    y = x+1\n    return y \n\n\nf(1)\n\n2\n\n\n\nx,y\n\n(None, None)\n\n\n\n여기에서 x,y는 함수내부에서만 선언 및 계산되고 소멸한다. 즉 함수안에서 사용되는 코드는 마치 독립된 환경처럼 작동한다. 함수외부의 x,y는 함수내부의 x,y와 “기본적으로는” 상관이 없다.\n\n- 예시2: 함수내부 / 함수외부\n\nx = 1\ny = None \n\n\ndef f(x):\n    y = x+1\n    return y \n\n\nf(x)\n\n2\n\n\n\nx,y\n\n(1, None)\n\n\n\n여기에서 x는 함수외부에 선언되었고, 함수 외부에 선언된 x의 값이 함수 내부로 전달되었다. 전달된 값은 함수내부에서 x라는 이름으로 저장되었음.\n\n- 예시3: 함수내부 / 함수외부\n\nx = None \ny = None \n\n\ndef f(x):\n    y = x+1\n    return y \n\n\nz = 1\nf(z)\n\n2\n\n\n\nx,y\n\n(None, None)\n\n\n\n여기에서 z는 함수외부에 선언되었고, 함수 외부에 선언된 z의 값이 함수 내부로 전달되었음. 전달된 값은 함수내부에서 x라는 이름으로 저장되었음.\n\n- 예시4: 함수내부 / 함수외부\n\nx = 2\ny = 3\n\n\ndef f(x):\n    return x+y # 함수내부에서는 y를 정의한적이 없잖아? (뭘 x에 더하라는거야?) 혹시 함수 외부에 y가 정의되어있나? 찾아보니 y=3이있음. 이걸 가져다가 쓰자 \n\n\nf(10)\n\n13\n\n\n\nx,y\n\n(2, 3)\n\n\n\n여기에서 x=2,y=3는 함수외부에 선언되었음. 함수 내부에는 x=10 이 선언되었음. 함수내부에서 x+y를 계산하려고 했는데, y는 함수내부에 없음. 그런데 함수외부에는 y가 있네? 그럼 함수외부에 있는 y를 빌려옴!! (이건 엄청 위험한 코드임. 왜냐하면 y가 어디있는지 쉽게 찾을 수 없기 때문!)\n\n사실 이 코드에서 y와 같은 역할을 하는 변수를 “전역변수”라고 하는데, y가 전역변수를 의미할때는 보통 대문자를 사용한다.\n- 예시5: 전역변수를 사용하는 모범코드\n\nPI = 3.141592\n\n\ndef f(r):\n    return PI*(r**2)\n\n\ndef g(r): \n    return (4/3)*PI*(r**3)\n\n\nf(2),g(2)\n\n(12.566368, 33.510314666666666)\n\n\n- 예시6: 전역변수와 지역변수가 충돌한다면?\n\nx = 5\ny = 5\n\n\ndef f(x):\n    y = x+1 \n    return x**y\n\n\nf(2)\n\n8\n\n\n\nx,y\n\n(5, 5)\n\n\n\n이거 사실 예시1이랑 같은코드에요, 전역변수 개념이 너무 충격적이라서 갑자기 헷갈릴 뿐입니다."
  },
  {
    "objectID": "posts/10wk-2.html#b.-for-컴프리헨션",
    "href": "posts/10wk-2.html#b.-for-컴프리헨션",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. for / 컴프리헨션",
    "text": "B. for / 컴프리헨션\n- 예시1: for문과 함께 사용된 \\(i\\)\n\ni = None\nlst = None \n\n\ni, lst \n\n(None, None)\n\n\n\nlst = []\nfor i in range(5):\n    lst.append(i)\n\n\ni, lst\n\n(4, [0, 1, 2, 3, 4])\n\n\n- 예시2: 컴프리헨션과 사용된 \\(i\\)\n\ni = None\nlst = None \n\n\nlst = [i for i in range(5)]\n\n\ni, lst\n\n(None, [0, 1, 2, 3, 4])"
  },
  {
    "objectID": "posts/10wk-2.html#a.-통계학과의-진로",
    "href": "posts/10wk-2.html#a.-통계학과의-진로",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "A. 통계학과의 진로",
    "text": "A. 통계학과의 진로\n- 코딩과 상관 X\n\n시험을 통해 얻는 직업: 회계사, 공무원/공기업, …\n본인이 선택하는 직업: 가업, 학원선생님, 전과 이후 새 직업 탐색, … 1\n\n1 사실상 졸업을 위해서 수강하는 학생들- 코딩과 상관 O\n\n당장 코딩실력이 필요할 경우 (= 코딩테스트를 준비해야 하는 경우): IT기업 (네이버, 카카오, …), 빅데이터분석기업(LG-CNS, 삼성SDS, …), 기타대기업(삼성전자, 하이닉스, SKT, KT, …),\n당장 코딩실력이 필요하진 않지만 장기적으론 필요한 경우: 대학원진학, 금융권 (XX은행, XX증권, …), 병원(전북대병원등,…)\n\n- 시험을 통해 얻는 직업 vs 일반사기업입사 (혹은 대학원)\n\n사법고시공부 vs 좋은대학 느낌\n할 수 있다면 시험준비해서 좋은기업가면 좋음.\n그렇지 않다면 “공모전준비(캐글/데이콘경진대회경험등)”+“학점관리”+“영어공부”+“코딩테스트준비”+“학회활동”+“자격증대비” -&gt; 대학원 or 취업\n\n- 이 수업의 목적:\n1. 통계학과 상위과목 수강을 위한 실력쌓기: 기계학습활용, 기계학습, 딥러닝, 데이터마이닝 등.. 파이썬을 활용하는 모든 과목들\n2. 코딩 흡수력 향상: 남의 코드를 보고 흡수할 수 있느냐?\n\n'A'.isupper()\n\nTrue\n\n\n\n'A'.islower()\n\nFalse\n\n\n3. 코딩테스트에 대한 대비 X (스트레스만 줄 것임)"
  },
  {
    "objectID": "posts/10wk-2.html#b.-코딩테스트를-잘하면-좋은것",
    "href": "posts/10wk-2.html#b.-코딩테스트를-잘하면-좋은것",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "B. 코딩테스트를 잘하면 좋은것",
    "text": "B. 코딩테스트를 잘하면 좋은것\n- 삼성 청년 SW 아카데미 https://www.ssafy.com/ksp/jsp/swp/apply/swpApplyProcess.jsp\n\n전문화된 SW교육 제공\n교육지원금 지급 (매월 100만원)\n국내외 연구소 실습기회 부여\n이 자체가 엄청난 스펙..\n\n- 카카오 2024 채용연계형 겨울 인턴십 모집 https://www.kakaocorp.com/page/detail/10677\n\n인턴십 이후 전환 인터뷰를 통해 최종 정규직 전환 대상자가 확정\n전환 인터뷰에 통과하면 내년 3월부터 카카오 크루로 입사\n단, 학업 등의 이유로 부득이하게 내년 3월 입사가 어려운 경우 2024년 9월 이내 가능한 일자로 별도 조율할 예정\n학생들 입장에서는 유일한 입사기회 + 떨어져도 좋은 경험\n최근에 이런 형태로 뽑는 기업들 많음\n\n- 삼성 SW 역량테스트 https://swexpertacademy.com/main/capacityTest/main.do\n\n입사시험임 (파이썬 지원)\n지원: https://swexpertacademy.com/main/sst/intro.do\n기출문제: https://swexpertacademy.com/main/code/problem/problemList.do\n\n- 유용한사이트\n\n백준: https://www.acmicpc.net/workbook/view/1152\n프로그래머스: https://programmers.co.kr/\n\n- 학생들의 노력\n\nhttps://www.youtube.com/watch?v=saVwTNb1wzk\n코딩테스트 탈락후기"
  },
  {
    "objectID": "posts/10wk-2.html#c.-코딩테스트-잘보는-방법",
    "href": "posts/10wk-2.html#c.-코딩테스트-잘보는-방법",
    "title": "10wk-2: pandas, 반복문자투리, 변수의범위",
    "section": "C. 코딩테스트 잘보는 방법?",
    "text": "C. 코딩테스트 잘보는 방법?\n- 코딩테스트문제 = 구현문제 + 알고리즘문제\n\n알고리즘문제는 따로 공부해야함. (풀이 패턴이 있음, 퀴즈5-1~2)\n구현문제는 평소에 논리적 생각을 많이해야함 + 꼼꼼해야함 + 오류수정잘해야함(중간고사3)\n\n- 언어특화문법을 잘 이해해야함\n\n파이썬스러운 코딩 (퀴즈5-1, 퀴즈5-3)\n\n- 사용가능한 패키지를 잘 확인할 것: numpy, pandas 활용가능 유무\n- 계산 시간을 따질 것"
  },
  {
    "objectID": "posts/supp1.html#a.-line-라인플랏",
    "href": "posts/supp1.html#a.-line-라인플랏",
    "title": "supp-1: matplotlib",
    "section": "A. line – 라인플랏",
    "text": "A. line – 라인플랏\n- 예시1: 기본플랏\n\nplt.plot([1,2,3,2])\n\n\n\n\n\n\n\n\n- 예시2: 모양변경\n\nplt.plot([1,2,3,2],'--')\n\n\n\n\n\n\n\n\n- 예시3: 색상변경 (1)\n\nplt.plot([1,2,3,2],'r')\n\n\n\n\n\n\n\n\n- 예시4: 색상변경 (2)\n\nplt.plot([1,2,3,2],'b')\n\n\n\n\n\n\n\n\n- 예시5: 모양+색상변경\n\nplt.plot([1,2,3,2],'--r')\n\n\n\n\n\n\n\n\n- 예시6: 모양+색상변경의 순서변경 가능\n\nplt.plot([1,2,3,2],'r--')"
  },
  {
    "objectID": "posts/supp1.html#b.-matplotlib에서의-문자열",
    "href": "posts/supp1.html#b.-matplotlib에서의-문자열",
    "title": "supp-1: matplotlib",
    "section": "B. matplotlib에서의 문자열",
    "text": "B. matplotlib에서의 문자열\n- r--등의 옵션은 Markers + Line Styles + Colors 의 조합으로 표현가능\nref: https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html\n\n--r: 점선(dashed)스타일 + 빨간색\nr--: 빨간색 + 점선(dashed)스타일\n:k: 점선(dotted)스타일 + 검은색\nk:: 검은색 + 점선(dotted)스타일\n\n- 우선 Marker를 무시하면 Line Styles + Color로 표현가능한 조합은 \\(4\\times 8=32\\) 개\n\nLine StylesColorsMarkers\n\n\n\n\n\ncharacter\ndescription\n\n\n\n\n‘-’\nsolid line style\n\n\n‘–’\ndashed line style\n\n\n‘-.’\ndash-dot line style\n\n\n‘:’\ndotted line style\n\n\n\n\n\n\n\n\ncharacter\ncolor\n\n\n\n\n‘b’\nblue\n\n\n‘g’\ngreen\n\n\n‘r’\nred\n\n\n‘c’\ncyan\n\n\n‘m’\nmagenta\n\n\n‘y’\nyellow\n\n\n‘k’\nblack\n\n\n‘w’\nwhite\n\n\n\n\n\n\n\n\ncharacter\ndescription\n\n\n\n\n‘.’\npoint marker\n\n\n‘,’\npixel marker\n\n\n‘o’\ncircle marker\n\n\n‘v’\ntriangle_down marker\n\n\n‘^’\ntriangle_up marker\n\n\n‘&lt;’\ntriangle_left marker\n\n\n‘&gt;’\ntriangle_right marker\n\n\n‘1’\ntri_down marker\n\n\n‘2’\ntri_up marker\n\n\n‘3’\ntri_left marker\n\n\n‘4’\ntri_right marker\n\n\n‘8’\noctagon marker\n\n\n‘s’\nsquare marker\n\n\n‘p’\npentagon marker\n\n\n‘P’\nplus (filled) marker\n\n\n’*’\nstar marker\n\n\n‘h’\nhexagon1 marker\n\n\n‘H’\nhexagon2 marker\n\n\n‘+’\nplus marker\n\n\n‘x’\nx marker\n\n\n‘X’\nx (filled) marker\n\n\n‘D’\ndiamond marker\n\n\n‘d’\nthin_diamond marker\n\n\n‘|’\nvline marker\n\n\n’_’\nhline marker\n\n\n\n\n\n\n- 예시1\n\nplt.plot([1,2,4,3],'b-.')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,4,3],'k:')\n\n\n\n\n\n\n\n\n- 예시3: line style + color 조합으로 사용하든 color + line style 조합으로 사용하든 상관없음\n\nplt.plot([1,2,4,3],'-.b')\n\n\n\n\n\n\n\n\n\nplt.plot([1,2,4,3],':k')\n\n\n\n\n\n\n\n\n- 예시4: line style을 중복으로 사용하거나 color를 중복으로 쓸 수 는 없다.\n\nplt.plot([1,2,4,3],'br')\n\nValueError: 'br' is not a valid format string (two color symbols)\n\n\n\n\n\n\n\n\n\n- 예시5: 색이 사실 8개만 있는건 아니다.\nref: https://matplotlib.org/2.0.2/examples/color/named_colors.html\n\nplt.plot([1,2,4,3],color='lime')\n\n- 예시6: 색을 바꾸려면 hex코드를 넣는 방법이 젤 깔끔함\nref: https://htmlcolorcodes.com/\n\nplt.plot([1,2,4,3],color='#7E277E')\n\n- 예시7: 당연히 라인스타일도 4개만 있진 않음\nref: https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html\n\nplt.plot([1,2,4,3],linestyle=(0, (10, 1)))"
  },
  {
    "objectID": "posts/supp1.html#c.-marker-산점도",
    "href": "posts/supp1.html#c.-marker-산점도",
    "title": "supp-1: matplotlib",
    "section": "C. marker – 산점도",
    "text": "C. marker – 산점도\n- 예시1: o 마커사용\n\nplt.plot([1,2,4,3],'o')\n\n\n\n\n\n\n\n\n- 예시2: x 마커사용\n\nplt.plot([1,2,4,3],'x')\n\n\n\n\n\n\n\n\n- 예시3: o 마커사용 + 색상 red\n\nplt.plot([1,2,4,3],'or')\n\n\n\n\n\n\n\n\n- 예시3: d 마커사용 + 색상 blue\n\nplt.plot([1,2,4,3],'db')\n\n\n\n\n\n\n\n\n- 예시4: x 마커사용 + 색상 blue\n\nplt.plot([1,2,4,3],'bx')\n\n\n\n\n\n\n\n\n- 예시5: 마커와 라인스타일을 동시에 사용하면 dot-connected plot이 된다.\n\nplt.plot([1,2,4,3],'--o')\n\n\n\n\n\n\n\n\n- 예시6: dot-connected plot + 색상변경 (1)\n\nplt.plot([1,2,4,3],'--or')\n\n\n\n\n\n\n\n\n- 예시7: dot-connected plot + 색상변경 (2)\n\nplt.plot([1,2,4,3],'--o',color='lime')\n\n\n\n\n\n\n\n\n아래는 동작하지 않음을 주의하라.\n\nplt.plot([1,2,4,3],color='lime','--o')\n\nSyntaxError: positional argument follows keyword argument (4214878426.py, line 1)"
  },
  {
    "objectID": "posts/supp1.html#d.-겹쳐그리기",
    "href": "posts/supp1.html#d.-겹쳐그리기",
    "title": "supp-1: matplotlib",
    "section": "D. 겹쳐그리기",
    "text": "D. 겹쳐그리기\n- 예시1\n\nplt.plot([1,2,4,3])\nplt.plot([3,4,1,2],'--o')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,4,3],color='C1')\nplt.plot([3,4,1,2],'--o',color='C0')\n\n\n\n\n\n\n\n\n- 예시3\n\nx=np.linspace(0,1,100)\neps = np.random.randn(100)*0.2\ny= 2*x + eps \nplt.plot(x,y,'.')\nplt.plot(x,2*x,'--')"
  },
  {
    "objectID": "posts/supp1.html#a.-fig-의-이해",
    "href": "posts/supp1.html#a.-fig-의-이해",
    "title": "supp-1: matplotlib",
    "section": "A. fig 의 이해",
    "text": "A. fig 의 이해\n# 예비학습1 – 그림을 저장했다가 꺼내보고 싶다.\n- 그림을 그리고 저장하자.\n\nplt.plot([1,2,4,3])\nfig = plt.gcf()\n\n\n\n\n\n\n\n\n- 다른그림을 그려보자.\n\nplt.plot([1,2,4,3],'--o')\n\n\n\n\n\n\n\n\n- 저장한 그림은 언제든지 꺼내볼 수 있음\n\nfig\n\n\n\n\n\n\n\n\n#\n# 예비학습2 – fig 는 뭐야?\n\n#fig??\ntype(fig)\n\nmatplotlib.figure.Figure\n\n\n\nFigure라는 클래스에서 찍힌 인스턴스\n\n- 여러가지 값, 기능이 저장되어 있겠음.\n\nfig.axes\n\n[&lt;Axes: &gt;]\n\n\n\nax = fig.axes[0]\n\n\nyaxis= ax.yaxis\nxaxis= ax.xaxis\n\n\nlines = ax.get_lines()\nline = lines[0]\n\n- 계층구조: Figure \\(\\supset\\) [Axes,…] \\(\\supset\\) YAxis, XAxis, [Line2D,…]\n\ntype(fig)\n\nmatplotlib.figure.Figure\n\n\n1. .axes 로 Axes 를 끄집어냄\n\nax = fig.axes[0]\ntype(ax)\n\nmatplotlib.axes._axes.Axes\n\n\n2. .xaxis, .yaxis 로 Axis 를 끄집어냄\n\nyaxis = ax.yaxis\nxaxis = ax.xaxis\ntype(yaxis), type(xaxis)\n\n(matplotlib.axis.YAxis, matplotlib.axis.XAxis)\n\n\n3. .get_lines()로 Line2D를 끄집어냄\n\nlines = ax.get_lines()\nline=lines[0]\ntype(line)\n\nmatplotlib.lines.Line2D\n\n\n- 오브젝트내용 확인 (그닥 필요 없음)\n\nline.properties()['data']\n\n(array([0., 1., 2., 3.]), array([1, 2, 4, 3]))\n\n\n- matplotlib의 설명\nref: https://matplotlib.org/stable/gallery/showcase/anatomy.html#sphx-glr-gallery-showcase-anatomy-py"
  },
  {
    "objectID": "posts/supp1.html#b.-plt.plot-쓰지-않고-그림그리기",
    "href": "posts/supp1.html#b.-plt.plot-쓰지-않고-그림그리기",
    "title": "supp-1: matplotlib",
    "section": "B. plt.plot 쓰지 않고 그림그리기",
    "text": "B. plt.plot 쓰지 않고 그림그리기\n- 개념:\n\nFigure(fig): 도화지\nAxes(ax): 도화지에 존재하는 그림틀\nAxis, Lines: 그림틀 위에 올려지는 물체(object)\n\n- 목표: 아래와 똑같은 그림을 plt.plot()을 쓰지 않고 만든다.\n\nplt.plot([1,2,3,2],'--o')\n\n\n\n\n\n\n\n\n- 아래와 같이 하면 된다.\n\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.set_xlim([-0.15, 3.15])\nax.set_ylim([0.9, 3.1])\nline = mpl.lines.Line2D(\n    xdata=[0,1,2,3],\n    ydata=[1,2,3,2],\n    linestyle='--',\n    marker='o'\n)\nax.add_line(line)\nfig\n\n\n\n\n\n\n\n\n\nFigure\n\nfig = plt.Figure() \n\n\n클래스를 모른다면: plt.Figure()는 도화지를 만드는 함수라 생각할 수 있음\n클래스문법에 익숙하다면: 이 과정은 사실 클래스 -&gt; 인스턴스의 과정임 (plt라는 모듈안에 Figure라는 클래스가 있는데, 그 클래스에서 인스턴스를 만드는 과정임)\n\n\nfig\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\n아직은 아무것도 없음\n\n\n\nAxes\n\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\n\n\nfig.add_axes는 fig에 소속된 함수이며, 도화지에서 그림틀을 ‘추가하는’ 함수이다.\n\n\nfig\n\n\n\n\n\n\n\n\n\n이제 fig라는 이름의 도화지에는 추가된 그림틀이 보인다.\n\n\n\nAxes 조정\n\nax.set_xlim([-0.15, 3.15])\nax.set_ylim([0.9, 3.1])\n\n(0.9, 3.1)\n\n\n\nfig\n\n\n\n\n\n\n\n\n\n\nLines\n\nline = mpl.lines.Line2D(\n    xdata=[0,1,2,3], \n    ydata=[1,2,3,2], \n    linestyle='--', \n    marker='o'\n)\n\n\nax.add_line(line)\n\n\nfig\n\n\n\n\n\n\n\n\n\nfig\n\n\n\n\n\n\n\n\n\n\n다른방법들\n- 조금 다른 방법: Line2d 오브젝트를 쓰지 않는 방법\n\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n- 조금 다른 방법 (2): add_axes()를 쓰지 않는 방법\n\nfig = plt.Figure()\nax = fig.subplots(1)\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n- 좀 더 다른 방법 (3)\n\nfig, ax = plt.subplots(1)\nax.plot([1,2,3,2],'--o')"
  },
  {
    "objectID": "posts/supp1.html#c.-정리-starstarstar",
    "href": "posts/supp1.html#c.-정리-starstarstar",
    "title": "supp-1: matplotlib",
    "section": "C. 정리 (\\(\\star\\star\\star\\))",
    "text": "C. 정리 (\\(\\star\\star\\star\\))\n- 결국 아래는 모두 같은 코드이다.\n\n## 코드1 \nplt.plot([1,2,3,2],'--o')\n\n\n\n\n\n\n\n\n\n## 코드2\nfig,ax = plt.subplots()\nax.plot([1,2,3,2],'--o')\n\n\n\n\n\n\n\n\n\n## 코드3\nfig = plt.Figure()\nax = fig.subplots()\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n\n## 코드4\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n\n## 코드5\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.set_xlim([-0.15, 3.15])\nax.set_ylim([0.9, 3.1])\nline = mpl.lines.Line2D(\n    xdata=[0,1,2,3], \n    ydata=[1,2,3,2], \n    linestyle='--', \n    marker='o'\n)\nax.add_line(line)\nfig"
  },
  {
    "objectID": "posts/supp1.html#d.-미니맵",
    "href": "posts/supp1.html#d.-미니맵",
    "title": "supp-1: matplotlib",
    "section": "D. 미니맵",
    "text": "D. 미니맵\n- 틀잡기\n\nfig = plt.Figure()\nax = fig.add_axes([0,0,2,2])\nax_mini = fig.add_axes([1.4,0.2,0.5,0.5])\nfig\n\n\n\n\n\n\n\n\n\nax.plot([1,5,3,4],'--o')\nax_mini.plot([1,2,3,1],'--or')\nfig"
  },
  {
    "objectID": "posts/supp1.html#a.-plt.subplots",
    "href": "posts/supp1.html#a.-plt.subplots",
    "title": "supp-1: matplotlib",
    "section": "A. plt.subplots",
    "text": "A. plt.subplots\n- 예시1: plt.subplots 로 (2,1) subplots 생성\n\n# fig, axs = plt.subplots(2) \nfig, (ax1,ax2) = plt.subplots(2,figsize=(4,4))\nax1.plot([1,2,3,2],'--r')\nax2.plot([1,2,4,3],'--o')\nfig.tight_layout()\n# plt.tight_layout()\n\n\n\n\n\n\n\n\n- 예시2: plt.subplots 로 (2,2) subplots 생성\n\nfig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2, figsize=(4,4))\nax1.plot([1,2,4,3],'o', color='C0')\nax2.plot([1,2,4,3],'o', color='C1')\nax3.plot([1,2,4,3],'o', color='C2')\nax4.plot([1,2,4,3],'o', color='C3')\nfig.tight_layout()"
  },
  {
    "objectID": "posts/supp1.html#b.-plt.subplot-times-n",
    "href": "posts/supp1.html#b.-plt.subplot-times-n",
    "title": "supp-1: matplotlib",
    "section": "B. plt.subplot \\(\\times\\) n",
    "text": "B. plt.subplot \\(\\times\\) n\n- 예시3: plt.subplot 4번써서 (2,2) subplots 만들기\n\nplt.figure(figsize=(4,4))\nplt.subplot(2,2,1)\nplt.plot([1,2,4,3],'o', color='C0')\nplt.subplot(2,2,2)\nplt.plot([1,2,4,3],'o', color='C1')\nplt.subplot(2,2,3)\nplt.plot([1,2,4,3],'o', color='C2')\nplt.subplot(2,2,4)\nplt.plot([1,2,4,3],'o', color='C3')\nplt.tight_layout()\n\n\n\n\n\n\n\n\n- 예시4: plt.subplot 의 희한한 활용\n\nplt.figure(figsize=(4,4))\nplt.subplot(2,2,1)\nplt.plot([1,2,4,3],'o', color='C0')\nplt.subplot(2,2,2)\nplt.plot([1,2,4,3],'o', color='C1')\nplt.subplot(2,1,2)\nplt.plot([1,2,4,3],'o', color='C2')\nplt.tight_layout()"
  },
  {
    "objectID": "posts/supp1.html#a.-그림만-보고-싶을때",
    "href": "posts/supp1.html#a.-그림만-보고-싶을때",
    "title": "supp-1: matplotlib",
    "section": "A. 그림만 보고 싶을때",
    "text": "A. 그림만 보고 싶을때\n\nplt.plot([1,2,3,4],[2,3,4,5]);"
  },
  {
    "objectID": "posts/supp1.html#b.-marker-size-line-width",
    "href": "posts/supp1.html#b.-marker-size-line-width",
    "title": "supp-1: matplotlib",
    "section": "B. marker size, line width",
    "text": "B. marker size, line width\n\nplt.plot([1,2,3,4],[2,3,4,2],'o',ms=10)\n\n\n\n\n\n\n\n\n\nplt.plot([1,2,3,4],[2,3,4,5],'--',lw=10)"
  },
  {
    "objectID": "posts/supp1.html#c.-label-legend",
    "href": "posts/supp1.html#c.-label-legend",
    "title": "supp-1: matplotlib",
    "section": "C. label + legend",
    "text": "C. label + legend\n\nplt.plot([1,2,3,4],[1,2,3,2],'--o',label='A')\nplt.plot([1,2,3,4],[3,2.1,1,3],'--o',label='B')\nplt.legend()"
  },
  {
    "objectID": "posts/supp1.html#d.-색깔조정-c0c1",
    "href": "posts/supp1.html#d.-색깔조정-c0c1",
    "title": "supp-1: matplotlib",
    "section": "D. 색깔조정 (C0,C1,…)",
    "text": "D. 색깔조정 (C0,C1,…)\n\nplt.plot([1,2,3,4],[1,2,3,2],'--o',label='A',color='C1')\nplt.plot([1,2,3,4],[3,2.1,1,3],'--o',label='B',color='C0')\nplt.legend()"
  },
  {
    "objectID": "posts/supp1.html#e.-title-설정",
    "href": "posts/supp1.html#e.-title-설정",
    "title": "supp-1: matplotlib",
    "section": "E. title 설정",
    "text": "E. title 설정\n- (방법1)\n\nplt.plot([1,2,3,4],[1,2,3,2],'--o',label='A',color='C1')\nplt.plot([1,2,3,4],[3,2.1,1,3],'--o',label='B',color='C0')\nplt.legend()\nplt.title('title')\n\nText(0.5, 1.0, 'title')\n\n\n\n\n\n\n\n\n\n- (방법2)\n\nfig, ax = plt.subplots()\nax.plot([1,2,3,4],[1,2,3,2],'--o',label='A',color='C1')\nax.plot([1,2,3,4],[3,2.1,1,3],'--o',label='B',color='C0')\nax.legend()\nax.set_title('title')\n\nText(0.5, 1.0, 'title')"
  },
  {
    "objectID": "posts/supp1.html#f.-suptitle-설정",
    "href": "posts/supp1.html#f.-suptitle-설정",
    "title": "supp-1: matplotlib",
    "section": "F. suptitle 설정",
    "text": "F. suptitle 설정\n\nfig, ax = plt.subplots(2,2)\nax[0,0].plot([1,2,3,2],'--o',label='A',color='C0')\nax[0,0].set_title('(a)')\nax[0,1].plot([3,2.1,1,3],'--o',label='B',color='C1')\nax[0,1].set_title('(b)')\nax[1,0].plot([-3,-2.1,-1,-3],'--o',label='B',color='C2')\nax[1,0].set_title('(c)')\nax[1,1].plot([3,-2.1,1,-3],'--o',label='B',color='C3')\nax[1,1].set_title('(d)')\n#plt.suptitle('suptitle')\nfig.suptitle('suptitle')\n\nText(0.5, 0.98, 'suptitle')"
  },
  {
    "objectID": "posts/supp1.html#g.-tight_layout",
    "href": "posts/supp1.html#g.-tight_layout",
    "title": "supp-1: matplotlib",
    "section": "G. tight_layout()",
    "text": "G. tight_layout()\n\nfig\n\n\n\n\n\n\n\n\n\nfig.tight_layout()\n\n\nfig"
  },
  {
    "objectID": "posts/supp1.html#h.-fig-ax-plt-소속",
    "href": "posts/supp1.html#h.-fig-ax-plt-소속",
    "title": "supp-1: matplotlib",
    "section": "H. fig, ax, plt 소속",
    "text": "H. fig, ax, plt 소속\n- 일단 그림 하나 그리고 이야기좀 해보자.\n\nfig, ax = plt.subplots()\nax.plot([1,2,3,1])\n\n\n\n\n\n\n\n\n- fig에는 있고 ax에는 없는 것\nadd_axes, tight_layout, suptitle, …\n- ax에는 있고 fig에는 없는 것\nboxplot, hist, plot, set_title, …\n- plt는 대부분 다 있음. (의미상 명확한건 대충 알아서 fig, ax에 접근해서 처리해준다) - plt.tight_layout, plt.suptitle, plt.boxplot, plt.hist, plot.plot - plt.set_title 은 없지만 plt.title 은 있음 - plt.add_axes 는 없음.."
  },
  {
    "objectID": "posts/supp1.html#i.-x축-y축-label-설정",
    "href": "posts/supp1.html#i.-x축-y축-label-설정",
    "title": "supp-1: matplotlib",
    "section": "I. x축, y축 label 설정",
    "text": "I. x축, y축 label 설정\n\nax.xaxis.set_label_text('xlabel',size=16,family='serif',weight=1000,style='italic')\n#_fontsettings={'size':16,'family':'serif','weight'=1000,'style':'italic'}\n#ax.xaxis.set_label_text('xlabel',_fontsettings)\nfig\n\n\n\n\n\n\n\n\n폰트ref - size: - fontweight: 0~1000 - family: ‘serif’, ‘sans-serif’, ‘monospace’ - style: ‘normal’, ‘italic’\n\nax.set_ylabel('ylabel',size=16)\nfig"
  },
  {
    "objectID": "posts/supp1.html#j.-latex",
    "href": "posts/supp1.html#j.-latex",
    "title": "supp-1: matplotlib",
    "section": "J. Latex",
    "text": "J. Latex\n- 예시1\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nx1= np.linspace(-2,2,1000)\ny1= (x1-1)**2 \nfig, ax = plt.subplots()\nax.plot(x1,y1,'--')\nax.set_title('$y_1=(x_1-1)^2$')\n\nText(0.5, 1.0, '$y_1=(x_1-1)^2$')\n\n\n\n\n\n\n\n\n\n- 예시2\n\nx1 = np.linspace(-2,2,1000)\ny1 = 0.5*(x1-1)**2 \nfig, ax = plt.subplots()\nax.plot(x1,y1,'--')\nax.set_title(r'$y_1=\\frac{1}{2}(x_1-1)^2$',size=20);\n\n\n\n\n\n\n\n\n- 예시3\n\nx1 = np.linspace(-2,2,1000)\ny1 = 0.5*(x1-1)**2 \nfig, ax = plt.subplots()\nax.plot(x1,y1,'--')\nax.set_title(r'$y_1=\\frac{1}{2}(x_1-1)^2$',size=20)\nax.set_xlabel(r'$x_1$',size=15)\nax.set_ylabel(r'$y_1$',size=15);\n\n\n\n\n\n\n\n\n- 예시4\n\nx1 = np.linspace(-2,2,1000)\ny1 = 0.5*(x1-1)**2 \ny2 = 0.5*(x1+1)**2\nfig, ax = plt.subplots()\nax.plot(x1,y1,'--',label=r'$\\frac{1}{2}(x-1)^2$')\nax.plot(x1,y2,'--',label=r'$\\frac{1}{2}(x+1)^2$')\nax.legend()"
  },
  {
    "objectID": "posts/supp1.html#k.-plt.subplot을-활용한-액시즈-변경",
    "href": "posts/supp1.html#k.-plt.subplot을-활용한-액시즈-변경",
    "title": "supp-1: matplotlib",
    "section": "K. plt.subplot()을 활용한 액시즈 변경",
    "text": "K. plt.subplot()을 활용한 액시즈 변경\n- 예시1: 기본액시즈 – 이건 우리가 아는건데?\n\nax = plt.subplot(111,projection=None)\nax.plot([1,2,3,4],[1,2,4,3])\n\n\n\n\n\n\n\n\n- 예시2: 3d 액시즈\n\nax = plt.subplot(111,projection='3d')\nax.plot([1,2,3,4],[1,2,-3,4],[1,2,-3,-4],'--o')\nfig=plt.gcf()\nfig.set_figheight(12)\n\n\n\n\n\n\n\n\n- 예시3: polar 액시즈\n\nax=plt.subplot(111,projection='polar')\nr = np.linspace(0,5,100)\ntheta = np.linspace(0,2*np.pi,100)\nax.plot(theta,r)"
  },
  {
    "objectID": "posts/13wk-1.html",
    "href": "posts/13wk-1.html",
    "title": "13wk-1: 퀴즈8",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \n#--#\nimport random\nimport PIL.Image\nimport io\nimport requests\n\n\n1. – 10점\n아래와 같은 기능을 하도록 클래스 Klass1을 설계하라.\n# 예시\n\nins = Klass1()\n\n클래스에서 인스턴스가 생성되었습니다.\n\n\n\nins # 이름및 학번은 본인이름과 학번이 나오도록 할 것 \n\n이름: 최규빈\n학번: 43052\n\n\n#\n(풀이)\n\nclass Klass1:\n    def __init__(self):\n        print(\"클래스에서 인스턴스가 생성되었습니다.\")\n    def __repr__(self):\n        text = \"이름: 최규빈\\n학번: 43052\"\n        return text\n\n\n\n2. – 15점\n아래와 같은 기능을 하도록 클래스 Klass2을 설계하라.\n# 예시1\n\nins = Klass2()\n\n\nins.toss()\n\n동전을 던져서 앞면이 나왔습니다. (현재까지 총 1번 던짐)\n\n\n\nins.toss()\n\n동전을 던져서 뒷면이 나왔습니다. (현재까지 총 2번 던짐)\n\n\n\nins.history()\n\n['앞면', '뒷면']\n\n\n#\n# 예시2\n\nins = Klass2()\n\n\nfor i in range(10):\n    ins.toss()\n\n동전을 던져서 앞면이 나왔습니다. (현재까지 총 1번 던짐)\n동전을 던져서 뒷면이 나왔습니다. (현재까지 총 2번 던짐)\n동전을 던져서 앞면이 나왔습니다. (현재까지 총 3번 던짐)\n동전을 던져서 뒷면이 나왔습니다. (현재까지 총 4번 던짐)\n동전을 던져서 뒷면이 나왔습니다. (현재까지 총 5번 던짐)\n동전을 던져서 뒷면이 나왔습니다. (현재까지 총 6번 던짐)\n동전을 던져서 앞면이 나왔습니다. (현재까지 총 7번 던짐)\n동전을 던져서 앞면이 나왔습니다. (현재까지 총 8번 던짐)\n동전을 던져서 앞면이 나왔습니다. (현재까지 총 9번 던짐)\n동전을 던져서 뒷면이 나왔습니다. (현재까지 총 10번 던짐)\n\n\n\nins.history()\n\n['앞면', '뒷면', '앞면', '뒷면', '뒷면', '뒷면', '앞면', '앞면', '앞면', '뒷면']\n\n\n#\n(풀이)\n\nclass Klass2:\n    def __init__(self):\n        self.results = []\n        self.n = 0\n    def toss(self):\n        result = np.random.choice(['앞면','뒷면'])\n        self.n = self.n+1\n        self.results.append(result)\n        print(f\"동전을 던져서 {result}이 나왔습니다. (현재까지 총 {self.n}번 던짐)\")\n    def history(self):\n        return self.results\n\n\n\n3. – 15점\n아래의 기능을 하도록 클래스 Klass3을 설계하라.\n# 예시1\n\na = Klass3()\n\n오늘은 수요일 입니다.\n\n\n\na.next_day()\n\n오늘은 목요일 입니다.\n\n\n\na.next_day()\n\n오늘은 금요일 입니다.\n\n\n\na.next_day()\n\n오늘은 토요일 입니다.\n\n\n\na.next_day()\n\n오늘은 일요일 입니다.\n\n\n\na.next_day()\n\n오늘은 월요일 입니다.\n\n\n#\n# 예시2\n\nb = Klass3()\n\n오늘은 수요일 입니다.\n\n\n\nfor i in range(20):\n    b.next_day()\n\n오늘은 목요일 입니다.\n오늘은 금요일 입니다.\n오늘은 토요일 입니다.\n오늘은 일요일 입니다.\n오늘은 월요일 입니다.\n오늘은 화요일 입니다.\n오늘은 수요일 입니다.\n오늘은 목요일 입니다.\n오늘은 금요일 입니다.\n오늘은 토요일 입니다.\n오늘은 일요일 입니다.\n오늘은 월요일 입니다.\n오늘은 화요일 입니다.\n오늘은 수요일 입니다.\n오늘은 목요일 입니다.\n오늘은 금요일 입니다.\n오늘은 토요일 입니다.\n오늘은 일요일 입니다.\n오늘은 월요일 입니다.\n오늘은 화요일 입니다.\n\n\n#\n(풀이)\n\nclass Klass3:\n    def __init__(self):\n        self.day = \"수\"\n        self.dct = dict(zip('월화수목금토일','화수목금토일월'))\n        print(f\"오늘은 {self.day}요일 입니다.\")\n    def next_day(self):\n        self.day = self.dct[self.day]\n        print(f\"오늘은 {self.day}요일 입니다.\")        \n\n\n\n4. – 15점\n아래의 기능을 하도록 클래스 Klass4을 설계하라.\n# 예시1\n\nnp.random.seed(43052) \nx = np.random.rand(4305)\n\n\nk4 = Klass4(x)\n\n\nk4.check(0.65)\n\n배열중 0.65와 가장 가까운 값은 0.6499741766686671 입니다.\n\n\n\nk4.check(0.22)\n\n배열중 0.22와 가장 가까운 값은 0.2200479320948192 입니다.\n\n\n#\n# 예시2\n\nx = np.array([1,2,3,4])\n\n\nk4 = Klass4(x)\n\n\nk4.check(2.2)\n\n배열중 2.2와 가장 가까운 값은 2 입니다.\n\n\n#\n(풀이)\n\nclass Klass4:\n    def __init__(self,x):\n        self.x = x\n    def check(self,v):\n        print(f\"배열중 {v}와 가장 가까운 값은 {self.x[abs(self.x-v).argmin()]} 입니다.\")\n\n\n\n5. – 20점\n아래의 기능을 하도록 클래스 Busan클래스를 설계하라.\n# 예시1\n\nurl = 'https://cdn.pixabay.com/photo/2016/10/17/07/53/busan-night-scene-1747130_1280.jpg'\nimg = np.array(PIL.Image.open(io.BytesIO(requests.get(url).content)))/255\n\n\nbusan = Busan(img)\n\n\nbusan.show_gray()\n\n\n\n\n\n\n\n\n\n위의 흑백이미지는 \\(Gray = 0.2989 \\times R + 0.5870 \\times G + 0.1140 \\times B\\) 를 이용하여 생성하라. 여기에서 R,G,B는 각각 이미지의 red,green,blue에 해당하는 array를 의미한다.\n\n\nbusan.show()\n\n\n\n\n\n\n\n\n#\n# 예시2\n\nurl = 'https://media.timeout.com/images/105996093/750/422/image.webp'\nimg = np.array(PIL.Image.open(io.BytesIO(requests.get(url).content)))/255\n\n\nbusan = Busan(img)\n\n\nbusan.show()\n\n\n\n\n\n\n\n\n\nbusan.show_gray()\n\n\n\n\n\n\n\n\n\n위의 흑백이미지는 \\(Gray = 0.2989 \\times R + 0.5870 \\times G + 0.1140 \\times B\\) 를 이용하여 생성하라. 여기에서 R,G,B는 각각 이미지의 red,green,blue에 해당하는 array를 의미한다.\n\n#\n(풀이)\n\nclass Busan:\n    def __init__(self,img):\n        self.img = img\n    def show(self):\n        plt.imshow(self.img)\n    def show_gray(self):\n        r,g,b = self.img[:,:,0],self.img[:,:,1],self.img[:,:,2]\n        gray = 0.2989*r + 0.5870*g + 0.1140*b \n        plt.imshow(gray,cmap=\"gray\")        \n\n\n\n6. – 25점\n아래와 같은 기능을 하도록 Daho 클래스를 만들어라.\n# 예시1\n\ndaho = Daho(end_condition=2)\n\n다호가 생성되었습니다. 다호의 목표는 2층의 높이의 탑을 쌓는 일입니다.\n\n\n\ndaho\n\n현재높이: 0\n\n\n\ndaho.build()\n\n다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\n\n\n\ndaho\n\n현재높이: 1\n\n\n\ndaho.build()\n\n다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\n\n\n\ndaho\n\n현재높이: 2\n\n\n\ndaho.build()\n\n다호는 이미 목표치(=2층 높이)만큼 탑을 쌓았습니다.\n\n\n\ndaho\n\n현재높이: 2\n\n\n#\n# 예시2\n\ndaho = Daho(end_condition=5)\n\n다호가 생성되었습니다. 다호의 목표는 5층의 높이의 탑을 쌓는 일입니다.\n\n\n\nfor i in range(10):\n    daho.build() \n\n다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\n다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\n다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\n다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\n다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\n다호는 이미 목표치(=5층 높이)만큼 탑을 쌓았습니다.\n다호는 이미 목표치(=5층 높이)만큼 탑을 쌓았습니다.\n다호는 이미 목표치(=5층 높이)만큼 탑을 쌓았습니다.\n다호는 이미 목표치(=5층 높이)만큼 탑을 쌓았습니다.\n다호는 이미 목표치(=5층 높이)만큼 탑을 쌓았습니다.\n\n\n\ndaho\n\n현재높이: 5\n\n\n#\n(풀이)\n\nclass Daho:\n    def __init__(self,end_condition):\n        self.end_condition = end_condition\n        self.height = 0\n        print(f\"다호가 생성되었습니다. 다호의 목표는 {self.end_condition}층의 높이의 탑을 쌓는 일입니다.\")\n    def build(self):\n        if self.height &lt; self.end_condition:\n            self.height = self.height + 1\n            print(f\"다호가 1개의 블록을 사용하여 신중하게 탑을 쌓았습니다. --&gt; 성공했습니다.\")\n        else: \n            print(f\"다호는 이미 목표치(={self.end_condition}층 높이)만큼 탑을 쌓았습니다.\")\n    def __repr__(self):\n        text = f\"현재높이: {self.height}\"\n        return text"
  },
  {
    "objectID": "posts/14wk-1.html",
    "href": "posts/14wk-1.html",
    "title": "14wk-1: 퀴즈9",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\nimport numpy as np\n\n\n1. – 30점\n아래와 같은 기능을 하도록 클래스 Coin을 설계하라.\n# 예시1\n\nins = Coin()\n\n\nins.toss()\n\n동전을 던져서 앞면이 나왔습니다.\n\n\n\nins.toss()\n\n동전을 던져서 뒷면이 나왔습니다.\n\n\n\nins\n\n결과: ['앞면', '뒷면']\n\n\n\nlen(ins)\n\n2\n\n\n\nins[0]\n\n'앞면'\n\n\n\nins[1]\n\n'뒷면'\n\n\n#\n# 예시2\n\nins = Coin()\n\n\nfor i in range(10):\n    ins.toss()\n\n동전을 던져서 앞면이 나왔습니다.\n동전을 던져서 앞면이 나왔습니다.\n동전을 던져서 뒷면이 나왔습니다.\n동전을 던져서 뒷면이 나왔습니다.\n동전을 던져서 앞면이 나왔습니다.\n동전을 던져서 뒷면이 나왔습니다.\n동전을 던져서 앞면이 나왔습니다.\n동전을 던져서 뒷면이 나왔습니다.\n동전을 던져서 앞면이 나왔습니다.\n동전을 던져서 뒷면이 나왔습니다.\n\n\n\nins\n\n결과: ['앞면', '앞면', '뒷면', '뒷면', '앞면', '뒷면', '앞면', '뒷면', '앞면', '뒷면']\n\n\n\nlen(ins)\n\n10\n\n\n\nins[-1]\n\n'뒷면'\n\n\n#\n(풀이)\n\nclass Coin:\n    def __init__(self):\n        self.results = []\n    def toss(self):\n        result = np.random.choice(['앞면','뒷면'])\n        self.results.append(result)\n        print(f\"동전을 던져서 {result}이 나왔습니다.\")\n    def __repr__(self):\n        return f\"결과: {self.results}\"\n    def __getitem__(self,idx): \n        return self.results[idx]\n    def __len__(self):\n        return len(self.results)\n\n\n\n2. – 30점\n아래와 같은 기능을 하도록 클래스 Container을 설계하라.\n# 예시\n\nins = Container()\nins\n\n아이템: []\n\n\n\nins + 1 + 1 + 2 \n\n아이템: [1, 1, 2]\n\n\n\nins + 2 + 2 + 2 \n\n아이템: [1, 1, 2, 2, 2, 2]\n\n\n\nins + 2 + 2 + 2 + 4 \n\n아이템: [1, 1, 2, 2, 2, 2, 2, 2, 2, 4]\n\n\n\nins.freq()\n\n{1: 2, 2: 7, 4: 1}\n\n\n#\n(풀이)\n\nclass Container:\n    def __init__(self):\n        self.items = []\n    def __add__(self,v):\n        self.items.append(v)\n        return self\n    def __repr__(self):\n        return f\"아이템: {self.items}\"\n    def freq(self):\n        return {s:self.items.count(s) for s in set(self.items)}\n\n\n\n3. – 40점\n아래와 같은 기능을 하도록 Quiz 클래스를 만들어라.\n# 예시\n\nguebin = Quiz()\ndaho = Quiz()\n\n\nguebin.save_score(10)\nguebin\n\n퀴즈1: 10\n\n\n\ndaho.save_score(8)\ndaho\n\n퀴즈1: 8\n\n\n\nguebin == daho, guebin &gt; daho # 퀴즈의 총합비교\n\n(False, True)\n\n\n\nguebin.save_score(8)\nguebin\n\n퀴즈1: 10\n퀴즈2: 8\n\n\n\ndaho.save_score(10)\ndaho\n\n퀴즈1: 8\n퀴즈2: 10\n\n\n\nguebin == daho, guebin &gt; daho # 퀴즈의 총합비교\n\n(True, False)\n\n\n\nguebin[-1] == daho[-1], guebin[-1] &gt; daho[-1] # 최근 퀴즈점수 비교 \n\n(False, False)\n\n\n#\n(풀이)\n\nclass Quiz:\n    def __init__(self):\n        self.scores = [] \n        self.n = 0 \n        self.text = \"\"\n        self.score = None\n    def save_score(self,score):\n        self.score = score\n        self.n = self.n +1 \n        self.scores.append(self.score)\n    def __getitem__(self,idx):\n        return self.scores[-idx]\n    def __repr__(self):\n        self.text = self.text + f\"퀴즈{self.n}: {self.score}\\n\"\n        return self.text\n    def __eq__(self,other):\n        return sum(self.scores) == sum(other.scores)\n    def __gt__(self,other):\n        return sum(self.scores) &gt; sum(other.scores)"
  },
  {
    "objectID": "posts/11wk-2.html#a.-하이브",
    "href": "posts/11wk-2.html#a.-하이브",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. 하이브",
    "text": "A. 하이브\nhttps://imnews.imbc.com/replay/2024/nwtoday/article/6593064_36523.html"
  },
  {
    "objectID": "posts/11wk-2.html#b.-하이브사태의-밈화",
    "href": "posts/11wk-2.html#b.-하이브사태의-밈화",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. 하이브사태의 밈화",
    "text": "B. 하이브사태의 밈화\nhttps://youtu.be/tSI7yTu7OH8?si=RTED0CNkUdAiC6K5"
  },
  {
    "objectID": "posts/11wk-2.html#c.-참-쉽죠",
    "href": "posts/11wk-2.html#c.-참-쉽죠",
    "title": "11wk-2: 클래스 (1)",
    "section": "C. 참 쉽죠",
    "text": "C. 참 쉽죠\nhttps://www.youtube.com/shorts/W4xSOV96ing\n\n밥로스는 누구?: 나무위키 https://namu.wiki/w/밥%20로스\n참쉽죠 밈: 나무위키 https://namu.wiki/w/참%20쉽죠%3F\n참쉽죠 밈의 설명: 티스토리 https://everymemes.tistory.com/156"
  },
  {
    "objectID": "posts/11wk-2.html#d.-밈이란-밈과-인터넷-밈의-차이",
    "href": "posts/11wk-2.html#d.-밈이란-밈과-인터넷-밈의-차이",
    "title": "11wk-2: 클래스 (1)",
    "section": "D. 밈이란? 밈과 인터넷 밈의 차이",
    "text": "D. 밈이란? 밈과 인터넷 밈의 차이\n- 밈이란? (유전자처럼) 복제가능한 something\n\n이기적 유전자에서 제시한 개념\n유전자는 (1) 복제 (2) 변형되면서 (3) 전파되는 속성이 있다는 사실을 관찰\n종교, 사상, 이념도 유전자처럼 (1) 복제 (2) 변형되면서 (3) 전파되더라..\n밈 = 유전자의 일반화된 개념 = 복제가능한 something\n\n- 인터넷 밈이란?\n\n밈의 한 형태\n인터넷을 통하여 (1)복제 (2)변형되면서 (3) 전파되는 something\n어떠한 내용이 많은 사람들에게 그 복제, 변형, 전파 되는것에 성공되었다면 그 어떠한 내용이 “밈화” 되었다고 표현한다.\n\n- 밈의 예시\n\n이데올로기: 민주주의, 공산주의와 같은 이념은 오랜시간동안 다양한 문화와 사회에 전파되고 발전해왔음.\n건축양식: 특정 건축 양식이나 디자인도 밈으로 볼 수 있음. 예를들어 고딕양식의 건축물이나 르네상스 시대의 건축양식은 각 시대와 지역에 문화요소에 맞추어 발전되고 전파되었음.\n레포트표지: 어떤 사람이 레포트표지 양식을 만들었음. 이 레포트 양식을 후배들에게 전달되었는데 그것이 변형을 거쳐서 이어내려오며 살아있음. 이 역시 “아이디어나 어떠한 요소가 사람들사이에서 (1) 복제 (2) 변형 (3) 재생산 되므로” 밈의 전형적인 특성과 일치한다. 따라서 레포표지양식의 변형 및 확산도 밈으로 간주할 수 있음."
  },
  {
    "objectID": "posts/11wk-2.html#a.-클래스란-다른교재-설명",
    "href": "posts/11wk-2.html#a.-클래스란-다른교재-설명",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. 클래스란? (다른교재 설명)",
    "text": "A. 클래스란? (다른교재 설명)\n- 클래스의 정의\n\n많은 교재에서 정의를 회피한다.\n대신에 비유적으로 설명하거나 다른 대상을 가져와서 설명한다.\n\n- 클래스에 대한 비유적 설명 (implicit definition)\n\n점프투파이썬: 클래스는 과자틀과 비슷하다. 클래스란 똑같은 무엇인가를 계속 만들어 낼 수도 있는 설계도면이고 객체란 클래스로 만든 피조물을 뜻한다.\n위키피디아: In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial valuesfor state (member variables) and implementations of behavior (member functions or methods). // 객체 지향 프로그래밍에서 클래스는 상태(멤버 변수) 및 동작 구현(멤버 함수 또는 메서드)에 대한 초기 값을 제공하는 객체 생성을 위한 확장 가능한 프로그램 코드 템플릿입니다.\nTCP스쿨: 클래스(class)란 객체를 정의하는 틀 또는 설계도와 같은 의미로 사용\n티스토리 블로그: 학생 클래스..?\n기타 서적들.."
  },
  {
    "objectID": "posts/11wk-2.html#b.-클래스란-제-생각",
    "href": "posts/11wk-2.html#b.-클래스란-제-생각",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. 클래스란? (제 생각)",
    "text": "B. 클래스란? (제 생각)\n- 클래스에 대한 명시적 정의 (책에 나온것 아니고 제 생각입니다!!): 클래스는 복제, 변형, 확산을 용이하게 하기 위해 만들어진 프로그램의 코드의 단위(extensible program-code-template)이다. 즉 밈이다.\n- 생각해보면 클래스를 만들고 사용하는 과정이 인터넷에서 밈을 만들고 노는것과 닮아 있다.\n\n\n\n\n\n\n\n\n\n단계\n인터넷밈\n클래스\n레포트표지\n\n\n\n\n1단계: 구상\n\\(\\bullet\\) 이거 재미있다.  \\(\\bullet\\) 밈화하자.\n\\(\\bullet\\) 이 코드 반복해서 자주 쓸 것 같다.  \\(\\bullet\\) 이 코드를 쉽게 찍어내는 (복사할 수 있는) 클래스를 만들자\n\\(\\bullet\\) 레포트 표지를 자주 만들 것 같음  \\(\\bullet\\) 양식파일을 만들까?\n\n\n2단계: 틀생성\n\\(\\bullet\\) “밈틀”: 복사하고 싶은 속성을 추려 밈을 생산하기에 유리한 틀을 만듬\n\\(\\bullet\\) 클래스의 선언\n\\(\\bullet\\) REPORT_2024_최규빈.hwp 양식파일을 생성\n\n\n3단계: 틀 \\(\\to\\) 복제\n\\(\\bullet\\) 밈화: “밈틀”에서 다양한 밈을 만들고 놈\n\\(\\bullet\\) 인스턴스화: 클래스에서 인스턴스를 생산\n\\(\\bullet\\) 레포트 양식표지에서 다양한 레포트를 냄\n\n\n4단계: 틀 \\(\\to\\) 틀변경 \\(\\to\\) 복제\n\\(\\bullet\\) 생각해보니까 초기 밈틀은 시시함.  \\(\\bullet\\) 초기 밈틀을 수정해 새로운 밈틀을 만들고 더 재미있는 밈을 만들고 놈\n\\(\\bullet\\) 초기클래스와 비슷한 클래스를 선언할 일이 생김  \\(\\bullet\\) 상속,오버라이딩: 초기클래스를 상속받아 클래스를 새롭게 정의하고 인스턴스를 재 생산\n\\(\\bullet\\) 공모전에 참가하여 결과보고서 표지를 만들 일이 생김.  \\(\\bullet\\) REPORT_2023_최규빈.hwp 를 적당히 변형하여 수정된 틀을 만들고 결과보고서 생산.\n\n\n\n밈이 변형된 예시: 슉슈슈슈슉 ㅅㅂㄹㅁ\n- 기원: 트위치 -&gt; 문자 -&gt; 돌하르방\n\n참고자료\n\n- 전혀 다른 성질을 가진 밈으로 재탄생한 경우임\n\n만들어진 계기: 트위치에서 tts를 이용해 조롱을 하기 위해 탄생\n유명해진 계기: 택배실수\n슉슈슈슈슉: 돌하르방과 결합.. (돌하르방의 기묘한 자세와 결합하여 더 재미있음)"
  },
  {
    "objectID": "posts/11wk-2.html#a.-클래스-선언",
    "href": "posts/11wk-2.html#a.-클래스-선언",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. 클래스 선언",
    "text": "A. 클래스 선언\n- 클래스를 선언\n\nclass BobRoss:\n    text = \"\"\n    imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n    end = \"&lt;h5&gt; 어때요, 참 쉽죠?\"\n    def easy(self):\n        print(self.text)\n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        display(HTML(self.end))\n\n\n규칙1: 메소드(=class안에서 정의되는 함수)의 첫번째 입력은 무조건(?) self\n규칙2: 메소드에서 class안에서 정의된 변수들 (text,url,end) 를 사용하려면 무조건(?) self.변수이름과 같은 형식으로 사용할 것.\n\n\n참고1: 사실 규칙1에서 무조건 self를 써야하는건 아님. 그런데 그냥 무조건 쓴다고 생각하자.\n\n\n참고2: 사실 class안에서 정의된 변수를 쓸때 무조건 self.변수이름와 같은 형식으로 쓰는건 아님.BobRoss.start, BobRoss.url, BobRoss.end와 같이 self 대신 클래스이름을 쓰는 경우도 있음. 그렇지만 여기선 그냥 무조건 쓴다고 생각하자.\n\n- 클래스의 사용 (클래스에서 인스턴스 만들기, 인스턴스에서 메소드 사용하기)\n\nbob = BobRoss() # 클래스에서 인스턴스를 만드는 문법, hwp 양식문서를 컨트로 C+V하여 실제 우리가 사용할 문서를 \"찍어내는\" 과정 \n\n\nbob.easy() # 인스턴스에서 메소드 사용해보기\n\n\n\n\n\n\n\n\n\n\n\n 어때요, 참 쉽죠?"
  },
  {
    "objectID": "posts/11wk-2.html#b.-인스턴스의-독립성",
    "href": "posts/11wk-2.html#b.-인스턴스의-독립성",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. 인스턴스의 독립성",
    "text": "B. 인스턴스의 독립성\n- 중간고사 1번해설\n\nmid1 = BobRoss()\n\n\nmid1.text = \"\"\"\n1번은 numpy의 axis의 개념을 잘 활용할 수 있으면 접근하기 쉬운 문제였습니다. \n(1) xtrain, xtest를 합치는 과정,\n(2) 숫자별 평균을 구하는 과정, \n(3) 평균과 가장 비슷한 이미지를 찾는 과정, \n(4) 이미지를 합치는 과정 \n모두 axis을 활용하면 쉽게 해결할 수 있었습니다.\n\"\"\"\n\n\nmid1.easy()\n\n\n1번은 numpy의 axis의 개념을 잘 활용할 수 있으면 접근하기 쉬운 문제였습니다. \n(1) xtrain, xtest를 합치는 과정,\n(2) 숫자별 평균을 구하는 과정, \n(3) 평균과 가장 비슷한 이미지를 찾는 과정, \n(4) 이미지를 합치는 과정 \n모두 axis을 활용하면 쉽게 해결할 수 있었습니다.\n\n\n\n\n\n\n\n\n\n\n 어때요, 참 쉽죠?\n\n\n- 중간고사 3번 해설\n\nmid3 = BobRoss()\n\n\nmid3.text = \"\"\"\n3번은 알고리즘을 검토하고 디버깅하는 능력을 봤습니다. \nGPT의 도움을 받아 초기코드를 작성하더라도, \n(1) 그것이 맞는 알고리즘인지 아닌지 검토하는 능력 \n(2) 맞는 알고리즘이 아닐 경우 이를 수정할 수 있는 능력 \n\"\"\"\n\n\nmid3.easy()\n\n\n3번은 알고리즘을 검토하고 디버깅하는 능력을 봤습니다. \nGPT의 도움을 받아 초기코드를 작성하더라도, \n(1) 그것이 맞는 알고리즘인지 아닌지 검토하는 능력 \n(2) 맞는 알고리즘이 아닐 경우 이를 수정할 수 있는 능력 \n\n\n\n\n\n\n\n\n\n\n 어때요, 참 쉽죠?\n\n\n- 중간고사 3번해설의 이미지 변경\n\nmid3.imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy2.png?raw=true\"\n\n\nmid3.easy()\n\n\n3번은 알고리즘을 검토하고 디버깅하는 능력을 봤습니다. \nGPT의 도움을 받아 초기코드를 작성하더라도, \n(1) 그것이 맞는 알고리즘인지 아닌지 검토하는 능력 \n(2) 맞는 알고리즘이 아닐 경우 이를 수정할 수 있는 능력 \n\n\n\n\n\n\n\n\n\n\n 어때요, 참 쉽죠?\n\n\n- 여전히 중간고사 1번해설은 잘 있음\n\nmid1.easy()\n\n\n1번은 numpy의 axis의 개념을 잘 활용할 수 있으면 접근하기 쉬운 문제였습니다. \n(1) xtrain, xtest를 합치는 과정,\n(2) 숫자별 평균을 구하는 과정, \n(3) 평균과 가장 비슷한 이미지를 찾는 과정, \n(4) 이미지를 합치는 과정 \n모두 axis을 활용하면 쉽게 해결할 수 있었습니다.\n\n\n\n\n\n\n\n\n\n\n 어때요, 참 쉽죠?\n\n\n- 중간고사3번 해설추가 + 제목추가\n\nmid3.text = \"\"\"\n[중간고사 3번문제] \n3번은 알고리즘을 검토하고 디버깅하는 능력을 봤습니다. \nGPT의 도움을 받아 초기코드를 작성하더라도, \n(1) 그것이 맞는 알고리즘인지 아닌지 검토하는 능력 \n(2) 맞는 알고리즘이 아닐 경우 이를 수정할 수 있는 능력을 평가했습니다. \n그래서 GPT에서 얻은 알고리즘을 그대로 복사해서 넣은뒤 약간의 수정만 하면 답입니다. \n물론, GPT 도움없이 처음부터 알고리즘을 짜도 괜찮고요\n\"\"\"\n\n\nmid3.easy()\n\n\n[중간고사 3번문제] \n3번은 알고리즘을 검토하고 디버깅하는 능력을 봤습니다. \nGPT의 도움을 받아 초기코드를 작성하더라도, \n(1) 그것이 맞는 알고리즘인지 아닌지 검토하는 능력 \n(2) 맞는 알고리즘이 아닐 경우 이를 수정할 수 있는 능력을 평가했습니다. \n그래서 GPT에서 얻은 알고리즘을 그대로 복사해서 넣은뒤 약간의 수정만 하면 답입니다. \n물론, GPT 도움없이 처음부터 알고리즘을 짜도 괜찮고요\n\n\n\n\n\n\n\n\n\n\n 어때요, 참 쉽죠?\n\n\n- 중간고사1번해설도 제목 추가.\n\nmid1.text=\"\"\"\n[중간고사 1번문제] \n1번은 numpy의 axis의 개념을 잘 활용할 수 있으면 접근하기 쉬운 문제였습니다. \n(1) xtrain, xtest를 합치는 과정,\n(2) 숫자별 평균을 구하는 과정, \n(3) 평균과 가장 비슷한 이미지를 찾는 과정, \n(4) 이미지를 합치는 과정 \n모두 axis을 활용하면 쉽게 해결할 수 있었습니다.\n\"\"\"\n\n\nmid1.easy()\n\n\n[중간고사 1번문제] \n1번은 numpy의 axis의 개념을 잘 활용할 수 있으면 접근하기 쉬운 문제였습니다. \n(1) xtrain, xtest를 합치는 과정,\n(2) 숫자별 평균을 구하는 과정, \n(3) 평균과 가장 비슷한 이미지를 찾는 과정, \n(4) 이미지를 합치는 과정 \n모두 axis을 활용하면 쉽게 해결할 수 있었습니다.\n\n\n\n\n\n\n\n\n\n\n 어때요, 참 쉽죠?"
  },
  {
    "objectID": "posts/11wk-2.html#c.-연습문제",
    "href": "posts/11wk-2.html#c.-연습문제",
    "title": "11wk-2: 클래스 (1)",
    "section": "C. 연습문제",
    "text": "C. 연습문제\n# 예제1: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a의 초기값은 True이다.\n- 클래스에는 show()라는 메소드가 있다. show()의 기능은 a의 값을 print하는 기능을 한다.\n(풀이)\n\nclass Klass:\n    a = True \n    def show(self):\n        print(f\"a={self.a}\")\n\n\nins = Klass()\n\n\nins.a\n\nTrue\n\n\n\nins.show()\n\na=True\n\n\n#\n# 예제2: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a의 초기값은 1이다.\n- 클래스에는 up()라는 메소드가 있다. up()의 기능은 a의 값을 1증가시키는 기능을 한다.\n(풀이)\n\nclass Klass:\n    a = 1\n    def up(self):\n        self.a = self.a+1 \n\n\nins = Klass()\n\n\nins.a\n\n1\n\n\n\nins.up()\n\n\nins.a\n\n2\n\n\n\nins.up()\nins.up()\nins.up()\n\n\nins.a\n\n5\n\n\n#\n# 예제3: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a의 초기값은 0이다.\n- 클래스에는 up(),down(),show()라는 메소드가 있다. 각각은 a의 값을 1증가, a의 값을 1감소, a의 값을 print하는 기능을 한다.\n(풀이)\n\nclass Klass:\n    a = 0\n    def up(self):\n        self.a = self.a+1 \n    def down(self):\n        self.a = self.a-1 \n    def show(self):\n        print(f\"a={self.a}\")\n\n\nins = Klass()\n\n\nins.show()\n\na=0\n\n\n\nins.up()\nins.show()\n\na=1\n\n\n\nins.up()\nins.up()\nins.show()\n\na=3\n\n\n\nins.up()\nins.down()\nins.down()\nins.show()\n\na=2\n\n\n#\n# 예제4: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a의 초기값은 0이다.\n- 클래스에는 up(),jump(),show() 라는 메소드가 있다.\n\nup()은 a의 값을 1증가시킨다.\njump()는 jump_size를 입력으로 받으며 a의 값을 jump_size만큼 증가시킨다.\nshow()는 a의 값을 print하는 기능을 한다.\n\n\nclass Klass:\n    a = 0\n    def up(self):\n        self.a = self.a+1 \n    def jump(self,jump_size):\n        self.a = self.a + jump_size         \n    def show(self):\n        print(f\"a={self.a}\")\n\n\nins = Klass()\n\n\nins.show()\n\na=0\n\n\n\nins.up()\nins.jump(3)\n\n\nins.show()\n\na=4\n\n\n#\n# 예제5: 아래의 클래스 BobCount을 구현하라.\n- 클래스내에는 변수 imgurl이 있음. 초기값은 https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true이다.\n- 클래스에는 imshow()이라는 메소드를 가지는데, 메소드는 아래와 같은 기능을 한다.\n\n기능1: imgurl의 그림을 출력\n기능2: ‘당신은 이 그림을 \\(n\\)번 보았습니다’ 출력. 여기에서 \\(n\\)은 그림을 본 횟수\n\n(풀이)\n\nclass BobCount:\n    imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n    n = 0\n    def imshow(self):\n        self.n = self.n+1 \n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        print(f\"당신은 이 그림을 {self.n}번 보았습니다.\")\n\n\na = BobCount()\n\n\na.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 5번 보았습니다.\n\n\n\nb = BobCount()\nb.imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy2.png?raw=true\"\n\n\nb.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 6번 보았습니다.\n\n\n#\n# 예제6: 아래의 기능을 가지는 RPS 클래스를 구현하라.\n- action_space 라는 변수가 있다. 초기값은 빈 리스트.\n- act 라는 함수가 있다. 이 함수는 action_space에서 하나의 값을 뽑는 함수이다.\n사용예시\nguebin = RPS()\nguebin.action_space = ['가위','바위']\nguebin.act() # 가위, 바위가 1/2의 확률로 출력 \nhani = RPS()\nhani.action_space = ['가위','바위','보']\nhani.act() # 가위, 바위, 보가 1/3의 확률로 출력 \n(풀이)\n\nclass RPS:\n    action_space = [] \n    def act(self):\n        return random.choice(self.action_space)        \n\n\nguebin = RPS()\n\n\nguebin.action_space = ['가위','바위']\n\n\nguebin.act()\n\n'바위'\n\n\n\nhani = RPS()\n\n\nhani.action_space = ['가위','바위','보']\n\n\nhani.act()\n\n'바위'\n\n\n#"
  },
  {
    "objectID": "posts/11wk-2.html#a.-bobcount-의-다른구현",
    "href": "posts/11wk-2.html#a.-bobcount-의-다른구현",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. BobCount 의 다른구현",
    "text": "A. BobCount 의 다른구현\n- 이전 예제를 다시 복습\n\nclass BobCount:\n    imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n    n = 0\n    def imshow(self):\n        self.n = self.n+1 \n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        print(f\"당신은 이 그림을 {self.n}번 보았습니다.\")\n\n\na = BobCount()\n\n\na.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 4번 보았습니다.\n\n\n- 위의 예제는 아래와 같이 구현할 수도 있다.\n\nclass BobCount:\n    imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n    n = 0\n    def imshow(self):\n        #self.n = self.n+1\n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        print(f\"당신은 이 그림을 {self.n}번 보았습니다.\")\n\n\na = BobCount()\n\n\na.n = a.n + 1 \na.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 1번 보았습니다.\n\n\n\na.n = a.n + 1\na.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 2번 보았습니다.\n\n\n\na.n = a.n + 1\na.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 3번 보았습니다."
  },
  {
    "objectID": "posts/11wk-2.html#b.-self-인스턴스의-태명",
    "href": "posts/11wk-2.html#b.-self-인스턴스의-태명",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. self = 인스턴스의 태명!",
    "text": "B. self = 인스턴스의 태명!\n- 결국에는 a.n = a.n + 1의 기능을 구현하여 클래스의 imshow 메소드에 넣은것이 self.n = self.n + 1 이다.\nclass BobCount:\n    imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n    n = 0\n    def imshow(self):\n        self.n = self.n+1 # 이게 원래는 a.n = a.n + 1 으로 구현되어 있었어야 했음. \n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        print(f\"당신은 이 그림을 {self.n}번 보았습니다.\")\n- 따라서 self는 a에 대응한다. 즉 self는 인스턴스의 이름을 대신한다. 우리가 하고 싶은 것은 클래스를 선언하는 시점에서 인스턴스가 생성된 이후시점에 대한 어떠한 동작들을 정의하고 싶은 것이다. 그런데 클래스를 설계하는 시점에서는 인스턴스의 이름이 정해지지 않았으므로 (아직 인스턴스가 태어나지도 않음) 이러한 동작들을 정의하기 불편하다. 그래서 클래스를 설계하는 시점에서 그 클래스로부터 만들어지는 인스턴스는 그냥 self라는 가칭으로 부른다. (굳이 비유하면 self는 인스턴스의 태명같은 것임)\n- 요약: self의 의미는 (후에 만들어질) 인스턴스의 이름이다. (즉 self는 인스턴스의 태명같은것임)"
  },
  {
    "objectID": "posts/11wk-2.html#a.-모티브",
    "href": "posts/11wk-2.html#a.-모티브",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. 모티브",
    "text": "A. 모티브\n- 아래의 예시를 다시 관찰하자.\n\nclass RPS:\n    action_space = [] \n    def act(self):\n        return random.choice(self.action_space)        \n\n\nguebin = RPS() # \"클래스-&gt;인스턴스\"\nguebin.action_space = ['가위','바위'] # 이걸 해줘야지 제대로된 인스턴스의 기능을 함\nguebin.act()\n\n'가위'\n\n\n\nhani = RPS()\nhani.action_space = ['가위','바위','보']\nhani.act()\n\n'바위'\n\n\n- 인스턴스를 만들때마다 guebin.action_space , hani.action_space 를 재설정해서 제대로된 인스턴스의 기능을 하도록 만드는 것이 귀찮다. \\(\\to\\) guebin을 만들때 guebin.action_space도 같이 초기화하면 어떨까?\n# 이전코드\nguebin = RPS() # guebin이라는 플레이어를 생성해줘 \nguebin.action_spcae = ['가위','바위'] # guebin이라는 플레이어가 낼 수 있는 선택은 \"가위\", \"바위\" 로 정해줘 \n# 희망코드\nguebin = RPS(['가위','바위']) # 가위와 바위를 낼 수 있는 플레이어 guebin를 생성해줘\n- 클래스에서 인스턴스를 만드는 시점에서, 내가 사용할 일련의 변수들을 자동으로 선언했으면 좋겠다."
  },
  {
    "objectID": "posts/11wk-2.html#b.-__init__-의-이해",
    "href": "posts/11wk-2.html#b.-__init__-의-이해",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. __init__ 의 이해",
    "text": "B. __init__ 의 이해\n- 아래의 코드를 사용하자.\n\nclass RPS:\n    def __init__(self,action_space):\n        self.action_space = action_space\n    def act(self):\n        return random.choice(self.action_space)        \n\n\nguebin = RPS(['가위','바위'])\nguebin.action_space\n\n['가위', '바위']\n\n\n\nhani = RPS(['가위','바위','보'])\nhani.action_space\n\n['가위', '바위', '보']\n\n\n\n__init__() 은 “클래스 –&gt; 인스턴스”의 과정에서 자동으로 실행되는 어떠한 코드들의 묶음이다."
  },
  {
    "objectID": "posts/11wk-2.html#c.-클래스-디자인-패턴",
    "href": "posts/11wk-2.html#c.-클래스-디자인-패턴",
    "title": "11wk-2: 클래스 (1)",
    "section": "C. 클래스 디자인 패턴",
    "text": "C. 클래스 디자인 패턴\n#1 클래스의 선언: 클래스의 선언은 아래와 같이 하며 클래스의 이름은 대문자로 시작하도록 한다.\n# 예시1: 좋은사례\nclass BobRoss:\n    ???\n    ???\n# 예시2: 나쁜사례 -- 클래스 이름은 대문자로 시작해야해\nclass bobRoss:\n    ???\n    ???\n\n딴지: 대문가 아니어도 에러는 안나는데..\n\n#2 클래스의 내용: 클래스의 내용은 메소드만을 정의하는데에만 사용한다.\n# 예시1: 좋은사례 \nclass RPS:\n    def __init__(self):\n        self.action_space = []\n    def act(self):\n        return random.choice(self.action_space)\n# 예시2: 나쁜사례\nclass RPS:\n    action_space = []\n    def act(self):\n        return random.choice(self.action_space)\n\n딴지: 꼭 메소드만 클래스의 내용으로 쓰라는 법이 없긴함.\n\n#3 메소드의 첫번째 입력은 항상 self 로 사용한다.\n\n딴지: 이것도 꼭 그런건 아님"
  },
  {
    "objectID": "posts/11wk-2.html#d.-클래스의-디자인-패턴에-따른-예제풀이",
    "href": "posts/11wk-2.html#d.-클래스의-디자인-패턴에-따른-예제풀이",
    "title": "11wk-2: 클래스 (1)",
    "section": "D. 클래스의 디자인 패턴에 따른 예제풀이",
    "text": "D. 클래스의 디자인 패턴에 따른 예제풀이\n# 예제1: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a는 “클래스 \\(\\to\\) 인스턴스”의 과정에서 초기값이 True로 설정된다.\n- 클래스에는 show()라는 메소드가 있다. show()의 기능은 a의 값을 print하는 기능을 한다.\n(풀이)\n\nclass Klass:\n    def __init__(self):\n        self.a = True\n    def show(self):\n        print(f\"a={self.a}\")\n\n\nins = Klass()\n\n\nins.a\n\nTrue\n\n\n\nins.show()\n\na=True\n\n\n#\n# 예제2: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a는 “클래스 \\(\\to\\) 인스턴스”의 과정에서 초기값이 1로 설정된다.\n- 클래스에는 up()라는 메소드가 있다. up()의 기능은 a의 값을 1증가시키는 기능을 한다.\n(풀이)\n\nclass Klass:\n    def __init__(self):\n        self.a = 1\n    def up(self):\n        self.a = self.a+1 \n\n\nins = Klass()\n\n\nins.a\n\n1\n\n\n\nins.up()\n\n\nins.a\n\n2\n\n\n\nins.up()\nins.up()\nins.up()\n\n\nins.a\n\n5\n\n\n#\n# 예제3: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a는 “클래스 \\(\\to\\) 인스턴스”의 과정에서 초기값이 0으로 설정된다.\n- 클래스에는 up(),down(),show()라는 메소드가 있다. 각각은 a의 값을 1증가, a의 값을 1감소, a의 값을 print하는 기능을 한다.\n(풀이)\n\nclass Klass:\n    def __init__(self):\n        self.a = 0\n    def up(self):\n        self.a = self.a+1 \n    def down(self):\n        self.a = self.a-1 \n    def show(self):\n        print(f\"a={self.a}\")\n\n\nins = Klass()\n\n\nins.show()\n\na=0\n\n\n\nins.up()\nins.show()\n\na=1\n\n\n\nins.up()\nins.up()\nins.show()\n\na=3\n\n\n\nins.up()\nins.down()\nins.down()\nins.show()\n\na=2\n\n\n#\n# 예제4: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a는 “클래스 \\(\\to\\) 인스턴스”의 과정에서 초기값이 0으로 설정된다.\n- 클래스에는 up(),jump(),show() 라는 메소드가 있다.\n\nup()은 a의 값을 1증가시킨다.\njump()는 jump_size를 입력으로 받으며 a의 값을 jump_size만큼 증가시킨다.\nshow()는 a의 값을 print하는 기능을 한다.\n\n\nclass Klass:\n    def __init__(self):\n        self.a = 0\n    def up(self):\n        self.a = self.a+1 \n    def jump(self,jump_size):\n        self.a = self.a + jump_size         \n    def show(self):\n        print(f\"a={self.a}\")\n\n\nins = Klass()\n\n\nins.show()\n\na=0\n\n\n\nins.up()\nins.jump(3)\n\n\nins.show()\n\na=4\n\n\n#\n# 예제5: 아래의 클래스 BobCount을 구현하라.\n- 클래스내에는 변수 imgurl이 있음. 이 변수는 “클래스 \\(\\to\\) 인스턴스”의 과정에서 초기값이\n\nhttps://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\n\n로 설정된다.\n- 클래스에는 imshow()이라는 메소드를 가지는데, 메소드는 아래와 같은 기능을 한다.\n\n기능1: imgurl의 그림을 출력\n기능2: ‘당신은 이 그림을 \\(n\\)번 보았습니다’ 출력. 여기에서 \\(n\\)은 그림을 본 횟수\n\n(풀이)\n\nclass BobCount:\n    def __init__(self):\n        self.imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n        self.n = 0\n    def imshow(self):\n        self.n = self.n+1 \n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        print(f\"당신은 이 그림을 {self.n}번 보았습니다.\")\n\n\na = BobCount()\n\n\na.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 4번 보았습니다.\n\n\n\nb = BobCount()\nb.imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy2.png?raw=true\"\n\n\nb.imshow()\n\n\n\n\n\n\n\n\n당신은 이 그림을 3번 보았습니다.\n\n\n#\n# 예제6: 아래의 기능을 가지는 RPS 클래스를 구현하라.\n- action_space 라는 변수가 있다. 이 변수는 “클래스 \\(\\to\\) 인스턴스”의 과정에서 ([\"가위\", \"바위\"] 와 같은 형태의) 초기값을 입력으로 받는다.\n- act 라는 함수가 있다. 이 함수는 action_space에서 하나의 값을 뽑는 함수이다.\n사용예시\nguebin = RPS(['가위','바위'])\nguebin.act() \nhani = RPS(['가위','바위','보'])\nhani.act()\n(풀이)\n\nclass RPS:\n    def __init__(self,action_space):\n        self.action_space = action_space \n    def act(self):\n        return random.choice(self.action_space)        \n\n\nguebin = RPS(['가위','바위'])\n\n\nguebin.action_space\n\n['가위', '바위']\n\n\n\nguebin.act()\n\n'바위'\n\n\n\nhani = RPS(['가위','바위','보'])\n\n\nhani.action_space \n\n['가위', '바위', '보']\n\n\n\nhani.act()\n\n'바위'\n\n\n#"
  },
  {
    "objectID": "posts/11wk-2.html#a.-인스턴스의-자료형",
    "href": "posts/11wk-2.html#a.-인스턴스의-자료형",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. 인스턴스의 자료형",
    "text": "A. 인스턴스의 자료형\n- 파이썬에는 자료형이라는게 있었음.\n\na = [1,2,3]\n\n\ntype(a)\n\nlist\n\n\n\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n- 그렇다면 아래의 자료형은 뭐지?\n\nclass BobRoss: \n    text = '' \n    imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n    end = '어때요, 참 쉽죠??'\n    def easy(self):\n        print(self.text)\n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        print(self.end)\n\n\nbob = BobRoss()\n\n\nross = BobRoss()\n\n- 타입을 알아보자.\n\nbob?\n\n\nType:        BobRoss\nString form: &lt;__main__.BobRoss object at 0x7f044c51c0a0&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\nross?\n\n\nType:        BobRoss\nString form: &lt;__main__.BobRoss object at 0x7f044c51e860&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n- ??? 타입은 자료형, 즉 int, float, list 이런것 아니었나??\n- 지금 bob, ross 의 자료형은 int, float, list 같은게 아니라 BobRoss가 나왔다.\n\n가설1: 사실 밥로스를 기리기 위해서 파이썬 내부에 BobRoss라는 자료형이 있었다. 그런데 내가 만든 bob이 우연히 그 자료형을 따르는 것!\n가설2: 지금 보니까 인스턴스의 type은 클래스의 이름과 같은 것 같다. 따라서 a = [1,2,3] 에서 a의 자료형이 list인것은 사실 list라는 클래스의 존재가 있음을 의미하고, a는 그 클래스에서 생긴 인스턴스라는 의미이다. 즉 list 자료형을 찍어낼 수 있는 어떠한 클래스가 파이썬에 내부적으로 존재할 것이다."
  },
  {
    "objectID": "posts/11wk-2.html#b.-깨달음1",
    "href": "posts/11wk-2.html#b.-깨달음1",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. 깨달음1",
    "text": "B. 깨달음1\n- 가설2가 맞다? 그렇다면 아래는 모두 어딘가에서 찍혀진 인스턴스이다.\n\na=[1,2,3]\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\na=1,2,3\na?\n\n\nType:        tuple\nString form: (1, 2, 3)\nLength:      3\nDocstring:  \nBuilt-in immutable sequence.\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\nIf the argument is a tuple, the return value is the same object.\n\n\n\n\na=1\na?\n\n\nType:        int\nString form: 1\nDocstring:  \nint([x]) -&gt; integer\nint(x, base=10) -&gt; integer\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n&gt;&gt;&gt; int('0b100', base=0)\n4\n\n\n\n\na='1'\na?\n\n\nType:        str\nString form: 1\nLength:      1\nDocstring:  \nstr(object='') -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.\n\n\n\n- 그리고 위의 a=[1,2,3]과 같은 것들은 모두 “클래스-&gt;인스턴스”에 해당하는 과정이었음"
  },
  {
    "objectID": "posts/11wk-2.html#c.-깨달음2",
    "href": "posts/11wk-2.html#c.-깨달음2",
    "title": "11wk-2: 클래스 (1)",
    "section": "C. 깨달음2",
    "text": "C. 깨달음2\n- 생각해보니까 아래와 같이 list를 선언하는 방식도 있었음\n\na = list()\na\n\n[]\n\n\n\n이거 지금 생각하니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다?!\n\n- 아래도 가능함\n\na = list((1,2,3))\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n이것도 지금 보니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다. 여기에서 (1,2,3)은 __init__()의 입력이다."
  },
  {
    "objectID": "posts/11wk-2.html#d.-깨달음3",
    "href": "posts/11wk-2.html#d.-깨달음3",
    "title": "11wk-2: 클래스 (1)",
    "section": "D. 깨달음3",
    "text": "D. 깨달음3\n- 그러고보니까 각 자료형마다 특수한 기능들이 있었음\n\na = [1,2,3] \n\n- a.+tab 을 하면 append, clear 등등이 나온다.\n- 이러한 기능은 지금까지 우리가 “list 자료형 특수기능들”이라고 부르면서 사용했었다. 그런데 a가 list클래스에서 생성된 인스턴스라는 관점에서 보면 이러한 기능들은 list클래스에서 정의된 메소드라고 볼 수 있다."
  },
  {
    "objectID": "posts/11wk-2.html#e.-깨달음4",
    "href": "posts/11wk-2.html#e.-깨달음4",
    "title": "11wk-2: 클래스 (1)",
    "section": "E. 깨달음4",
    "text": "E. 깨달음4\n- a.f()는 f(a)로 해석가능하다고 하였다. 이 해석에 따르면 메소드의 첫번째 입력은 메소드가 소속된 인스턴스라고 해석할 수 있다. 즉 a.f()라는 함수의 입력은 a자신이 되는 것이다.\n- 동일한 논리로 아래의 코드는 bob.easy()의 입력에서 bob을 넣는다는 의미이다.\n\nclass BobRoss: \n    def __init__(self):\n        self.text = '' \n        self.imgurl = \"https://github.com/guebin/PP2024/blob/main/posts/easy.jpeg?raw=true\"\n        self.end = '어때요, 참 쉽죠??'\n    def easy(self):\n        print(self.text)\n        display(PIL.Image.open(PIL.Image.io.BytesIO(requests.get(self.imgurl).content)))\n        print(self.end)\n\n\nbob = BobRoss()\n\n- 그래서 메소드의 첫 입력은 항상 self 인 것임."
  },
  {
    "objectID": "posts/11wk-2.html#a.-motive",
    "href": "posts/11wk-2.html#a.-motive",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. motive",
    "text": "A. motive\n- 아래와 같은 클래스를 관찰하자.\n\nclass UpJump:\n    def __init__(self):\n        self.a = 0 \n    def up(self):\n        print(f\"a의 값이 {self.a} 에서 {self.a+1} 로 변화합니다.\")\n        self.a = self.a + 1\n    def jump(self,jump_size):\n        print(f\"a의 값이 {self.a} 에서 {self.a+jump_size} 로 변화합니다.\")\n        self.a = self.a + jump_size\n    def show(self):\n        print(f\"a = {self.a}\") \n\n\nupjump = UpJump()\n\n\nupjump.up()\n\na의 값이 0 에서 1 로 변화합니다.\n\n\n\nupjump.jump(5)\n\na의 값이 1 에서 6 로 변화합니다.\n\n\n\nupjump.show()\n\na = 6\n\n\n- 모티브: 생각해보니까 show와 print의 기능이 거의 비슷함 \\(\\to\\) print(upjump)를 하면 upjump.show()와 동일한 효과를 내도록 만들수 있을까? 즉 아래와 같이 할 수 있을까?\nprint(upjump) \na = 6\n- 말도 안되는 소리 같음. 왜?\n\n이유1: print()는 파이썬 내장기능이다. 내장기능을 우리가 마음대로 커스터마이징해서 쓰기는 어려울 것 같다.\n이유2: 이유1이 해결된다고 쳐도 문제이다. 그럼 지금까지 우리가 써왔던 수많은 print()의 결과는 어떻게 되는가?\n\n- 그런데 upjump 인스턴스의 자료형(UpJump자료형)에 해당하는 것들만 한정하여 print()를 수정하는 방법이 가능하다면? (그럼 다른 오브젝트들은 수정된 print()에 영향을 받지 않음)"
  },
  {
    "objectID": "posts/11wk-2.html#b.-관찰1",
    "href": "posts/11wk-2.html#b.-관찰1",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. 관찰1",
    "text": "B. 관찰1\n- 현재 print(upjump)의 결과는 아래와 같다.\n\nprint(upjump)\n\n&lt;__main__.UpJump object at 0x7f0438b9f820&gt;\n\n\n\nupjump는 UpJump 클래스에서 만들어진 인스턴스이며, upjump가 저장된 메모리주소는 0x7f0438b9f820 라는 의미"
  },
  {
    "objectID": "posts/11wk-2.html#c.-관찰2",
    "href": "posts/11wk-2.html#c.-관찰2",
    "title": "11wk-2: 클래스 (1)",
    "section": "C. 관찰2",
    "text": "C. 관찰2\n- upjump 에는 __str__()이라는 숨겨진 메소드가 있다.\n\nupjump.__str__()\n\n'&lt;__main__.UpJump object at 0x7f0438b9f820&gt;'\n\n\n\nprint(upjump)\n\n&lt;__main__.UpJump object at 0x7f0438b9f820&gt;\n\n\n\nprint(upjump.__str__())\n\n&lt;__main__.UpJump object at 0x7f0438b9f820&gt;\n\n\n\n결국 print(upjump) 는 print(upjump.__str__()) 와 같은 역할\n\n\nupjump.__str__()\n\n'&lt;__main__.UpJump object at 0x7f0438b9f820&gt;'"
  },
  {
    "objectID": "posts/11wk-2.html#d.-해킹",
    "href": "posts/11wk-2.html#d.-해킹",
    "title": "11wk-2: 클래스 (1)",
    "section": "D. 해킹?",
    "text": "D. 해킹?\n- upjump.__str__()의 기능을 재정의하면 print(upjump)의 결과도 바뀌지 않을까??\n예비학습: 함수 덮어씌우기 (재정의하기)\n\ndef f():\n    print('asdf')\n\n\nf()\n\nasdf\n\n\n\ndef f():\n    print('guebin hahaha')\n\n\nf()\n\nguebin hahaha\n\n\n이런식으로 함수가 이미 정의되어 있더라도, 내가 나중에 덮어씌우면 그 함수의 기능을 다시 정의한다.\n예비학습 끝\n- 이제 .__str__()의 기능을 재정의 하여 보자.\n\nclass UpJump:\n    def __init__(self):\n        self.a = 0 \n    def up(self):\n        print(f\"a의 값이 {self.a} 에서 {self.a+1} 로 변화합니다.\")\n        self.a = self.a + 1\n    def jump(self,jump_size):\n        print(f\"a의 값이 {self.a} 에서 {self.a+jump_size} 로 변화합니다.\")\n        self.a = self.a + jump_size\n    def __str__(self):\n        return f\"a = {self.a}\"\n\n\nupjump = UpJump()\n\n\nupjump.up()\n\na의 값이 0 에서 1 로 변화합니다.\n\n\n\nupjump.__str__()\n\n'a = 1'\n\n\n\nprint(upjump)\n#print(upjump.__str__())\n\na = 1"
  },
  {
    "objectID": "posts/11wk-2.html#e.-지금까지의-print-다시-확인",
    "href": "posts/11wk-2.html#e.-지금까지의-print-다시-확인",
    "title": "11wk-2: 클래스 (1)",
    "section": "E. 지금까지의 print 다시 확인",
    "text": "E. 지금까지의 print 다시 확인\n- 예시1\n\na = [1,2,3]\nprint(a)\n\n[1, 2, 3]\n\n\n\nprint(a.__str__())\n\n[1, 2, 3]\n\n\n- 예시2\n\na = {1,2,3}\nprint(a)\n\n{1, 2, 3}\n\n\n\nprint(a.__str__())\n\n{1, 2, 3}\n\n\n- 예시3\n\na = np.arange(9).reshape(3,3)\nprint(a)\n\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n\n\n\na.__str__() # 보기 예쁘게 하려고 수동으로 space를 넣어가면서 사실 조잡하게 출력결과를 컨트롤 하고 있었음.\n\n'[[0 1 2]\\n [3 4 5]\\n [6 7 8]]'\n\n\n\nprint(a.__str__())\n\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n\n\n\n파이썬의 비밀: print(a)는 사실 print(a.__str__()) 의 축약버전이었다."
  },
  {
    "objectID": "posts/11wk-2.html#a.-motive-1",
    "href": "posts/11wk-2.html#a.-motive-1",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. motive",
    "text": "A. motive\n\nrepr은 representation의 약자이다.\n\n- 모티브: 생각해보니까 print를 해서 우리가 원하는 정보를 확인하는건 아니었음\n\na = [1,2,3]\n\n\na\n\n[1, 2, 3]\n\n\n- 의문: a + 엔터는 print(a) + 엔터와 같은 효과인가?\n\nprint(a)\n\n[1, 2, 3]\n\n\n\na\n\n[1, 2, 3]\n\n\n- 반례\n\na = np.arange(9).reshape(3,3)\na\n\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n\n\nprint(a)\n\n[[0 1 2]\n [3 4 5]\n [6 7 8]]"
  },
  {
    "objectID": "posts/11wk-2.html#b.-__repr__-의-역할",
    "href": "posts/11wk-2.html#b.-__repr__-의-역할",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. __repr__ 의 역할",
    "text": "B. __repr__ 의 역할\n- a + 엔터와 print(a) + 엔터가 다른 경우도 있다.\n\n추측: 서로 다른 숨겨진 기능이 있을 것이다. 즉 print(a) + 엔터가 print(a.__str__()) + 엔터의 축약이듯이, a+엔터는 다른 무엇인가의 축약일 것이다.\n결론: 추측이 맞다. a+엔터는 print(a.__repr__()) + 엔터의 축약이다.\n\n\nprint(a)\n\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n\n\n\nprint(a.__str__())\n\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n\n\n\na\n\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n\n\nprint(a.__repr__())\n\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])"
  },
  {
    "objectID": "posts/11wk-2.html#c.-연습",
    "href": "posts/11wk-2.html#c.-연습",
    "title": "11wk-2: 클래스 (1)",
    "section": "C. 연습",
    "text": "C. 연습\n\nclass UpJump:\n    def __init__(self):\n        self.a = 0 \n    def up(self):\n        print(f\"a의 값이 {self.a} 에서 {self.a+1} 로 변화합니다.\")\n        self.a = self.a + 1\n    def jump(self,jump_size):\n        print(f\"a의 값이 {self.a} 에서 {self.a+jump_size} 로 변화합니다.\")\n        self.a = self.a + jump_size\n    # def __str__(self):\n    #     return f\"a = {self.a}\"\n    def __repr__(self):\n        return f\"a = {self.a}\"\n\n\nupjump = UpJump()\n\n\nupjump\n\na = 0\n\n\n\nprint(upjump)\n\na = 0"
  },
  {
    "objectID": "posts/11wk-2.html#d.-__repr__-__str__-의-관계",
    "href": "posts/11wk-2.html#d.-__repr__-__str__-의-관계",
    "title": "11wk-2: 클래스 (1)",
    "section": "D. __repr__(), __str__() 의 관계",
    "text": "D. __repr__(), __str__() 의 관계\n- 만약에 __repr__() 만 정의되었고 __str__()이 정의되지 않았다면 __repr__()의 내용이 __str__()의 내용을 대신한다. (하지만 역은 성립하지 않음)\n\nclass UpJump:\n    def __init__(self):\n        self.a = 0 \n    def up(self):\n        print(f\"a의 값이 {self.a} 에서 {self.a+1} 로 변화합니다.\")\n        self.a = self.a + 1\n    def jump(self,jump_size):\n        print(f\"a의 값이 {self.a} 에서 {self.a+jump_size} 로 변화합니다.\")\n        self.a = self.a + jump_size\n    def __repr__(self):\n        return f\"__repr__()이 실행된 결과: a = {self.a}\"\n\n\nupjump = UpJump()\n\n\nprint(upjump)\n\n__repr__()이 실행된 결과: a = 0\n\n\n\nupjump\n\n__repr__()이 실행된 결과: a = 0\n\n\n- 역은 성립안함! 즉 __str__() 만 정의되었고 __repr__()이 정의되지 않은경우에는 __str__()의 내용이 __repr__()의 내용을 대신할 수 없다.\n\nclass UpJump:\n    def __init__(self):\n        self.a = 0 \n    def up(self):\n        print(f\"a의 값이 {self.a} 에서 {self.a+1} 로 변화합니다.\")\n        self.a = self.a + 1\n    def jump(self,jump_size):\n        print(f\"a의 값이 {self.a} 에서 {self.a+jump_size} 로 변화합니다.\")\n        self.a = self.a + jump_size\n    def __str__(self):\n        return f\"__str__()이 실행된 결과: a = {self.a}\"\n\n\nupjump = UpJump()\n\n\nprint(upjump)\n\n__str__()이 실행된 결과: a = 0\n\n\n\nupjump\n\n&lt;__main__.UpJump at 0x7f0438bbda80&gt;\n\n\n\n파이썬의 비밀: 대화형콘솔에서 a+엔터하여 나오는 출력결과는 print(a.__repr__()) 이라고 생각할 수 있다. (생각할수 있다? 아닐 수도 있다는 거야?)"
  },
  {
    "objectID": "posts/11wk-2.html#a.-motive-2",
    "href": "posts/11wk-2.html#a.-motive-2",
    "title": "11wk-2: 클래스 (1)",
    "section": "A. motive",
    "text": "A. motive\n- 모티브: 요즘에는 IDE의 발전에 따라서 인스턴스이름 + 엔터 를 입력할때 나오는 출력의 형태도 다양해지고 있음.\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\n\n\ndf\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\n예쁘게 나온다… 이건 근데 문자열따위로 구현할 수 있는 출력 기능이 아닌것 같은데?\n\n\nprint(df.__repr__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n\nprint(df.__str__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n\ndisplay(HTML(df._repr_html_()))\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\n사실 df+엔터는 print(df.__repr__())의 축약이 아니라 display(HTML(df._repr_html_()))의 축약이다."
  },
  {
    "objectID": "posts/11wk-2.html#b.-_repr_html_-의-역할",
    "href": "posts/11wk-2.html#b.-_repr_html_-의-역할",
    "title": "11wk-2: 클래스 (1)",
    "section": "B. _repr_html_ 의 역할",
    "text": "B. _repr_html_ 의 역할\n\ndf._repr_html_()\n\n'&lt;div&gt;\\n&lt;style scoped&gt;\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n&lt;/style&gt;\\n&lt;table border=\"1\" class=\"dataframe\"&gt;\\n  &lt;thead&gt;\\n    &lt;tr style=\"text-align: right;\"&gt;\\n      &lt;th&gt;&lt;/th&gt;\\n      &lt;th&gt;a&lt;/th&gt;\\n      &lt;th&gt;b&lt;/th&gt;\\n    &lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;0&lt;/th&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;1&lt;/th&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;2&lt;/th&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n    &lt;/tr&gt;\\n  &lt;/tbody&gt;\\n&lt;/table&gt;\\n&lt;/div&gt;'\n\n\n\nHTML(df._repr_html_())\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n참고: 그럼 df.__repr__()의 역할은 뭐야?\n\n대화형콘솔중 HTML 출력을 지원하면 오브젝트이름+엔터는 display(HTML(df._repr_html_())) + 엔터 의 효과\n대화형콘솔중 HTML 출력을 지원하지 않으면 오브젝트이름+엔터는 print(df.__repr__()) + 엔터 의 효과\n\n\n\n\n그림1: HTML을 지원하는 않는 대화형 콘솔에서의 df출력예시"
  },
  {
    "objectID": "posts/11wk-2.html#c.-_repr_html_-__repr__-__str__-의-관계",
    "href": "posts/11wk-2.html#c.-_repr_html_-__repr__-__str__-의-관계",
    "title": "11wk-2: 클래스 (1)",
    "section": "C. _repr_html_(), __repr__(), __str__() 의 관계",
    "text": "C. _repr_html_(), __repr__(), __str__() 의 관계\n\n\n\n_repr_html_()\n__repr__()\n__str__()\na + Enter\nprint(a)\n\n\n\n\nO\nO\nO\n_repr_html_()\n__str__()\n\n\nO\nO\nX\n_repr_html_()\n__repr__()\n\n\nO\nX\nO\n_repr_html_()\n__str__()\n\n\nO\nX\nX\n_repr_html_()\n기본출력\n\n\nX\nO\nO\n__repr__()\n__str__()\n\n\nX\nO\nX\n__repr__()\n__repr__()\n\n\nX\nX\nO\n기본출력\n__str__()\n\n\nX\nX\nX\n기본출력\n기본출력\n\n\n\n- 실습해보자.\n\nclass UpJump:\n    def __init__(self):\n        self.a = 0 \n    def up(self):\n        print(f\"a의 값이 {self.a} 에서 {self.a+1} 로 변화합니다.\")\n        self.a = self.a + 1\n    def jump(self,jump_size):\n        print(f\"a의 값이 {self.a} 에서 {self.a+jump_size} 로 변화합니다.\")\n        self.a = self.a + jump_size\n    # def _repr_html_(self):\n    #     return f\"_repr_html_()이 실행된 결과: a = {self.a}\"        \n    # def __repr__(self):\n    #     return f\"__repr__()이 실행된 결과: a = {self.a}\"        \n    # def __str__(self):\n    #     return f\"__str__()이 실행된 결과: a = {self.a}\"\n\n\nupjump = UpJump()\n\n\nprint(upjump)\n\n&lt;__main__.UpJump object at 0x7f043861d450&gt;\n\n\n\nupjump\n\n&lt;__main__.UpJump at 0x7f043861d450&gt;\n\n\n\n파이썬의 비밀: 대화형콘솔에서 a+엔터하여 나오는 출력결과는 print(a.__repr__()) + 엔터 혹은 display(HTML(a._repr_html_())) + 엔터 이다.\n\n직관: 클래스에서 정의된 숨겨진 메소드 __????__ 들이 사실 파이썬의 비밀 덩어리였음!!!"
  },
  {
    "objectID": "posts/07wk-1.html",
    "href": "posts/07wk-1.html",
    "title": "07wk-1: 퀴즈4",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\nimport numpy as np\nimport pandas as pd\n\n\n1. – 10점\n아래는 파이썬프로그래밍 수강생들의 학번, 이름, 출석점수, 과제점수, 중간고사점수, 기말고사점수를 저장한 중첩리스트이다.\n\nlst = [['2021-43052', 'GuebinChoi', 5, 10, 20, 25],\n       ['2019-12342', 'Heung-min Son', 10, 15, 30, 15],\n       ['2018-32234', 'hynn', 7, 20, 30, 15],\n       ['2022-42323', 'Minji', 8, 20, 20, 35],\n       ['2023-55342', 'Hanni', 7, 20, 30, 35],\n       ['2022-46624', 'Danielle', 3, 15, 30, 40],\n       ['2022-11239', 'Haerin', 10, 20, 30, 40],\n       ['2022-32114', 'Hyein', 10, 20, 20, 35]]\nlst \n\n[['2021-43052', 'GuebinChoi', 5, 10, 20, 25],\n ['2019-12342', 'Heung-min Son', 10, 15, 30, 15],\n ['2018-32234', 'hynn', 7, 20, 30, 15],\n ['2022-42323', 'Minji', 8, 20, 20, 35],\n ['2023-55342', 'Hanni', 7, 20, 30, 35],\n ['2022-46624', 'Danielle', 3, 15, 30, 40],\n ['2022-11239', 'Haerin', 10, 20, 30, 40],\n ['2022-32114', 'Hyein', 10, 20, 20, 35]]\n\n\n중간고사와 기말고사의 합이 60점 이상인 학생은 몇명인가? (확장 가능한 코드만 정답으로 인정)\n(풀이)\n\nlen([l for l in lst if sum(l[-2:])&gt;=60])\n\n3\n\n\n\n\n2. – 10점\n아래의 list를 관찰하라.\n\nlst = ['2022/09/21','2022/10/30','2022/12/25','2023/01/01','2023/01/31','2023/03/20']\n\n이를 아래와 같은 리스트로 변환하는 코드를 작성하라. (확장 가능한 코드만 정답으로 인정)\n\n['2022.09.21.','2022.10.30.','2022.12.25.','2023.01.01.','2023.01.31.','2023.03.20.']\n\n['2022.09.21.',\n '2022.10.30.',\n '2022.12.25.',\n '2023.01.01.',\n '2023.01.31.',\n '2023.03.20.']\n\n\n(풀이)\n\n[l.replace('/','.')+'.' for l in lst]\n\n['2022.09.21.',\n '2022.10.30.',\n '2022.12.25.',\n '2023.01.01.',\n '2023.01.31.',\n '2023.03.20.']\n\n\n\n\n3. – 10점\n아래의 문자열을 관찰하라.\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n‘A’ 가 몇개 있는지 count하라\n(풀이)\n\nlist(test_arr).count('A')\n\n18\n\n\n\ntest_arr.count('A')\n\n18\n\n\n\n\n4. – 10점\n\n모두 맞출경우만 정답으로 인정\n\n(1) 아래의 조건을 만족하는 자료형 a를 선언하라.\n\ntype(a), len(a), a[0]\n\n(tuple, 1, 'a')\n\n\n(풀이)\n\na= ('a',)\n\n\ntype(a), len(a), a[0]\n\n(tuple, 1, 'a')\n\n\n(2) 아래와 같은 출력결과를 보이는 numpy array a,b 를 선언하라.\n\na, a.shape\n\n(array(3), ())\n\n\n\nb, b.shape\n\n(array([3]), (1,))\n\n\n(풀이)\n\na = np.array(3)\nb = np.array([3])\n\n\na, a.shape\n\n(array(3), ())\n\n\n\nb, b.shape\n\n(array([3]), (1,))\n\n\n\n\n5. – 20점\n\n모두 맞출경우만 정답으로 인정\n\n아래와 같은 2차원 numpy array를 선언하라.\n\nnp.random.seed(43052)\nX = np.random.randn(20,5).round(2)\nX\n\narray([[ 0.38,  1.08,  1.14,  0.31,  0.24],\n       [ 0.36, -1.66, -1.38, -1.93, -1.49],\n       [ 0.01, -0.03, -0.34,  0.71, -1.55],\n       [ 1.35, -0.06, -0.83, -1.46, -0.35],\n       [-0.34,  0.76,  2.22, -1.72,  1.59],\n       [ 0.37,  0.77, -0.43,  0.77,  0.92],\n       [-0.45,  0.32,  0.82, -0.17,  1.13],\n       [ 0.21, -1.68, -0.3 ,  0.62, -0.3 ],\n       [-0.25, -1.16, -1.29, -0.63, -0.7 ],\n       [ 1.27,  0.84, -1.46, -0.17,  1.29],\n       [ 0.36, -0.1 , -0.83, -0.65,  0.07],\n       [-2.47,  1.39, -0.06, -0.84, -0.38],\n       [ 1.33,  0.17, -0.51, -1.27,  1.74],\n       [-0.36, -0.18,  0.62,  0.45, -0.4 ],\n       [-1.07, -0.18, -1.42, -0.69,  0.74],\n       [ 2.19, -1.15, -0.28, -0.5 , -1.66],\n       [-2.22,  0.42, -0.59,  0.17, -0.01],\n       [-1.83,  0.26, -0.61,  0.14, -0.02],\n       [-0.99,  0.73,  0.37,  0.34,  0.55],\n       [ 1.31,  0.41, -0.19,  1.06,  1.19]])\n\n\n(1) 열별로(column-wise) X의 평균을 계산하라.\n\n# 답: np.array([-0.042 ,  0.0475, -0.2675, -0.273 ,  0.13  ])\n\n(풀이)\n\nX.mean(axis=0)\n\narray([-0.042 ,  0.0475, -0.2675, -0.273 ,  0.13  ])\n\n\n(2) 행별로(row-wise) X의 최대값과 최소값의 차이를 계산하라.\n\n# 답: np.array([0.9 , 2.29, 2.26, 2.81, 3.94, 1.35, 1.58, 2.3 , 1.04, 2.75, 1.19, 3.86, 3.01, 1.02, 2.16, 3.85, 2.64, 2.09, 1.72, 1.5 ])\n\n(풀이)\n\nX.max(axis=1) - X.min(axis=1) \n\narray([0.9 , 2.29, 2.26, 2.81, 3.94, 1.35, 1.58, 2.3 , 1.04, 2.75, 1.19,\n       3.86, 3.01, 1.02, 2.16, 3.85, 2.64, 2.09, 1.72, 1.5 ])\n\n\n\n\n6. – 40점\n\n각 20점\n\n아래의 코드를 실행하여 data를 생성하라.\n\ndata = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2021/master/_notebooks/2021-10-25-FIFA22_official_data.csv').drop(['Loaned From','Marking'],axis=1).dropna().loc[:,['Name','Nationality','Overall']].to_numpy().tolist()\n\ndata는 list로 만들어져 있으며 각 원소는 축구선수들의 능력치를 나타낸다. data의 각 원소는 [이름,소속국가,능력치]를 의미하며 처음 5개의 원소는 아래와 같다.\n\ndata[:5]\n\n[['Bruno Fernandes', 'Portugal', 88],\n ['L. Goretzka', 'Germany', 87],\n ['L. Suárez', 'Uruguay', 88],\n ['K. De Bruyne', 'Belgium', 91],\n ['M. Acuña', 'Argentina', 84]]\n\n\n(1) 아래의 dictionary를 이용하여 data의 국가이름을 대륙이름으로 바꾸라.\n\ncontinent_dict = {\n    'Asia': ['Afghanistan', 'Japan', 'Macau', 'Chinese Taipei', 'Indonesia', 'Korea Republic', 'Kazakhstan', 'Kyrgyzstan', 'Bhutan', 'Philippines', 'Syria', 'China PR', 'Oman', 'Guam', 'Vietnam', 'Jordan', 'Palestine', 'Malaysia', 'Hong Kong', 'Korea DPR', 'Lebanon', 'Uzbekistan', 'India','Iraq', 'Iran', 'Saudi Arabia', 'United Arab Emirates','Australia'],\n    'Europe': ['Portugal', 'Germany', 'Belgium', 'Netherlands', 'Croatia', 'Spain', 'Austria', 'Italy', 'France', 'Serbia', 'England', 'Poland', 'Ukraine', 'Wales', 'Scotland', 'Czech Republic', 'Slovakia', 'Romania', 'Bosnia and Herzegovina', 'Republic of Ireland', 'Norway', 'Sweden', 'Bulgaria', 'Lithuania', 'Estonia', 'Latvia', 'Liechtenstein','Albania','Denmark','Finland','Greece','Hungary','Iceland','Luxembourg','Northern Ireland','Slovenia','Switzerland','Andorra','Azerbaijan','Belarus','Cyprus','Faroe Islands','Georgia','Kosovo','Malta','Moldova','Montenegro','North Macedonia','Armenia','Gibraltar','Russia','Turkey','Israel'],\n    'South America': ['Uruguay', 'Argentina', 'Brazil', 'Chile', 'Colombia', 'Ecuador', 'Paraguay', 'Venezuela', 'Suriname', 'Bolivia','Peru','Guyana'],\n    'Africa': ['Egypt', \"Côte d'Ivoire\", 'Senegal', 'Morocco', 'Ghana', 'Algeria', 'Guinea', 'Mali', 'Congo DR', 'Liberia', 'Cameroon', 'Tunisia', 'Comoros', 'Kenya', 'South Africa', 'Zimbabwe', 'Madagascar', 'Mozambique', 'Equatorial Guinea', 'Congo', 'Burundi', 'Grenada', 'Thailand', 'Togo', 'Sudan', 'Mauritania','Guinea Bissau','Libya','Nigeria','Zambia','Angola','Benin','Burkina Faso','Cape Verde Islands','Central African Republic','Chad','Eritrea','Gabon','Gambia','Mauritius','Namibia','Rwanda','Sierra Leone','South Sudan','São Tomé e Príncipe','Uganda','Niger'],\n    'North and Central America': ['Antigua and Barbuda', 'Barbados', 'Belize', 'Bermuda', 'Canada', 'Costa Rica', 'Cuba', 'Curacao', 'Dominican Republic', 'El Salvador', 'Guatemala', 'Haiti', 'Honduras', 'Jamaica', 'Mexico', 'Montserrat', 'Panama', 'Puerto Rico', 'Saint Kitts and Nevis', 'Saint Lucia', 'Trinidad and Tobago', 'United States'],\n    'Oceania': ['New Zealand', 'Fiji', 'Papua New Guinea','New Caledonia'],\n}\n\n바뀐 data의 처음 5개의 출력결과는 아래와 같다.\n[['Bruno Fernandes', 'Europe', 88],\n ['L. Goretzka', 'Europe', 87],\n ['L. Suárez', 'South America', 88],\n ['K. De Bruyne', 'Europe', 91],\n ['M. Acuña', 'South America', 84]]\n(풀이)\n\ndata2 = [\n    [name,continent,overall] \\\n    for name,nationality,overall in data \\\n    for continent in continent_dict \\\n    if nationality in continent_dict[continent]\n]\ndata2[:5]\n\n[['Bruno Fernandes', 'Europe', 88],\n ['L. Goretzka', 'Europe', 87],\n ['L. Suárez', 'South America', 88],\n ['K. De Bruyne', 'Europe', 91],\n ['M. Acuña', 'South America', 84]]\n\n\n(2) 능력치가 80 보다 큰 선수들은 대륙별로 몇명의 선수가 있는가? count하라.\n\n# 답\n# {'South America': 71,\n#  'Africa': 21,\n#  'North and Central America': 8,\n#  'Europe': 272,\n#  'Asia': 1}\n\n(풀이)\n\nlst = [continent for _,continent,overall in data2 if overall&gt;80]\n\n\n{s:lst.count(s) for s in set(lst)}\n\n{'Africa': 21,\n 'North and Central America': 8,\n 'Europe': 272,\n 'South America': 71,\n 'Asia': 1}"
  },
  {
    "objectID": "posts/QuizSample.html",
    "href": "posts/QuizSample.html",
    "title": "A0: Quiz 1 (예상문제)",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n\n\n\n\nNote\n\n\n\n\n이 문항은 예시일 뿐이며, 본 문항들이 그대로 시험에 출제되지는 않음.\n일부문항은 숫자를 바꿔서 출제되거나 그대로 출제될 수 있음.\n일부문항은 모범답안이 제시되어 있음. (참고용으로..)\n예상문제를 풀기 어려운 경우 질문가능함 (힌트를 주거나 풀이를 알려줄 수 있음, 혹은 학생이 풀이한 답안을 검토하고 피드백 줄 수 있음)\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n모든 문항은 부분점수 없음. (예를들어 문제1-(1)의 경우 p까지는 생성하였지만 그래프를 그리지 못한 경우 0점처리함)\n일부문항은 부분문제를 모두 맞출경우만 정답으로 인정함. 예를들면 문제2와 같은 경우.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp등)은 채점하지 않음. 즉 0점 처리함. 제출방법 모르면 물어볼것!\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n\n\n\n\n문제 1.\n(1) \\(0&lt;p&lt;1\\) 인 범위에서 \\(p(1-p)\\)의 그래프를 그려라. – 5점\n(풀이)\n\np = np.linspace(1/100,1,100)[:-1]\np\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n\nplt.plot(p,p*(1-p))\n\n\n\n\n\n\n\n\n(2) \\(0&lt;p&lt;1\\) 의 범위에서 \\(p(1-p)\\)를 최대로 만드는 \\(p\\) 값을 파이썬을 이용하여 계산하라. – 5점\n\n# 힌트: 손으로 풀어보면 답은 0.5라는건 알겠죠? \n\n(3) 아래와 같이 50개의 숫자를 나열한 배열 \\({\\bf x}=[x_1,x_2,\\dots,x_n]\\)을 상상하자. – 10점\n\nx = np.array([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n              0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n              0, 0, 0, 0, 1, 0])\nx\n\narray([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0])\n\n\n위와 같은 \\(x_i\\)에 대하여 아래와 같은 함수 \\(l(p)\\)를 정의하고 \\(0&lt;p&lt;1\\)에서의 \\(l(p)\\)의 그래프를 그려라.\n\\[l(p)=\\sum_{i=1}^nx_i \\log p +\\left(n-\\sum_{i=1}^{n}x_i \\right)\\log(1-p)\\]\nhint\n\n\\(n=50\\) 으로 설정해야겠죠?\n\\(\\sum_{i=1}^{50}x_i=s\\)를 미리 계산하고 \\(s\\)를 이용하여 함수 \\(l(p)=s\\log p  + (50-s)\\log(1-p)\\) 를 정의하세요.\n\n\n# 시각화예시\n\n/tmp/ipykernel_74601/1320384517.py:2: RuntimeWarning: divide by zero encountered in log\n  return np.log(p)*np.sum(x) + (50-np.sum(x))*np.log(1-p)\n\n\n\n\n\n\n\n\n\n(4) 파이썬을 이용하여 아래를 근사계산하라. – 5점\n\\[\\lim_{h \\to 0}\\frac{l(0.32+h)-l(0.32)}{h}\\]\n\n# 힌트: 답은 0이에요\n\n(5) \\(0&lt;p&lt;1\\)의 범위에서 \\(l(p)\\)를 최대로 만드는 \\(p\\)의 값을 구하라. 즉 \\(\\underset{p}{\\operatorname{argmax}} l(p)\\)를 구하라. – 5점\n\n# 힌트: 답은 0.32\n\n\n\n\n\n\n\nWarning\n\n\n\n1-(5)에서 문제 오류가 있어 수정했습니다.\n\n수정전: “\\(0&lt;p&lt;1\\)” 의 범위에서 \\(l(p)\\)를 최대값을 구하라.”\n수정후: “\\(0&lt;p&lt;1\\)” 의 범위에서 \\(l(p)\\)를 최대로 만드는 \\(p\\)의 값을 구하라. 즉 \\(\\underset{p}{\\operatorname{argmax}} l(p)\\)를 구하라.”\n\n\n\n\n\n문제 2.\n\n모두 맞출 경우만 정답으로 인정\n\n(1) 아래의 list에서 마지막 원소를 뽑는 코드를 작성하라.\n\nlst = [11,22,33,44,55] \nlst \n\n[11, 22, 33, 44, 55]\n\n\n(풀이)\n\nlst[-1]\n\n55\n\n\n(2) 아래의 list에서 마지막 2개의 원소를 제외하고 뽑는 코드를 작성하라.\n\nlst = [11,22,33,44,55]\nlst\n\n[11, 22, 33, 44, 55]\n\n\n(풀이)\n\nlst[:-2]\n\n[11, 22, 33]\n\n\n(3) lambda를 이용하여 \\(f(x)=x^2+1\\)에 대응하는 함수를 선언하라.\n(4) 아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(50)\nx\n\narray([0.81768226, 0.04953212, 0.83868626, 0.61977707, 0.12254052,\n       0.11712779, 0.8795562 , 0.97941543, 0.90986893, 0.96667407,\n       0.59164493, 0.84014933, 0.89714578, 0.76530684, 0.40073371,\n       0.38061141, 0.4305124 , 0.40991094, 0.00972398, 0.59732079,\n       0.8852783 , 0.31328711, 0.6141936 , 0.36838019, 0.08044368,\n       0.47142422, 0.43324944, 0.22441988, 0.01174913, 0.91587271,\n       0.88325068, 0.32707103, 0.45758847, 0.55495369, 0.55845013,\n       0.75018778, 0.29947949, 0.85888413, 0.60465549, 0.00651133,\n       0.80605888, 0.06988897, 0.76763953, 0.72438164, 0.06247252,\n       0.97571034, 0.76681327, 0.12138996, 0.14946193, 0.08540348])\n\n\n생성된 값의 최대값을 출력하는 파이썬 코드를 작성하라.\n\n# 힌트: 답은 0.9794154308159254\n\n(5) 아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(50)\nx\n\narray([0.81768226, 0.04953212, 0.83868626, 0.61977707, 0.12254052,\n       0.11712779, 0.8795562 , 0.97941543, 0.90986893, 0.96667407,\n       0.59164493, 0.84014933, 0.89714578, 0.76530684, 0.40073371,\n       0.38061141, 0.4305124 , 0.40991094, 0.00972398, 0.59732079,\n       0.8852783 , 0.31328711, 0.6141936 , 0.36838019, 0.08044368,\n       0.47142422, 0.43324944, 0.22441988, 0.01174913, 0.91587271,\n       0.88325068, 0.32707103, 0.45758847, 0.55495369, 0.55845013,\n       0.75018778, 0.29947949, 0.85888413, 0.60465549, 0.00651133,\n       0.80605888, 0.06988897, 0.76763953, 0.72438164, 0.06247252,\n       0.97571034, 0.76681327, 0.12138996, 0.14946193, 0.08540348])\n\n\n생성된 값중 0.6와 가장 가까운 값을 출력하는 파이썬 코드를 작성하라.\n\n# 힌트: 답은 0.5973207921703583\n\n\n\n문제 3.\n(1) \\(\\frac{\\pi}{2}&lt;x&lt;\\frac{3}{2}\\pi\\) 에서 \\(f(x)=\\sin(\\frac{3}{2}x)\\) 와 \\(g(x)=\\cos(2x)\\sin(5x)\\) 의 교점의 수를 구하여라.\n(풀이)\n\nx = np.linspace(np.pi/2,3/2*np.pi,100)[:-1]\nx\n\narray([1.57079633, 1.60252959, 1.63426285, 1.6659961 , 1.69772936,\n       1.72946262, 1.76119588, 1.79292914, 1.8246624 , 1.85639566,\n       1.88812892, 1.91986218, 1.95159544, 1.9833287 , 2.01506195,\n       2.04679521, 2.07852847, 2.11026173, 2.14199499, 2.17372825,\n       2.20546151, 2.23719477, 2.26892803, 2.30066129, 2.33239455,\n       2.3641278 , 2.39586106, 2.42759432, 2.45932758, 2.49106084,\n       2.5227941 , 2.55452736, 2.58626062, 2.61799388, 2.64972714,\n       2.6814604 , 2.71319366, 2.74492691, 2.77666017, 2.80839343,\n       2.84012669, 2.87185995, 2.90359321, 2.93532647, 2.96705973,\n       2.99879299, 3.03052625, 3.06225951, 3.09399276, 3.12572602,\n       3.15745928, 3.18919254, 3.2209258 , 3.25265906, 3.28439232,\n       3.31612558, 3.34785884, 3.3795921 , 3.41132536, 3.44305862,\n       3.47479187, 3.50652513, 3.53825839, 3.56999165, 3.60172491,\n       3.63345817, 3.66519143, 3.69692469, 3.72865795, 3.76039121,\n       3.79212447, 3.82385772, 3.85559098, 3.88732424, 3.9190575 ,\n       3.95079076, 3.98252402, 4.01425728, 4.04599054, 4.0777238 ,\n       4.10945706, 4.14119032, 4.17292358, 4.20465683, 4.23639009,\n       4.26812335, 4.29985661, 4.33158987, 4.36332313, 4.39505639,\n       4.42678965, 4.45852291, 4.49025617, 4.52198943, 4.55372268,\n       4.58545594, 4.6171892 , 4.64892246, 4.68065572])\n\n\n\nplt.plot(x,np.sin(1.5*x))\nplt.plot(x,np.cos(2*x)*np.sin(5*x))\n\n\n\n\n\n\n\n\n\n# 답 3개\n\n(2) \\(a_n=\\frac{1}{n(n+1)}\\) 일때 \\(S_1,\\dots,S_{20}\\)을 구하여라."
  },
  {
    "objectID": "posts/15wk-2-fin.html",
    "href": "posts/15wk-2-fin.html",
    "title": "15wk-2: 기말고사",
    "section": "",
    "text": "1. 공든 탑 쌓기 I\n규빈과 다호가 블록을 사용하여 탑을 쌓는다. 규빈은 한 번에 2개의 블록을 사용하여 탑을 쌓지만, 실수로 탑을 무너뜨릴 확률이 50%이다. 한 번 무너진 탑은 다시 처음부터 쌓아야 한다. 다호는 한 번에 1개의 블록을 사용하여 신중하게 탑을 쌓는다. 다호는 천천히 탑을 쌓지만 실수로 탑을 무너뜨리지 않는다.\n(1) 규빈과 다호가 10층 높이의 탑을 먼저 쌓는 내기를 하였다고 하자. 탑을 쌓을수 있는 기회는 10회 (=10-rounds) 준다. 승리조건은 각 라운드가 끝난 이후 정산하며 양쪽이 같은 round에 탑을 완성 시킨 경우나 양쪽이 제한횟수내에 모두 탑을 쌓지 못한경우면 무승부로 처리한다. 이 내기는 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라.\n(2) 규빈은 게임을 반복하다가 본인이 불리하다는 사실을 알았다. 규빈은 다호의 탑을 관찰하며, 다호의 탑이 5층 이상인 경우 다호의 탑을 공격하기로 결정했다. 공격 성공률은 60% 이며 공격이 성공시 다호의 탑은 모두 무너진다. (단, 공격시 규빈은 탑을 쌓을 수 없다) 규빈과 다호에게 탑을 쌓거나 상대방의 탑을 공격할 기회를 20회 준다. 즉 20-rounds 동안 게임을 진행한다. 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라.\n(3) 다호는 규빈의 공격으로 공든탑이 무너지자 참을수가 없어져 결국 울음을 터뜨렸다. “울음”의 효과는 아래와 같다.\n\n현재 탑의 높이와 상관없이 다호의 승리 (규빈은 다호가 울면 전의를 상실하고 게임을 포기한다)\n\n“울음”은 다호의 탑이 무너진 경우 \\(p_{으앙}\\) 의 확률로 발생한다. 다호가 유리해지기 시작하는 \\(p_{으앙}\\) 는 얼마인가? (소수점 첫번째 자리까지의 정확도만 요구함)\n\n울음이벤트의 랜덤발생을 제외하고 전체 게임 상황은 (2)의 게임이 유지된다. 즉 게임은 20-rounds 동안 10층높이의 탑을 쌓는 규칙으로 진행되며 규빈은 다호의탑이 5층이상인 경우 다호의 탑을 공격한다. 공격성공률은 60%이며 공격이 성공시 다호의 탑은 모두 무너진다.\n\n(4) 다호가 울어버리자 규빈은 공격을 하지 않고 수련을 반복하여 다호를 이기기로 결심하였다. 규빈은 매회 탑을 쌓는 연습을 몰래하였으며 연습을 통해 탑을 쌓을 확률을 5%씩 증가시켰다. 예를들면 아래의 표와 같다.\n\n\n\n\n\n\n\n\n\n\n\nround\n플레이어\n행동\n탑쌓기성공확률\n상태\n탑의높이\n\n\n\n\n1\n규빈\n탑쌓기\n0.50\n탑쌓기성공\n2\n\n\n1\n규빈\n수련하기\n(0.50 \\(\\to\\)) 0.55\n수련결과 탑쌓는 확률 상승\n2\n\n\n1\n다호\n탑쌓기\n1.0\n탑쌓기성공\n1\n\n\n2\n규빈\n탑쌓기\n0.55\n탑쌓기성공\n4\n\n\n2\n규빈\n수련하기\n(0.55 \\(\\to\\)) 0.60\n수련결과 탑쌓는 확률 상승\n4\n\n\n2\n다호\n탑쌓기\n1.0\n탑쌓기성공\n2\n\n\n\n먼저 \\(n\\) 층 높이의 탑을 내기를 한다고 하자. 규빈이 유리해지기 시작하는 \\(n\\) 은 얼마인가?\n(5) 다호는 수련을 통해 매회 블럭쌓는 실력이 향상되는 규빈과 (4에서 구한) \\(n\\)층 높이의 탑을 쌓는 내기를 반복하였다. 반복되는 내기에서 다호는 본인이 조금 불리한것 같다는 생각을 하였다. 그래서 규빈이 탑을 쌓는것을 지켜보다가 규빈이 탑을 성공할때마다 애교를 부리기로 결심했다.\n\n상황1: 규빈이 2개 블럭 쌓기에 성공하는 것을 관찰한다. \\(\\to\\) “그 블럭 나한테 주면 안돼?” 라고 애교를 부린다. \\(\\to\\) 애교가 성공하면 다호의 탑에 2개의 블록이 추가된다. 애교가 실패하면 규빈탑에 그대로 2개의 블럭이 추가되고, 다호의 탑에는 블럭이 추가되지 않는다.\n상황2: 규빈이 2개 블럭 쌓기에 실패하는 것을 관찰한다. \\(\\to\\) 애교를 부릴 이유가 없어졌다. 묵묵히 하나의 블럭을 차분하게 쌓는다.\n\n따라서 발생가능한 모든 경우의 수는 아래와 같다.\n\n\n\n규빈이 탑쌓기 성공\n애교시도\n애교성공\n규빈탑높이\n다호탑높이\n\n\n\n\nTrue\nTrue\nTrue\n+0\n+2\n\n\nTrue\nTrue\nFalse\n+2\n+0\n\n\nFalse\nFalse\nNone\n+0\n+1\n\n\n\n아래는 5층 높이의 탑을 먼저 쌓는 조건을 round 4까지만 진행한다고 할때 발생가능한 게임양상의 예시이다.\n# 경우1 – 다호가 승리\n\n\n\n\n\n\n\n\n\n\n\nround\n플레이어\n행동\n상태\n탑의높이들 (수련규빈, 애교다호)\n승리조건\n\n\n\n\n1\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n2,0\n양쪽 모두 승리조건 만족X\n\n\n1\n다호\n애교\n애교성공\n0,2\n양팀 모두 승리조건 만족X\n\n\n2\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기실패\n0,2\n양쪽 모두 승리조건 만족X\n\n\n2\n다호\n탑쌓기(애교대상없음)\n탑쌓기성공\n0,3\n양쪽 모두 승리조건 만족X\n\n\n3\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n2,3\n양쪽 모두 승리조건 만족X\n\n\n3\n다호\n애교\n애교성공\n0,5\n다호가 승리조건 만족\n\n\n\n다호의 승리\n#\n# 경우2 – 규빈이 승리하는듯 보였지만 결국 다호가 승리\n\n\n\n\n\n\n\n\n\n\n\nround\n플레이어\n행동\n상태\n탑의높이들 (수련규빈, 애교다호)\n승리조건\n\n\n\n\n1\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n2,0\n양쪽 모두 승리조건 만족X\n\n\n1\n다호\n애교\n애교실패\n2,0\n양팀 모두 승리조건 만족X\n\n\n2\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n4,0\n양쪽 모두 승리조건 만족X\n\n\n2\n다호\n애교\n애교성공\n2,2\n양쪽 모두 승리조건 만족X\n\n\n3\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n4,2\n양쪽 모두 승리조건 만족X\n\n\n3\n다호\n애교\n애교성공\n2,4\n양쪽 모두 승리조건 만족X\n\n\n4\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n4,4\n양쪽 모두 승리조건 만족X\n\n\n4\n다호\n애교\n애교실패\n4,4\n양쪽 모두 승리조건 만족X\n\n\n5\n규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n6,4\n규빈이 승리조건 만족\n\n\n5\n다호\n애교\n애교성공\n4,6\n다호가 승리조건 만족\n\n\n\n최종적으로 다호의 승리\n#\n라운드 제한없이 \\(n\\)층의 높이를 먼저 쌓는 내기를 할때, 애교의 성공확률 \\(p_{아잉}\\) 가 얼마 이상이면 다호의 승률이 80% 이상이 되는가? (Note: \\(p_{아잉}=1\\) 이면 다호의 승률은 100%이다. 즉 규빈은 이길 수 없다.)\n\n\n2. 공든탑쌓기 II\n하니는 규빈과 다호가 탑을 쌓는 과정을 유심히 바라보다가 게임을 하나 만들었다. 게임에는 다음과 같은 4명의 캐릭터가 등장한다.\n\n공격규빈: 문제 (2)에서의 규빈\n울보다호: 문제 (3)에서의 다호 // \\(p_{으앙}\\)의 확률로 울음\n수련규빈: 문제 (4)에서의 규빈\n애교다호: 문제 (5)에서의 다호 // \\(p_{애교}\\)의 확률로 매회 애교\n\n[수련규빈, 공격규빈] 이 한팀으로, [울보다호, 애교다호] 가 한팀으로 구성되었다. 게임은 수련규빈, 울보다호, 공격규빈, 애교다호 순서로 번갈아가며 탑을 쌓는 방식으로 진행한다. 수련규빈, 울보다호, 공격규빈, 애교다호의 탑중 가장 빨리 탑을 완성시킨 캐릭터가 포함된 팀이 최종승리한다. 승리조건은 각 라운드가 끝난 이후 정산하며 양팀이 같은 round에 탑을 완성 시킨 경우나 양팀이 제한횟수내에 모두 탑을 쌓지 못한경우면 팀의 탑높이를 합산하여 승자를 결정한다. 합산점수도 동일하다면 무승부 처리한다. 규칙의 세부적인 내용은 아래와 같다.\n\n공격규빈과 애교다호는 1라운드에는 탑을 공격하거나 뺏지 않으며 2라운드부터 상대팀 중 한명의 탑을 무너뜨리거나 뺏을 수 있다.\n울보다호가 울 경우 게임은 즉시 중지되며 다호팀이 승리한다.\n팀의 탑의 높이를 합산할시, 최종목표타워 높이보다 높은 블록은 합산하지 않는다. (즉 5층을 먼저 쌓는 내기라면 6층을 쌓더라도 5층으로 계산한다.)\n\n5층 높이의 탑을 먼저 쌓는 조건을 round4까지만 진행한다고 할때 발생가능한 게임예시는 아래와 같다.\n# 경우1 – 수련규빈이 먼저 탑을 완성하며 규빈팀 최종승리\n\n\n\n\n\n\n\n\n\n\n\nround\n플레이어\n행동\n상태\n탑의높이들 ([수련규빈,공격규빈],[울보다호,애교다호])\n승리조건\n\n\n\n\n1\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[2,0], [0,0]\n양팀 모두 승리조건 만족X\n\n\n1\n울보다호\n탑쌓기\n탑쌓기성공\n[2,0], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n공격규빈\n탑쌓기\n탑쌓기실패\n[2,0], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n애교다호\n탑쌓기\n탑쌓기성공\n[2,0], [1,1]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n2\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[4,0], [1,1]\n양팀 모두 승리조건 만족X\n\n\n2\n울보다호\n탑쌓기\n탑쌓기성공\n[4,0], [2,1]\n양팀 모두 승리조건 만족X\n\n\n2\n공격규빈\n탑쌓기\n탑쌓기성공\n[4,2], [2,1]\n양팀 모두 승리조건 만족X\n\n\n2\n애교다호\n탑쌓기\n탑쌓기성공\n[4,2], [2,2]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n3\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[6,2], [2,2]\n규빈팀 승리조건 만족\n\n\n3\n울보다호\n탑쌓기\n탑쌓기성공\n[6,2], [3,2]\n규빈팀 승리조건 만족\n\n\n3\n공격규빈\n탑쌓기\n탑쌓기성공\n[6,4], [3,2]\n규빈팀 승리조건 만족\n\n\n3\n애교다호\n탑쌓기\n탑쌓기성공\n[6,4], [3,3]\n규빈팀 승리조건 만족\n\n\n\n수련규빈이 6층을 완성하여 목표치 5층보다 높으므로 규빈팀 최종송리\n#\n# 경우2 – 애교다호가 수련규빈의 완성을 가로채며 다호팀 최종승리\n\n\n\n\n\n\n\n\n\n\n\nround\n플레이어\n행동\n상태\n탑의높이들 ([수련규빈,공격규빈],[울보다호,애교다호])\n승리조건\n\n\n\n\n1\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[2,0], [0,0]\n양팀 모두 승리조건 만족X\n\n\n1\n울보다호\n탑쌓기\n탑쌓기성공\n[2,0], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n공격규빈\n탑쌓기\n탑쌓기실패\n[2,0], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n애교다호\n탑쌓기\n탑쌓기성공\n[2,0], [1,1]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n2\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[4,0], [1,1]\n양팀 모두 승리조건 만족X\n\n\n2\n울보다호\n탑쌓기\n탑쌓기성공\n[4,0], [2,1]\n양팀 모두 승리조건 만족X\n\n\n2\n공격규빈\n울보다호공격\n공격성공,울음발동X\n[4,0], [0,1]\n양팀 모두 승리조건 만족X\n\n\n2\n애교다호\n수련규빈에게 애교\n애교성공\n[2,0], [0,3]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n3\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[4,0], [0,3]\n양팀 모두 승리조건 만족X\n\n\n3\n울보다호\n탑쌓기\n탑쌓기성공\n[4,0], [1,3]\n양팀 모두 승리조건 만족X\n\n\n3\n공격규빈\n애교다호공격\n공격실패\n[4,0], [1,3]\n양팀 모두 승리조건 만족X\n\n\n3\n애교다호\n수련규빈에게 애교\n애교실패\n[4,0], [1,3]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n4\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[6,0], [1,3]\n규빈팀 승리조건 만족\n\n\n4\n울보다호\n탑쌓기\n탑쌓기성공\n[6,0], [2,3]\n규빈팀 승리조건 만족\n\n\n4\n공격규빈\n애교다호공격\n공격실패\n[6,0], [2,3]\n규빈팀 승리조건 만족\n\n\n4\n애교다호\n수련규빈에게 애교\n애교성공\n[4,0], [2,5]\n다호팀 승리조건 만족\n\n\n\n수련규빈의 탑을 애교다호가 스틸하며 4라운드에서 다호팀이 최종승리\n#\n# 경우3 – 울음이 발동되며 다호팀 승리\n\n\n\n\n\n\n\n\n\n\n\nround\n플레이어\n행동\n상태\n탑의높이들 ([수련규빈,공격규빈],[울보다호,애교다호])\n승리조건\n\n\n\n\n1\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[2,0], [0,0]\n양팀 모두 승리조건 만족X\n\n\n1\n울보다호\n탑쌓기\n탑쌓기성공\n[2,0], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n공격규빈\n탑쌓기\n탑쌓기실패\n[2,0], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n애교다호\n탑쌓기\n탑쌓기성공\n[2,0], [1,1]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n2\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[4,0], [1,1]\n양팀 모두 승리조건 만족X\n\n\n2\n울보다호\n탑쌓기\n탑쌓기성공\n[4,0], [2,1]\n양팀 모두 승리조건 만족X\n\n\n2\n공격규빈\n울보다호공격\n공격성공,울음발동X\n[4,0], [0,1]\n양팀 모두 승리조건 만족X\n\n\n2\n애교다호\n수련규빈에게 애교\n애교성공\n[2,0], [0,3]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n3\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기실패\n[0,0], [0,3]\n양팀 모두 승리조건 만족X\n\n\n3\n울보다호\n탑쌓기\n탑쌓기성공\n[0,0], [1,3]\n양팀 모두 승리조건 만족X\n\n\n3\n공격규빈\n애교다호공격\n공격실패\n[0,0], [1,3]\n양팀 모두 승리조건 만족X\n\n\n3\n애교다호\n탑쌓기(애교대상없음)1\n탑쌓기성공\n[0,0], [1,4]\n양팀 모두 승리조건 만족X\n\n\n-\n-\n-\n-\n-\n\n\n\n4\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[2,0], [1,4]\n양팀 모두 승리조건 만족X\n\n\n4\n울보다호\n탑쌓기\n탑쌓기성공\n[2,0], [2,4]\n양팀 모두 승리조건 만족X\n\n\n4\n공격규빈\n울보다호공격\n공격성공 \\(\\to\\) 울음발동\n[2,0], [0,4]\n양팀 모두 승리조건 만족X\n\n\n\n1 라운드3에서 탑쌓기에 성공한 규빈이 없으므로 뺏을게 없다울음이 발동되며 경기종료: 다호팀 승리\n#\n# 경우4 – 수련규빈과 애교다호가 동시에 성공하며 점수합산으로 승자결정, 점수합산 결과 다호팀 승리.\n\n\n\n\n\n\n\n\n\n\n\nround\n플레이어\n행동\n상태\n탑의높이들 ([수련규빈,공격규빈],[울보다호,애교다호])\n승리조건\n\n\n\n\n1\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[2,0], [0,0]\n양팀 모두 승리조건 만족X\n\n\n1\n울보다호\n탑쌓기\n탑쌓기성공\n[2,0], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n공격규빈\n탑쌓기\n탑쌓기성공\n[2,2], [1,0]\n양팀 모두 승리조건 만족X\n\n\n1\n애교다호\n탑쌓기\n탑쌓기성공\n[2,2], [1,1]\n양팀 모두 승리조건 만족X\n\n\n2\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[4,2], [1,1]\n양팀 모두 승리조건 만족X\n\n\n2\n울보다호\n탑쌓기\n탑쌓기성공\n[4,2], [2,1]\n양팀 모두 승리조건 만족X\n\n\n2\n공격규빈\n탑쌓기\n탑쌓기성공\n[4,4], [2,1]\n양팀 모두 승리조건 만족X\n\n\n2\n애교다호\n공격규빈에게 애교\n애교성공\n[4,2], [2,3]\n양팀 모두 승리조건 만족X\n\n\n3\n수련규빈\n탑쌓기 \\(\\to\\) 수련하기\n탑쌓기성공\n[6,2], [2,3]\n규빈팀 승리조건 만족\n\n\n3\n울보다호\n탑쌓기\n탑쌓기성공\n[6,2], [3,3]\n규빈팀 승리조건 만족\n\n\n3\n공격규빈\n탑쌓기\n탑쌓기성공\n[6,4], [3,3]\n규빈팀 승리조건 만족\n\n\n3\n애교다호\n공격규빈에게 애교\n탑쌓기성공\n[6,2], [3,5]\n양팀 모두 승리조건 만족\n\n\n\n양팀 모두 승리 조건 만족, 규빈팀 합산 = (6-1)+2 = 7, 다호팀 합산 = 3+5 = 8 이므로 다호팀 승리\n#\n(1) 공격규빈은 2라운드부터 항상 울보다호를 공격하는 전략을 선택한다고 하자. 20라운드 동안 20층높이의 탑을 먼저 쌓는 내기를 할때 유리한 팀은 어느쪽인가? 시뮬레이션을 바탕으로 근거를 설명하라.\n(2) 공격규빈은 2라운드부터 항상 애교다호를 공격하는 전략을 선택한다고 하자. 20라운드 동안 20층높이의 탑을 먼저 쌓는 내기를 할때 유리한 팀은 어느쪽인가? 시뮬레이션을 바탕으로 근거를 설명하라.\n\n\n3. 14wk-2 강의내용"
  },
  {
    "objectID": "posts/08wk-2.html",
    "href": "posts/08wk-2.html",
    "title": "08wk-2: 랜덤모듈을 이용한 시뮬레이션 문제 예시",
    "section": "",
    "text": "0. break 와 while 이해\n(1) 아래의 예시를 보고 break 의 사용방법을 파악하라.\n\n# 주어진 문자열\nword = \"hello\"\n\n# 문자열에서 첫 번째 모음을 찾는 코드\nfor letter in word:\n    if letter in \"aeiou\":  # 현재 문제가 모음인지 확인\n        print(f\"첫번째 모음은: {letter}\")\n        break  # 첫번째 모음을 찾으면 반복을 종료 \n\n첫번째 모음은: e\n\n\n(2) 아래의 예시를 보고 while의 사용방법을 파악하라.\n\nnum = 6\n\n# 입력된 숫자의 팩토리얼을 계산\nfactorial = 1\nwhile num &gt; 0:\n    factorial = factorial*num\n    num = num - 1\n\n# 계산된 팩토리얼을 출력\nprint(f\"팩토리얼:\", factorial)\n\n팩토리얼: 720\n\n\n\nnum = 6\n\n# 입력된 숫자의 팩토리얼을 계산\nfactorial = 1\nwhile True:\n    factorial = factorial*num\n    num = num - 1\n    if num == 0: \n        break \n        \n# 계산된 팩토리얼을 출력\nprint(f\"팩토리얼:\", factorial)\n\n팩토리얼: 720\n\n\n\n\n1. 가위바위보 하나빼기\n(1) 보람과 서연은 “가위바위보 하나빼기” 게임을 하려고 한다. 보람은 현재 [‘가위’,‘바위’] 를 가지고 있으며 서연은 현재 [‘가위’,‘보’] 를 가지고 있다. 보람과 서연이 가지고 있는 패 중 랜덤으로 하나를 낸다고 하자. 보람과 서연중 누가 더 유리한가? 1000번의 시뮬레이션을 통하여 검증하고 결과를 해석하라.\n\n\n2. 공든탑 쌓기\n규빈과 다호가 블록을 사용하여 탑을 쌓는다. 규빈은 한 번에 2개의 블록을 사용하여 탑을 쌓지만, 실수로 탑을 무너뜨릴 확률이 50%이다. 한 번 무너진 탑은 다시 처음부터 쌓아야 한다. 다호는 한 번에 1개의 블록을 사용하여 신중하게 탑을 쌓는다. 다호는 천천히 탑을 쌓지만 실수로 탑을 무너뜨리지 않는다.\n(1) 2층 높이의 탑을 쌓을 때, 규빈과 다호 중 누가 먼저 탑을 올릴 확률이 높을까? 1000번의 시뮬레이션을 통해 결과를 확인해보라.\n\n\n3. 규빈과 하니의 내기\n(1) 앞면과 뒷면이 나올 확률이 각각 1/2인 동전을 생각하자. 하니와 규빈은 이 동전을 연속으로 던져서 아래와 같은 룰을 정하여 내기를 하였다.\n\n동전을 연속으로 반복하여 던진다. 최근 2회의 결과가 (뒷면,앞면) 이 나오면 하니의 승리\n동전을 연속으로 반복하여 던진다. 최근 2회의 결과가 (뒷면,뒷면) 이 나오면 규빈의 승리\n\n이 내기는 하니가 유리한가? 규빈이 유리한가? 시뮬레이션을 통해 검증하라.\n\n힌트: 똑같이 유리함\n\n(2) 앞면과 뒷면이 나올 확률이 각각 1/2인 동전을 생각하자. 하니와 규빈은 이 동전을 연속으로 던져서 아래와 같은 룰을 정하여 내기를 하였다.\n\n동전을 연속으로 반복하여 던진다. 최근 2회의 결과가 (앞면,뒷면) 이 나오면 하니의 승리\n동전을 연속으로 반복하여 던진다. 최근 2회의 결과가 (뒷면,뒷면) 이 나오면 규빈의 승리\n\n이 내기는 하니가 유리한가? 규빈이 유리한가? 시뮬레이션을 통해 검증하고 이유를 설명하라.\n\n힌트: 하니가 유리함"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/10wk-1.html",
    "href": "posts/10wk-1.html",
    "title": "10wk-1: 퀴즈6",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport urllib.request\n\n\n1. MNIST – 40점\n\n모두 맞출경우만 정답으로 인정\n\n아래의 코드를 실행하여 MNIST 자료를 불러오라.\n\n# URL 설정\nurl = 'https://github.com/guebin/PP2023/raw/main/posts/02_DataScience/mnist.npz'\n\n# URL에서 파일 다운로드\nurllib.request.urlretrieve(url, './mnist.npz')\n\n# 데이터 로드\ndata = np.load('./mnist.npz')\nxtrain, ytrain, xtest, ytest = data['x_train']/255, data['y_train'], data['x_test']/255, data['y_test']\n\n# mnist.npz 삭제\n!rm mnist.npz\n\n(1) xtrain, xtest를 합쳐서 shape이 (70000,28,28) 인 numpy array를 생성하고 이것을 X에 저장하라.\n(풀이)\n\nX = np.concatenate([xtrain,xtest])\ny = np.concatenate([ytrain,ytest])\n\n(2) 아래의 코드에 43052대신 본인 학번 끝의 5자리를 입력하여 (3,3) 크기의 난수를 생성하라.\n\nnp.random.seed(43052)\nnp.random.binomial(n=1,p=0.5,size=(3,3))\n\narray([[1, 0, 1],\n       [1, 0, 0],\n       [1, 1, 1]])\n\n\n위에서 생성된 난수를 저장된 X의 평균이미지를 concat하여 시각화하라.\n\n주의: 시각화하는 이미지는 (84,84) 의 shape을 가지고 있어야 한다.\n\n(풀이)\n\nX0 = X[y==0].mean(axis=0)\nX1 = X[y==1].mean(axis=0)\n\n\nsolution = np.concatenate(\n    [np.concatenate([X1,X0,X1],axis=1),\n     np.concatenate([X1,X0,X0],axis=1),\n     np.concatenate([X1,X1,X1],axis=1)]\n)\nplt.imshow(solution,cmap='gray')\n\n\n\n\n\n\n\n\n\n\n2. 공든탑쌓기 – 60점\n\n(1)-(2)는 점수없음. (풀지 않아도 무방) // (3) 만 맞출경우 20점, (3)-(4) 모두 맞출경우 60점\n\n규빈과 다호가 블록을 사용하여 탑을 쌓는다. 규빈은 한 번에 2개의 블록을 사용하여 탑을 쌓지만, 실수로 탑을 무너뜨릴 확률이 50%이다. 한 번 무너진 탑은 다시 처음부터 쌓아야 한다. 다호는 한 번에 1개의 블록을 사용하여 신중하게 탑을 쌓는다. 다호는 천천히 탑을 쌓지만 실수로 탑을 무너뜨리지 않는다.\n(1) 규빈과 다호가 2층 높이의 탑을 먼저 쌓는 내기를 하였다고 하자. 탑을 쌓을수 있는 기회는 2회 준다. 이 내기는 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라. (둘이 동시에 탑을 쌓을경우 무승부로 판단한다.)\n(2) 규빈과 다호가 10층 높이의 탑을 먼저 쌓는 내기를 하였다고 하자. 탑을 쌓을수 있는 기회는 10회 준다. 이 내기는 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라. (둘이 동시에 탑을 쌓을경우 무승부로 판단한다.)\n(3) (2)와 같은 게임규칙1에서 규빈은 본인이 불리하다는 사실을 알아챘다. 규빈은 아래와 같이 전략을 수정하였다.\n1 10층높이의 탑을 먼저 쌓는 쪽이 이기며, 기회는 10번 주는 게임\n규빈탑의 높이 &lt;8 일 경우: (다호처럼) 1개의 블록만 안전하게 쌓는다. 이때 1개의 블록쌓기는 100% 확률로 성공한다.\n규빈탑의 높이 &gt;=8 일 경우: 2개의 블록을 쌓으려고 시도한다 (50%의 확률로 성공 / 50%의 확률로 실패, 실패시 규빈의 블록 높이는 0이 된다)\n\n규빈이 전략을 수정함에 따라 내기는 누가 유리해지는가? 근거를 설명하라. (둘이 동시에 탑을 쌓을경우 무승부로 판단한다.)\n\n이 문제는 시뮬레이션을 이용하여 근거를 설명하지 않아도 무방함 (해도 되고 안해도 되고..)\n\n(풀이1)\n8층까지는 동일하게 규빈,다호 하나의 블록씩 쌓음. 8층에서 규빈은 한번에 2층을 쌓으려는 도박을 시도하는데 도박이 성공한다면 승리, 실패하면 패배이므로 이 내기는 5:5로 공평하게 유리하다.\n(풀이2)\n\ndef build_tower(max_time, end_condition):\n    guebin = 0\n    daho = 0\n    for t in range(max_time): # max_time 동안 게임을 진행 \n        #--# 블록을 쌓음           \n        if guebin &lt; 8: # 규빈탑의 높이&lt;8 인 경우 규빈이 블록을 1층씩 쌓음 \n            guebin = guebin + 1 \n            daho = daho + 1 \n        else: # 규빈탑의 높이 == 8인 경우 규빈은 2개의 블록을 쌓으려는 도박을 시도\n            if np.random.rand() &lt; 0.5: # 규빈이 탑 쌓다가 실수로 무너짐\n                guebin = 0 \n                daho = daho + 1 \n            else: # 규빈이 탑을 잘 쌓음 \n                guebin = guebin + 2  \n                daho = daho + 1 \n        #--# 승패를 체크\n        if (guebin &gt;= end_condition) and (daho &gt;= end_condition):\n            result = \"무승부 (둘이 동시에 성공)\"\n            break\n        elif (guebin &gt;= end_condition) and (daho &lt; end_condition):\n            result = \"규빈승\"\n            break\n        elif (guebin &lt; end_condition) and (daho &gt;= end_condition):\n            result = \"다호승\"\n            break\n        else: \n            result = \"무승부 (둘다 쌓지 못함)\"\n    return result \n\n\nresults = [build_tower(max_time=10,end_condition=10) for i in range(1000)]\n{s:results.count(s) for s in set(results)}\n\n{'다호승': 516, '규빈승': 484}\n\n\n시뮬레이션 결과 공평하게 유리하다.\n(4) (2)와 같은 게임규칙2에서 규빈이 아래와 같이 전략을 수정한다면 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라.\n2 10층높이의 탑을 먼저 쌓는 쪽이 이기며, 기회는 10번 주는 게임\n규빈탑의 높이 &lt;2 일 경우: 2개의 블록을 쌓으려고 시도한다 (50%의 확률로 성공 / 50%의 확률로 실패, 실패시 규빈의 블록 높이는 0이 된다)\n규빈탑의 높이 &gt;=2 일 경우: (다호처럼) 1개의 블록만 안전하게 쌓는다. 이때 1개의 블록쌓기는 100% 확률로 성공한다.\n\n\ndef build_tower(max_time, end_condition):\n    guebin = 0\n    daho = 0\n    for t in range(max_time): # max_time 동안 게임을 진행 \n        #--# 블록을 쌓음           \n        if guebin &gt;= 2: # 규빈탑의 높이 &gt;=2 인 경우 규빈이 안전하게 1개의 블록씩 쌓으려고 노력한다. \n            guebin = guebin + 1 \n            daho = daho + 1 \n        else: # 규빈탑의높이&lt;2 인경우 2개의 블록을 쌓으려 시도한다. \n            if np.random.rand() &lt; 0.5: # 규빈이 탑 쌓다가 실수로 무너짐\n                guebin = 0 \n                daho = daho + 1 \n            else: # 규빈이 탑을 잘 쌓음 \n                guebin = guebin + 2  \n                daho = daho + 1 \n        #--# 승패를 체크\n        if (guebin &gt;= end_condition) and (daho &gt;= end_condition):\n            result = \"무승부 (둘이 동시에 성공)\"\n            break\n        elif (guebin &gt;= end_condition) and (daho &lt; end_condition):\n            result = \"규빈승\"\n            break\n        elif (guebin &lt; end_condition) and (daho &gt;= end_condition):\n            result = \"다호승\"\n            break\n        else: \n            result = \"무승부 (둘다 쌓지 못함)\"\n    return result \n\n\nresults = [build_tower(max_time=10,end_condition=10) for i in range(1000)]\n{s:results.count(s) for s in set(results)}\n\n{'다호승': 241, '규빈승': 531, '무승부 (둘이 동시에 성공)': 228}\n\n\n\n사실상 (2)와 같은 경우이다. 규빈이 2개의 블럭을 쌓는 첫시도에서 성공한다면 규빈의 승리 (이미 1층씩 쌓아도 승리확정이므로 이후에는 굳이 도박을 할 필요가 없음), 규빈이 2개의 블럭을 쌓는 시도를 하여 첫 시도에서 실패하고 두번째 시도에서 성공한다면 무승부, 규빈이 2개의 블럭을 쌓는 시도에서 처음 두번을 연속 실패한다면 이후의 결과와 상관없이 규빈의 패배로 결정된다."
  },
  {
    "objectID": "posts/04wk-1.html",
    "href": "posts/04wk-1.html",
    "title": "04wk-1: 퀴즈3",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\nimport itertools\n\n\n1. – 10점\n4개의 문자 \\(x,x,y,y\\) 를 모두 일렬로 나열하는 경우의 수를 파이썬을 이용하여 구하여라.\n\nitertools.permutations()을 이용할 것.\n\nhint: 답은 \\(\\frac{4!}{2!2!}=6\\) 이다.\n(풀이)\n\nlen(set([''.join(i) for i in itertools.permutations('xxyy')]))\n# len(set([i for i in itertools.permutations('xxyy')])) &lt;-- 이렇게 해도 결과는 같음\n\n6\n\n\n\n\n2. – 10점\n리스트 컴프리헨션을 이용하여 \\(a_n=\\frac{1}{n(n+1)}\\)을 만족하는 수열을 선언하라. (\\(a_1,a_2,\\dots,a_5\\) 까지만 선언하면 정답으로 인정)\n## 정답은 아래와 같음\n[0.5, 0.16666666666666666, 0.08333333333333333, 0.05, \n 0.03333333333333333]\n(풀이)\n\n[1/(n*(n+1)) for n in range(1,6)]\n\n[0.5, 0.16666666666666666, 0.08333333333333333, 0.05, 0.03333333333333333]\n\n\n\n\n3. – 40점\n\n(1)~(4) 까지 각 10점씩임.\n\n(1) for 문을 사용하여 아래와 같은 수열을 정의하라. (\\(a_1,\\dots,a_{100}\\) 까지 선언할 것)\n\n\\(a_1=a_2=1\\)\n\\(a_{n} = a_{n-1} + a_{n-2}\\) where \\(n\\geq 2\\)\n\n## 정답은 아래와 같음\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\n 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\n 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\n 9227465, 14930352, 24157817, 39088169, 63245986, 102334155,\n 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\n 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,\n 32951280099, 53316291173, 86267571272, 139583862445, 225851433717,\n 365435296162, 591286729879, 956722026041, 1548008755920,\n 2504730781961, 4052739537881, 6557470319842, 10610209857723,\n 17167680177565, 27777890035288, 44945570212853, 72723460248141,\n 117669030460994, 190392490709135, 308061521170129, 498454011879264,\n 806515533049393, 1304969544928657, 2111485077978050,\n 3416454622906707, 5527939700884757, 8944394323791464,\n 14472334024676221, 23416728348467685, 37889062373143906,\n 61305790721611591, 99194853094755497, 160500643816367088,\n 259695496911122585, 420196140727489673, 679891637638612258,\n 1100087778366101931, 1779979416004714189, 2880067194370816120,\n 4660046610375530309, 7540113804746346429, 12200160415121876738,\n 19740274219868223167, 31940434634990099905, 51680708854858323072,\n 83621143489848422977, 135301852344706746049, 218922995834555169026,\n 354224848179261915075]\n(풀이)\n\nan = [1,1]\nfor n in range(3,101): # range(2,100) 혹은 range(98) 을 써도 결과는 같음\n    an.append(an[-1]+an[-2])\n#an\n\n(2) 3-(1)의 결과로 나온 숫자들의 자리수를 카운트하는 파이썬코드를 리스트 컴프리헨션을 이용하여 구현하라.\nhint 3-(1)를 풀지못하였더라도 아래의 리스트를 입력하면 이 문제를 풀 수 있음.\n\nlst = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\n 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\n 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\n 9227465, 14930352, 24157817, 39088169, 63245986, 102334155,\n 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\n 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,\n 32951280099, 53316291173, 86267571272, 139583862445, 225851433717,\n 365435296162, 591286729879, 956722026041, 1548008755920,\n 2504730781961, 4052739537881, 6557470319842, 10610209857723,\n 17167680177565, 27777890035288, 44945570212853, 72723460248141,\n 117669030460994, 190392490709135, 308061521170129, 498454011879264,\n 806515533049393, 1304969544928657, 2111485077978050,\n 3416454622906707, 5527939700884757, 8944394323791464,\n 14472334024676221, 23416728348467685, 37889062373143906,\n 61305790721611591, 99194853094755497, 160500643816367088,\n 259695496911122585, 420196140727489673, 679891637638612258,\n 1100087778366101931, 1779979416004714189, 2880067194370816120,\n 4660046610375530309, 7540113804746346429, 12200160415121876738,\n 19740274219868223167, 31940434634990099905, 51680708854858323072,\n 83621143489848422977, 135301852344706746049, 218922995834555169026,\n 354224848179261915075]\n\nhint 아래의 코드를 이용할 것\n\nlen(str(2584)), len(str(354224848179261915075))\n\n(4, 21)\n\n\n## 답은 아래와 같다. \n[ 1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,\n  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,\n  7,  8,  8,  8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11,\n  11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14,\n  15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18,\n  18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21 ]\n(풀이)\n\n# [len(str(i)) for i in an]\n\n(3) 3-(1)의 결과로 나온 숫자들의 유일한 숫자의 수를 카운트하는 파이썬코드를 리스트 컴프리헨션을 이용하여 구현하라. (여기에서 17711 은 유일한 숫자가 “1,7” 2개이며, 10946은 유일한 숫자가 “1,0,9,4,6” 5개 이다.\nhint 아래의 코드를 활용할 것\n\nlen(set(str(9227465)))\n\n6\n\n\n## 답은 아래와 같다. \n[ 1,  1,  1,  1,  1,  1,  2,  2,  2,  1,  2,  2,  2,  2,  3,  3,  4,\n  4,  3,  3,  5,  2,  5,  4,  4,  4,  5,  4,  5,  5,  6,  7,  6,  5,\n  6,  7,  6,  6,  7,  6,  6,  6,  4,  6,  6,  6,  7,  8,  6,  7,  8,\n  7,  7,  6,  8,  7,  7,  7,  8,  8, 10,  9, 10,  9,  6,  7,  9,  8,\n  7,  8,  9,  9,  8, 10,  8,  9,  8,  8,  7,  8,  9,  8,  8,  8,  7,\n  9,  8,  7,  7,  9,  8, 10,  9,  9,  7,  9,  8, 10,  9, 10 ]\n\n문제의 뜻이 이해안되면 질문할 것\n\n(풀이)\n\n# [len(set(str(i))) for i in an]\n\n(4) 3-(1)의 결과로 나온 숫자들 중 짝수에 해당하는 숫자가 몇개인지 카운트하는 코드를 작성하라. 코드 작성시 if가 포함된 리스트컴프리헨션을 이용하라. (numpy 이용시 부분점수 없이 0점)\n(풀이)\n\nlen([i for i in an if i %2 ==0])\n\n33\n\n\n\n\n4. – 40점\n10원짜리 동전 13개, 100원짜리 동전 17개, 500원짜리 동전 4개가 있다고 하자. 이러한 동전들로 표현할 수 있는 돈의 액수는 모두 몇 가지인가? 파이썬의 itertools 모듈을 이용하여 count하라.\n– 예시 –\n10원짜리 동전 1개, 100원짜리 동전 5개, 500원짜리 동전 1개가 있다면 표현할 수 있는 돈은 아래와 같다.\n\n\n\n경우\n10원\n100원\n500원\n총액\n\n\n\n\n경우1\n0\n0\n0\n0원\n\n\n경우2\n0\n0\n1\n500원\n\n\n경우3\n0\n1\n0\n100원\n\n\n경우4\n0\n1\n1\n600원\n\n\n경우5\n0\n2\n0\n200원\n\n\n경우6\n0\n2\n1\n700원\n\n\n경우7\n0\n3\n0\n300원\n\n\n경우8\n0\n3\n1\n800원\n\n\n경우9\n0\n4\n0\n400원\n\n\n경우10\n0\n4\n1\n900원\n\n\n경우11\n0\n5\n0\n500원\n\n\n경우12\n0\n5\n1\n1000원\n\n\n경우13\n1\n0\n0\n10원\n\n\n경우14\n1\n0\n1\n510원\n\n\n경우15\n1\n1\n0\n110원\n\n\n경우16\n1\n1\n1\n610원\n\n\n경우17\n1\n2\n0\n210원\n\n\n경우18\n1\n2\n1\n710원\n\n\n경우19\n1\n3\n0\n310원\n\n\n경우20\n1\n3\n1\n810원\n\n\n경우21\n1\n4\n0\n410원\n\n\n경우22\n1\n4\n1\n910원\n\n\n경우23\n1\n5\n0\n510원\n\n\n경우24\n1\n5\n1\n1010원\n\n\n\n여기에서 경우2와 경우11은 중복이고, 경우14와 경우23은 중복이므로 총 22개의 경우가 나온다.\n\n문제의 뜻이 이해안되면 질문할 것\n\n(풀이)\n\nlst10 = list(range(14))\nlst100 = list(range(18))\nlst500 = list(range(5)) \n\n\nlen(set([i*10+j*100+k*500 for i,j,k in itertools.product(lst10,lst100,lst500)]))\n\n384"
  },
  {
    "objectID": "posts/01wk-1.html",
    "href": "posts/01wk-1.html",
    "title": "01wk-1: 강의소개",
    "section": "",
    "text": "1. 전북대 + 충남대\n- 전북대는 전북대학생끼리 성적평가.\n- 충남대는 충남대학생끼리 성적평가.\n- 충남대 학생의 경우 교양과목임을 감안하여 채점할 예정임.\n\n\n2. 플립러닝\n- 수업: 매주 금요일 오후까지 강의홈페이지에 업로드 될 예정.\n\n수업은 영상업로드 방식 (각자 수강)\n영상시청에 대한 별도의 출석체크는 없음.\n\n- 퀴즈: 매주 수요일 수업시간에 퀴즈를 볼 예정임.\n\n시험은 오픈북이며 구글검색, 강의노트 참고등을 허용함.\nChatGPT는 허용하지 않음.\n\n\n\n3. 성적처리 방식\n- 출석 10%, 퀴즈 50%, 중간 20%, 기말 20%\n\n출석은 매주 수요일 퀴즈시간에 체크할 예정임. (따라서 퀴즈를 보면 출석점수는 자동으로 인정)\n사실상 퀴즈의 점수비중이 60%"
  },
  {
    "objectID": "posts/03wk-2.html#a.-벡터화연산브로드캐스팅-불가능",
    "href": "posts/03wk-2.html#a.-벡터화연산브로드캐스팅-불가능",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 벡터화연산(브로드캐스팅) 불가능",
    "text": "A. 벡터화연산(브로드캐스팅) 불가능\n- 벡터화연산 불가능 (최악의 단점)\n\nlst = [1,2,3]\nlst + 1\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n\narr = np.array([1,2,3])\narr + 1\n\narray([2, 3, 4])"
  },
  {
    "objectID": "posts/03wk-2.html#b.-bool을-이용한-인덱싱이-불가능",
    "href": "posts/03wk-2.html#b.-bool을-이용한-인덱싱이-불가능",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. bool을 이용한 인덱싱이 불가능",
    "text": "B. bool을 이용한 인덱싱이 불가능\n- True, False 가 포함된 array를 이용한 인덱싱이 불가능하다.\n- 넘파이에서 bool을 이용한 인덱싱\n\narr = np.array([1,2,3,4,5])\narr[arr&gt;3]\n\narray([4, 5])\n\n\n- 리스트는 불가능\n\nlst = [1,2,3,4,5]\nlst[lst&gt;3]\n\nTypeError: '&gt;' not supported between instances of 'list' and 'int'\n\n\n\nlst&gt;3\n\nTypeError: '&gt;' not supported between instances of 'list' and 'int'"
  },
  {
    "objectID": "posts/03wk-2.html#c.-넘파이-특화-메소드-사용불가능",
    "href": "posts/03wk-2.html#c.-넘파이-특화-메소드-사용불가능",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 넘파이 특화 메소드 사용불가능",
    "text": "C. 넘파이 특화 메소드 사용불가능\n- 넘파이 특화 메소드\n\narr = np.array([5,4,3,2,1])\narr\n\narray([5, 4, 3, 2, 1])\n\n\n\narr.min(), arr.max(), arr.mean(), arr.argmin(), arr.argmax()\n\n(1, 5, 3.0, 4, 0)\n\n\n\narr.sort()\narr\n\narray([1, 2, 3, 4, 5])\n\n\n- 리스트는?\n\nlst = [5,4,3,2,1]\nlst\n\n[5, 4, 3, 2, 1]\n\n\n\nlst.min(), lst.max(), lst.mean(), lst.argmin(), lst.argmax()\n\nAttributeError: 'list' object has no attribute 'min'\n\n\n\nlst.sort()\nlst\n\n[1, 2, 3, 4, 5]\n\n\n# 메소드란? – 자료형에 종속된 특수기술\n\n# 넘파이 특수기술\narr = np.array([1,2,3])\narr.max() # max(arr)로 해석\n\n3\n\n\n\n# ?.max() 이런건 넘파이 특수기술 이니까 ?자리에 리스트일 경우는 실행안됨\nlst = [1,2,3]\nlst.max() \n\nAttributeError: 'list' object has no attribute 'max'\n\n\n\n# 리스트의 특수기술 \nlst = [1,2,3]\nlst.append(4) # append(lst,4) 로 해석\nlst\n\n[1, 2, 3, 4]\n\n\n\n# 문자열 특수기술\ns = 'asdf'\ns.capitalize() # capitalize(s) 로 해석\n\n'Asdf'\n\n\n\n# 문자열 특수기술\ns = '-'\nlst = ['x','y','z']\ns.join(lst) # join(s,lst) 로 해석\n\n'x-y-z'\n\n\n\njoin(s,lst)의 뜻: lst의 각 원소를 모두 “이어서” 하나의 문자열로 만들어라. 단, 원소간의 구분은 s에 저장된 문자열로 하라.\n\n\n# 문자열 특수기술 응용\n''.join(['x','y','z'])\n\n'xyz'\n\n\n\n# 문자열 특수기능 \ns = \"제 이름은 {} 입니다.\" \nname = \"최규빈\"\ns.format(name) # format(s,name)\n\n'제 이름은 최규빈 입니다.'\n\n\n\nformat(s,name)의 뜻: s라는 문자열의 포맷에 {} 자리에 name을 끼워넣어라."
  },
  {
    "objectID": "posts/03wk-2.html#d.-파이썬에서-쓰레기-같은-자료형은-없다.",
    "href": "posts/03wk-2.html#d.-파이썬에서-쓰레기-같은-자료형은-없다.",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "D. 파이썬에서 쓰레기 같은 자료형은 없다.",
    "text": "D. 파이썬에서 쓰레기 같은 자료형은 없다.\n- 파이썬에는 각 자료형마다 사용할 수 있는 고유기술(=메소드)이나 문법이 있음.\n- 내가 생각할 때 리스트는 필요없는 자료형이야 = 난 리스트만 가지고 있는 어떠한 고유특징을 활용하지 못해.\n- 파이썬을 잘 하려면 자료형에 따른 고유 특징을 이해하고 활용할 줄 알아야 한다.\n\n기본자료형: str, list, tuple, dict, set – 이러한 자료형을 이해하고 기능을 활용해야함\n모듈: 넘파이배열, 판다스"
  },
  {
    "objectID": "posts/03wk-2.html#a.-문제파악",
    "href": "posts/03wk-2.html#a.-문제파악",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 문제파악",
    "text": "A. 문제파악\n\n- 기존의 문제들과 다르게 numpy를 이용하여 풀기는 어려울 것 같다. 뭔가 기존문제들과 결이 다름\n- 그런데 코딩으로 해결가능할 것 같긴 함"
  },
  {
    "objectID": "posts/03wk-2.html#b.-슈도알고리즘",
    "href": "posts/03wk-2.html#b.-슈도알고리즘",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. 슈도알고리즘",
    "text": "B. 슈도알고리즘\n1. 편의상 \\([x,x,y,y,z]\\)를 \\([x_1,x_2,y_1,y_2,z]\\)와 같이 생각하고 나열한다. (5! = 120 개만큼 경우가 나열되겠지)\n2. 중복을 제거한다. 즉 아래는 모두 같은 경우로 생각한다.\n\n\\([x_1,x_2,y_1,y_2,z]\\)\n\\([x_1,x_2,y_2,y_1,z]\\)\n\\([x_2,x_1,y_1,y_2,z]\\)\n\\([x_2,x_1,y_2,y_1,z]\\)"
  },
  {
    "objectID": "posts/03wk-2.html#c.-예비학습",
    "href": "posts/03wk-2.html#c.-예비학습",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 예비학습",
    "text": "C. 예비학습\n# 개념1 – 집합이라는 자료형이 있음.\n\na = {1,2,3}\ntype(a)\n\nset\n\n\n그런데 집합은 중복된 원소를 포함하지 않았음 (중학교때 배운듯)\n\na = {1,2,3,3,3}\na\n\n{1, 2, 3}\n\n\n#\n# 개념2 – 자료형변환을 이용하여 중복된 원소를 제거\n아래와 같은 자료형이 있다고 하자.\n\nlst = [1,2,3,3,3] \nlst\n\n[1, 2, 3, 3, 3]\n\n\n중복된 것을 제외하고 싶다면?\n\nlist(set(lst)) # 자료형변환\n\n[1, 2, 3]\n\n\n#\n# 개념3 – 고유의 원소 숫자 세기\n\nlst = [1,2,3,3,3,4,4,5,5,6] \nlst\n\n[1, 2, 3, 3, 3, 4, 4, 5, 5, 6]\n\n\n\nlen(set(lst))\n\n6\n\n\n#\n# 개념4 – for문\n아래를 출력하고 싶다고 하자.\n이효리는 핑클의 멤버이다. \n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다. \n이진은 핑클의 멤버이다. \n(풀이1) – 단순한 풀이\n\nprint(\"이효리는 핑클의 멤버이다.\")\nprint(\"옥주현은 핑클의 멤버이다.\")\nprint(\"성유리는 핑클의 멤버이다.\")\nprint(\"이진은 핑클의 멤버이다.\")\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이2) – 문자열 특수기능을 이용해볼까?\n“{} 핑클의 멤버이다.” 이 공통포맷이므로, 아래와 같이 수행할 수 있겠다.\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\ni = 0\nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\ni = 1 \nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\ni = 2 \nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\ni = 3 \nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이3) - for와 문자열 특수기능을 이용해볼까?\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in [0,1,2,3]:\n    print(\"{} 핑클의 멤버이다.\".format(lst[i]))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이4) - for와 문자열 특수기능을 이용해볼까? (2)\n[0,1,2,3]은 대충 range(4)와 비슷한 것이므로 아래와 같이 수행할 수도 있겠음.\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in range(4):\n    print(\"{} 핑클의 멤버이다.\".format(lst[i]))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이5) - for와 문자열 특수기능을 이용해볼까? (3)\n아래의 코드는 \\(i\\) 자리에 [0,1,2,3]의 원소가 번갈아 대입되며 ??????가 수행되었음.\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in [0,1,2,3]:\n    ??????\n아래의 코드도 \\(i\\) 자리에 range(4)의 원소가 번갈아 대입되며 ??????가 수행되었다고 해석가능.\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in range(4):\n    ??????\n아래의 코드는 어떻게 실행될까??\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in lst:\n    ??????\n\n# R과 다른 방식으로 동작하는 for문 \nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor l in lst:\n    print(\"{} 핑클의 멤버이다.\".format(l))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n#\n# 개념5 – for문을 이용하여 리스트의 원소 추가하기\n\nlst2 = [] # lst2 = list() 와 같은결과임\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor l in lst: \n    lst2.append(\"{} 핑클의 멤버이다.\".format(l))\n\n\nlst2\n\n['이효리는 핑클의 멤버이다.', '옥주현은 핑클의 멤버이다.', '성유리는 핑클의 멤버이다.', '이진은 핑클의 멤버이다.']\n\n\n그런데 이걸 아래와 같이 해결할 수도 있다.\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\n[\"{} 핑클의 멤버이다.\".format(l) for l in lst] # 리스트컴프리헨션 \n\n['이효리는 핑클의 멤버이다.', '옥주현은 핑클의 멤버이다.', '성유리는 핑클의 멤버이다.', '이진은 핑클의 멤버이다.']\n\n\n#\n# 개념6 – 리스트컴프리헨션\n집합을 표현하는 방법에는 원소나열법과 조건제시법이 있다.\n\n원소나열법: \\(\\{2^0,2^1,2^2,2^3\\}\\)\n조건제시법: \\(\\{2^i: \\text{ for } i=0,1,2,3\\}\\)\n\n이중에서 조건제시법은 아래와 같이 표현할 수 있음.\n\n\\(\\{2^i: \\text{ for } i \\in \\{0,1,2,3\\}\\}\\)\n\n여기에서 \\(\\in\\) 은 in 으로 읽으므로, 위의 표기법을 연상하여 파이썬 코드로 바꿔보면\n[2^i: for i in [0,1,2,3]]\n와 같은 방식으로 리스트의 원소를 표현할 수 있을 것 같다. 위의 코드는 실행되지 않지만 아래의 코드는 실행가능하다.\n\n[2**i for i in [0,1,2,3]]\n\n[1, 2, 4, 8]\n\n\n\n[2**i for i in range(4)]\n\n[1, 2, 4, 8]\n\n\n이를 응용하면\n\n[\"asdf{}\".format(2**i) for i in range(4)]\n\n['asdf1', 'asdf2', 'asdf4', 'asdf8']\n\n\n이것을 다시 응용하면\n\nlst = [\"이효리는\", \"성유리는\", \"옥주현은\", \"이진은\"]\n[\"{} 핑클의 멤버이다.\".format(l) for l in lst]\n\n['이효리는 핑클의 멤버이다.', '성유리는 핑클의 멤버이다.', '옥주현은 핑클의 멤버이다.', '이진은 핑클의 멤버이다.']\n\n\n#\n# 개념7 – 스트링의 인덱싱 (파이썬에서는 스트링을 array로 취급)\n\ns = 'asdf'\ns\n\n'asdf'\n\n\n\ns[0]\n\n'a'\n\n\n\ns[-1]\n\n'f'\n\n\n\ns[:2]\n\n'as'\n\n\n#\n# 개념8 – 스트링과 리스트의 변환\n\ns = 'asdf' \ns\n\n'asdf'\n\n\n\nlst = list(s)\nlst\n\n['a', 's', 'd', 'f']\n\n\n\n''.join(lst)\n\n'asdf'\n\n\n# 개념9 – 튜플자료형\n\nlst = [1,2,3]\nlst\n\n[1, 2, 3]\n\n\n\ntpl = (1,2,3)\ntpl\n\n(1, 2, 3)\n\n\n튜플은 (의미가 명확할때) 괄호를 생략할 수 있음\n\ntpl = 1,2,3\ntpl\n\n(1, 2, 3)\n\n\n튜플은 리스트와 매우 비슷함.\n\n[1,2,3] + [4,5] \n\n[1, 2, 3, 4, 5]\n\n\n\n(1,2,3) + (4,5)\n\n(1, 2, 3, 4, 5)\n\n\n아래도 가능\n\n''.join(['a','b','c'])\n\n'abc'\n\n\n\n''.join(('a','b','c'))\n\n'abc'\n\n\n#\n# 개념10 – for를 수행하는 다양한 테크닉\n우리가 알고 있는 for: 리스트 비슷한 것을 만든 뒤, 그 리스트의 원소를 하나씩 뽑아가면서 어떠한 반복구문 “??????” 수행하는 것.\n\nimport itertools\n\n\nfor i in itertools.permutations(['a','b','c']):\n    print(i)\n\n('a', 'b', 'c')\n('a', 'c', 'b')\n('b', 'a', 'c')\n('b', 'c', 'a')\n('c', 'a', 'b')\n('c', 'b', 'a')\n\n\n\nfor i in itertools.product(['x','y'],['a','b','c']):\n    print(i)\n\n('x', 'a')\n('x', 'b')\n('x', 'c')\n('y', 'a')\n('y', 'b')\n('y', 'c')\n\n\n#"
  },
  {
    "objectID": "posts/03wk-2.html#d.-풀이",
    "href": "posts/03wk-2.html#d.-풀이",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "D. 풀이",
    "text": "D. 풀이\n아래의 문제를 풀어보자..\n\n(풀이)\n\nlen(set([''.join(i) for i in itertools.permutations(['x','x','y','y','z'])]))\n\n30"
  },
  {
    "objectID": "posts/03wk-2.html#a.-문제이해",
    "href": "posts/03wk-2.html#a.-문제이해",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 문제이해",
    "text": "A. 문제이해"
  },
  {
    "objectID": "posts/03wk-2.html#b.-슈도알고리즘-1",
    "href": "posts/03wk-2.html#b.-슈도알고리즘-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. 슈도알고리즘",
    "text": "B. 슈도알고리즘\n1. 아래의 경우를 모두 나열한다.\na,b,c,d = 1,1,1,1 \na,b,c,d = 1,1,1,2 \n....\na,b,c,d = 6,6,6,6\n2. 조건 \\(a \\leq c \\leq d\\) 와 \\(b \\leq c \\leq d\\) 를 동시에 만족하는 경우를 센다."
  },
  {
    "objectID": "posts/03wk-2.html#c.-예비학습-1",
    "href": "posts/03wk-2.html#c.-예비학습-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 예비학습",
    "text": "C. 예비학습\n# 개념1 – for문과 튜플\n\nlst = [['최규빈',43052,'M'],['아이유',54321,'F'],['하니',11223,'F']]\nlst[0]\n\n['최규빈', 43052, 'M']\n\n\n아래의 코드가 가능하다.\n\nfor [name,student_id,sex] in lst:\n    print([name,student_id,sex])\n# [name,student_id,sex] = ['최규빈', 43052, 'M']\n# print([name,student_id,sex])\n# [name,student_id,sex] = ['아이유', 54321, 'F']\n# print([name,student_id,sex])\n# [name,student_id,sex] = ['하니', 11223, 'F']\n# print([name,student_id,sex])\n\n['최규빈', 43052, 'M']\n['아이유', 54321, 'F']\n['하니', 11223, 'F']\n\n\n리스트를 튜플로 바꾼다면?\n\nfor (name,student_id,sex) in lst:\n    print((name,student_id,sex))\n# (name,student_id,sex) = ['최규빈', 43052, 'M']\n# print((name,student_id,sex))\n# (name,student_id,sex) = ['아이유', 54321, 'F']\n# print((name,student_id,sex))\n# (name,student_id,sex) = ['하니', 11223, 'F']\n# print((name,student_id,sex))\n\n('최규빈', 43052, 'M')\n('아이유', 54321, 'F')\n('하니', 11223, 'F')\n\n\nfor (name,student_id,sex) in lst: 대신에 for name,student_id,sex in lst: 도 가능\n\nfor name,student_id,sex in lst:\n    print((name,student_id,sex))\n# name,student_id,sex = ['최규빈', 43052, 'M']\n# print((name,student_id,sex))\n# name,student_id,sex = ['아이유', 54321, 'F']\n# print((name,student_id,sex))\n# name,student_id,sex = ['하니', 11223, 'F']\n# print((name,student_id,sex))\n\n('최규빈', 43052, 'M')\n('아이유', 54321, 'F')\n('하니', 11223, 'F')\n\n\n아래와 같이 컴프리헨션으로 만들 수도 있음.\n\n[[name,student_id,sex] for name,student_id,sex in lst]\n\n[['최규빈', 43052, 'M'], ['아이유', 54321, 'F'], ['하니', 11223, 'F']]\n\n\n\n[(name,student_id,sex) for name,student_id,sex in lst]\n\n[('최규빈', 43052, 'M'), ('아이유', 54321, 'F'), ('하니', 11223, 'F')]\n\n\n아래는 불가능\n\n[name,student_id,sex for name,student_id,sex in lst]\n\nSyntaxError: did you forget parentheses around the comprehension target? (905514563.py, line 1)\n\n\n하지만 괄호를 명확하게 쓰기만 하면 만들어짐\n\n[(name,sex) for name,student_id,sex in lst]\n\n[('최규빈', 'M'), ('아이유', 'F'), ('하니', 'F')]\n\n\n\n[(sex,name) for name,student_id,sex in lst]\n\n[('M', '최규빈'), ('F', '아이유'), ('F', '하니')]\n\n\n\n[name for name,student_id,sex in lst]\n\n['최규빈', '아이유', '하니']\n\n\n언더스코어(_)를 사용할 수도 있음.\n\n[name for name,_,_ in lst]\n\n['최규빈', '아이유', '하니']\n\n\n언더스코어(_)를 사용시 lst[0], lst[1] 등의 원소숫자와 일치하도록 사용해야함\n\n[name for name,_ in lst] # 이건 또 실행불가능..\n\nValueError: too many values to unpack (expected 2)\n\n\n\n[name for name, *args in lst] # 이건 실행가능\n\n['최규빈', '아이유', '하니']\n\n\n# 개념2 – 조건문\n아래의 리스트 원소 \\(l\\) 중에서 조건 \\(1 &lt; l \\leq 5\\)를 만족하는 원소는 모두 몇개인가?\n\nlst = [1,2,3,4,5,6,7,8,9] \nlst\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n(풀이)\n\nsum([1&lt;l and l&lt;=5 for l in lst])\n\n4\n\n\n\nsum([1&lt;l&lt;=5 for l in lst])\n\n4"
  },
  {
    "objectID": "posts/03wk-2.html#d.-풀이-1",
    "href": "posts/03wk-2.html#d.-풀이-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "D. 풀이",
    "text": "D. 풀이\n\n(풀이)\n\nlst = [1,2,3,4,5,6]\nsum([a&lt;=c&lt;=d and b&lt;=c&lt;=d for a,b,c,d in itertools.product(lst,lst,lst,lst)])\n\n196"
  },
  {
    "objectID": "posts/03wk-2.html#a.-문제파악-1",
    "href": "posts/03wk-2.html#a.-문제파악-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 문제파악",
    "text": "A. 문제파악"
  },
  {
    "objectID": "posts/03wk-2.html#b.-예비학습",
    "href": "posts/03wk-2.html#b.-예비학습",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. 예비학습",
    "text": "B. 예비학습\n- 예제: 제곱수중에서 12로 나누어서 떨어지는 수만 원소르 가지는 리스트를 만들고 싶다.\n\n제곱수: 1,4,9,16,25,36,…\n12로 나누어서 떨어지는 수: 36\n\n(복습1)\n\n12 % 4 # % 는 나머지를 계산하는 연산자, 12를 4로 나누었더니 나머지가 0\n\n0\n\n\n\n12 % 5 # 12 = 5*2 +2 \n\n2\n\n\n(복습2)\n\na = 3 # a에 2를 대입하라...\n\n\na == 2 # a에 들어있는 값이 2이인지 테스트하라..\n\nFalse\n\n\n\na == 3\n\nTrue\n\n\n(풀이1) – 비어있는 리스트를 만들고, for + if 를 사용\n\nlst = []\nfor i in range(1,101):\n    if i**2 % 12 == 0: # i^2을 12로 나누어서 나누어 떨어진다면\n        lst.append(i**2)\n\n\nlst\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]\n\n\n(풀이2) - if문이 포함된 리스트 컴프리헨션\n\n[i**2 for i in range(1,101) if i**2 % 12 ==0] \n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]"
  },
  {
    "objectID": "posts/03wk-2.html#c.-풀이",
    "href": "posts/03wk-2.html#c.-풀이",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 풀이",
    "text": "C. 풀이\n\n(풀이)\n\nx = list(range(1,16))\nf = lambda x: np.sin(np.pi/4*x)\nsum([xi for xi in x if f(2+xi)*f(2-xi)&lt;1/4])\n\n32"
  },
  {
    "objectID": "posts/02wk-2.html#a.-int-float-bool",
    "href": "posts/02wk-2.html#a.-int-float-bool",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "A. int, float, bool",
    "text": "A. int, float, bool\n- int형\n\na=100\n\n\ntype(a)\n\nint\n\n\n- float형\n\na=1.2*3\na\n\n3.5999999999999996\n\n\n\ntype(a)\n\nfloat\n\n\n\na?\n\n\nType:        float\nString form: 3.5999999999999996\nDocstring:   Convert a string or number to a floating point number, if possible.\n\n\n\n- bool형\n\na=True ## 숫자1으로 생각할 수 있음 \nb=False ## 숫자0으로 생각할 수 있음\n\n\ntype(a)\n\nbool\n\n\n\ntype(b)\n\nbool\n\n\n\na?\n\n\nType:        bool\nString form: True\nDocstring:  \nbool(x) -&gt; bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n\nb?\n\n\nType:        bool\nString form: False\nDocstring:  \nbool(x) -&gt; bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n- bool형의 연산\n\na=True ## 1\nb=False ## 0 \n\n\na+b\n\n1\n\n\n\na*b \n\n0\n\n\n- 형태변환: float \\(\\to\\) int\n(예시1)\n\na=3.0\ntype(a)\n\nfloat\n\n\n\na=int(a)\n\n\ntype(a)\n\nint\n\n\n(예시2) 이경우는 정보의 손실이 발생\n\na=3.14 \nint(a)\n\n3\n\n\n- 형태변환: int \\(\\to\\) float\n\na=3\ntype(a)\n\nint\n\n\n\na=float(a)\ntype(a)\n\nfloat\n\n\n- 형태변환: bool \\(\\to\\) int/float, int/float \\(\\to\\) bool\n(예시1)\n\na=True\ntype(a)\n\nbool\n\n\n\nint(a)\n\n1\n\n\n\nfloat(a)\n\n1.0\n\n\n(예시2)\n\na=1 \nbool(a)\n\nTrue\n\n\n\na=0\nbool(a)\n\nFalse\n\n\n(예시3)\n\na=1.0\nbool(a)\n\nTrue\n\n\n\na=0.0\nbool(a)\n\nFalse"
  },
  {
    "objectID": "posts/02wk-2.html#b.-1차원-자료의-형태변환",
    "href": "posts/02wk-2.html#b.-1차원-자료의-형태변환",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "B. 1차원 자료의 형태변환",
    "text": "B. 1차원 자료의 형태변환\n- list \\(\\to\\) np.array\n\n[1,2,3]\n\n[1, 2, 3]\n\n\n\nnp.array([1,2,3])\n\narray([1, 2, 3])\n\n\n- np.array \\(\\to\\) list\n\nnp.linspace(1,10,10)\n\narray([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])\n\n\n\nlist(np.linspace(1,10,10))\n\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n\n\n- range \\(\\to\\) list, np.array\n\nrange(10) # 이게 뭐야??\n\nrange(0, 10)\n\n\n\nlist(range(10)) # 리스트화 \n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nnp.array(range(10)) # 넘파이배열화\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n보충학습: range의 다양한 활용을 익혀보자.\n\nlist(range(10))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(0,10))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(3,10))\n\n[3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(3,10,2))\n\n[3, 5, 7, 9]\n\n\n- map 결과물 \\(\\to\\) list\n\nf = lambda x: x**2\nlist(map(f,[1,2,3])) # [f(1),f(2),f(3)]\n\n[1, 4, 9]\n\n\n- map 결과물 \\(\\to\\) np.array로는 불가능\n\nf = lambda x: x**2\nnp.array(map(f,[1,2,3]))\n\narray(&lt;map object at 0x7f3a09e887f0&gt;, dtype=object)\n\n\n\n# 아래는 가능 \nf = lambda x: x**2\nnp.array(list(map(f,[1,2,3])))\n\narray([1, 4, 9])"
  },
  {
    "objectID": "posts/02wk-2.html#a.-np.random.rand",
    "href": "posts/02wk-2.html#a.-np.random.rand",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "A. np.random.rand()",
    "text": "A. np.random.rand()\n- 0~1 사이에서 10개의 난수생성\n\nnp.random.rand(10)\n\narray([0.43345371, 0.48324862, 0.48046707, 0.41056049, 0.56188841,\n       0.58762904, 0.6645858 , 0.60568829, 0.83033841, 0.4660302 ])\n\n\n- 0~2 사이에서 10개의 난수생성\n\nnp.random.rand(10)*2\n\narray([0.44894259, 1.8416822 , 0.50164259, 1.01601855, 0.21073439,\n       1.8049244 , 0.86548008, 0.38544391, 0.13816874, 1.22858088])\n\n\n- 1~3 사이에서 10개의 난수생성\n\nnp.random.rand(10)*2 + 1\n\narray([1.58013021, 1.96358901, 2.62137695, 1.74617053, 2.38021729,\n       1.00043864, 1.42801985, 1.65666288, 2.80405753, 1.23691426])"
  },
  {
    "objectID": "posts/02wk-2.html#b.-np.random.randn",
    "href": "posts/02wk-2.html#b.-np.random.randn",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "B. np.random.randn()",
    "text": "B. np.random.randn()\n- N(0,1)에서 10개의 난수생성\n\nnp.random.randn(10) # 표준정규분포에서 10개의 샘플 추출 \n\narray([-0.88043002, -0.75000612, -0.46393189,  0.73721724, -0.66208613,\n        0.84740615, -0.31835775,  0.60157946,  0.62744116,  2.06223706])\n\n\n- N(1,1)에서 10개 난수생성\n\nnp.random.randn(10) + 1\n\narray([ 1.50801901,  0.06945884,  2.52305677,  0.25080242, -0.25058225,\n        1.81696343, -0.47341629,  0.51879014,  2.55038708,  0.58788704])\n\n\n- N(0,4) 에서 10개 난수생성\n\nnp.random.randn(10)*2\n\narray([-2.26593271, -1.62304968, -1.71372316,  2.93723947,  0.63497107,\n        2.96605112,  0.71536533,  2.64037886,  0.10782247, -2.97822434])\n\n\n- N(3,4) 에서 10개 난수생성\n\nnp.random.randn(10)*2+3 \n\narray([ 3.71923104,  1.77496469,  4.04116354,  4.27443252,  2.59130929,\n        5.48551961, -1.09164073,  3.08090641,  0.88721243,  3.34579357])"
  },
  {
    "objectID": "posts/02wk-2.html#c.-np.random.randint",
    "href": "posts/02wk-2.html#c.-np.random.randint",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "C. np.random.randint()",
    "text": "C. np.random.randint()\n- [0,7) 에서 10개의 정수생성\n\nnp.random.randint(0,7,size=10) # [0,7)의 범위에서 10개의 정수 생성 \n\narray([0, 1, 5, 0, 2, 3, 1, 3, 0, 5])\n\n\n- [10,20) 에서 10개의 정수생성\n\nnp.random.randint(10,20,size=10) # [0,7)의 범위에서 10개의 정수 생성 \n\narray([11, 10, 10, 19, 13, 11, 11, 11, 15, 19])"
  },
  {
    "objectID": "posts/02wk-2.html#d.-np.random.choice",
    "href": "posts/02wk-2.html#d.-np.random.choice",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "D. np.random.choice()",
    "text": "D. np.random.choice()\n- [11,22,33] 에서 중복허용하여 20개 추출\n\nnp.random.choice([11,22,33],20) \n\narray([33, 33, 11, 33, 11, 11, 33, 22, 11, 33, 33, 33, 22, 33, 11, 11, 22,\n       22, 33, 22])\n\n\n- [11,22,33] 에서 중복허용하여 3개 추출\n\nnp.random.seed(4)\nnp.random.choice([11,22,33],3) \n\narray([33, 33, 22])\n\n\n\nnp.random.seed(5)\nnp.random.choice([11,22,33],3) \n\narray([33, 22, 33])\n\n\n- [11,22,33] 에서 중복허용하지 않고 3개 추출\n\nnp.random.choice([11,22,33],3,replace=False) \n\narray([22, 33, 11])"
  },
  {
    "objectID": "posts/07wk-2.html#a.-np.random.rand",
    "href": "posts/07wk-2.html#a.-np.random.rand",
    "title": "07wk-2: numpy (2)",
    "section": "A. np.random.rand()",
    "text": "A. np.random.rand()\n- 0~1 사이의 난수를 생성\n\nnp.random.rand(10)\n\narray([0.1088988 , 0.37600298, 0.47693689, 0.9080132 , 0.89285882,\n       0.55646521, 0.30530448, 0.80673809, 0.47271228, 0.39307233])\n\n\n- 0~2 사이의 난수를 생성\n\nnp.random.rand(10)*2\n\narray([0.76463268, 1.48478853, 0.87077971, 0.27115035, 1.80946471,\n       0.32479018, 0.70563006, 1.84855923, 1.40713373, 1.8003245 ])\n\n\n- 1~2사이의 난수를 생성\n\nnp.random.rand(10) + 1\n\narray([1.26688872, 1.466542  , 1.6286699 , 1.32346867, 1.94929863,\n       1.79061649, 1.21416972, 1.60339969, 1.23340892, 1.87725052])\n\n\n- 1~3사이의 난수를 생성\n\nnp.random.rand(10)*2+1 #1~3\n\narray([1.01418556, 1.41178021, 2.247176  , 2.40313287, 2.71599364,\n       1.33547793, 1.29492572, 2.11997705, 2.6255564 , 1.08540636])"
  },
  {
    "objectID": "posts/07wk-2.html#b.-np.random.randn",
    "href": "posts/07wk-2.html#b.-np.random.randn",
    "title": "07wk-2: numpy (2)",
    "section": "B. np.random.randn()",
    "text": "B. np.random.randn()\n- N(0,1)에서 난수생성\n\nnp.random.randn(10) # 표준정규분포에서 10개의 샘플 추출\n\narray([ 1.11130021, -0.72092669, -0.48191068,  0.43156103, -0.06850191,\n        0.1194882 , -1.88459261,  0.37488117, -0.38512838,  0.72947187])\n\n\n- N(1,1)에서 난수생성\n\nnp.random.randn(10) + 1 \n\narray([ 1.24137778, -0.09684431,  1.38100482,  0.01455149,  3.41866724,\n        0.25701759,  1.66288034, -0.06448819,  0.9563526 ,  1.94659513])\n\n\n- N(0,4)에서 난수생성\n\nnp.random.randn(10)*2\n\narray([ 3.48443268, -0.69172918,  0.56957012,  2.44095731,  0.06049988,\n        1.66648164, -1.87244278, -1.47143887, -0.05272601,  0.01798293])\n\n\n- N(3,4)에서 난수생성\n\nnp.random.randn(10)*2 + 3\n\narray([2.38179634, 3.71200412, 0.34203777, 1.84888258, 3.90660281,\n       1.42357852, 1.85172658, 2.27043661, 6.70173343, 2.25396495])"
  },
  {
    "objectID": "posts/07wk-2.html#c.-np.random.choice",
    "href": "posts/07wk-2.html#c.-np.random.choice",
    "title": "07wk-2: numpy (2)",
    "section": "C. np.random.choice()",
    "text": "C. np.random.choice()\n- [0,1,2,3,4] 에서 임의의 원소를 하나 뽑는 방법\n\nnp.random.choice([0,1,2,3,4])\n\n2\n\n\n- [0,1,2,3,4] 에서 30개의 원소를 뽑는 방법\n\nnp.random.choice([0,1,2,3,4],size=30)\n\narray([1, 2, 4, 2, 2, 3, 2, 2, 3, 0, 3, 0, 0, 4, 3, 0, 2, 0, 4, 0, 1, 3,\n       2, 3, 1, 4, 0, 4, 2, 1])\n\n\n\nnp.random.choice(range(5),size=30)\n\narray([4, 0, 3, 4, 4, 4, 4, 1, 3, 3, 4, 2, 1, 1, 2, 4, 1, 0, 1, 1, 2, 3,\n       4, 4, 0, 1, 0, 3, 2, 3])\n\n\n- [‘사과’,‘딸기’,‘딸기’,‘배’] 에서 10000개의 원소를 뽑는 방법\n\nlst = list(np.random.choice(['사과','딸기','딸기','배'],size=10000))\n{s:lst.count(s) for s in set(lst)}\n\n{'배': 2494, '사과': 2494, '딸기': 5012}\n\n\n- [‘사과’,‘딸기’,‘딸기’,‘배’] 에서 3개의 원소를 중복을 허용하지 않고 (= 뽑은걸 다시 넣지 않고) 뽑는 방법\n\nnp.random.choice(['사과','딸기','딸기','배'],size=3,replace=False) \n\narray(['딸기', '딸기', '사과'], dtype='&lt;U2')\n\n\n\nnp.random.choice(['사과','딸기','딸기','배'],size=4,replace=False) \n\narray(['딸기', '배', '사과', '딸기'], dtype='&lt;U2')\n\n\n\nnp.random.choice(['사과','딸기','딸기','배'],size=5,replace=False) \n\nValueError: Cannot take a larger sample than population when 'replace=False'"
  },
  {
    "objectID": "posts/07wk-2.html#d.-np.random.randint",
    "href": "posts/07wk-2.html#d.-np.random.randint",
    "title": "07wk-2: numpy (2)",
    "section": "D. np.random.randint()",
    "text": "D. np.random.randint()\n- [0,1,2,3] 에서 하나의 정수를 뽑는 방법\n\n#[0,1,2,3] 은 [0,4) 구간에 존재하는 정수로 해석가능함. \nnp.random.randint(low=0,high=4) # = np.random.choice(range(4))\n\n0\n\n\n- [0,1,2,3] 에서 30개의 정수를 뽑는 방법\n\nnp.random.randint(low=0,high=4,size=30)\n\narray([1, 2, 0, 2, 1, 0, 1, 2, 3, 1, 2, 2, 2, 1, 2, 3, 1, 2, 1, 2, 2, 2,\n       1, 3, 1, 0, 3, 2, 1, 1])"
  },
  {
    "objectID": "posts/07wk-2.html#e.-통계분포",
    "href": "posts/07wk-2.html#e.-통계분포",
    "title": "07wk-2: numpy (2)",
    "section": "E. 통계분포",
    "text": "E. 통계분포\n- 균등분포에서 난수생성\n\nnp.random.uniform(low=0,high=1,size=10) # np.random.rand(10) \n\narray([0.97503796, 0.0055021 , 0.94807051, 0.54400283, 0.8608399 ,\n       0.42374177, 0.55656185, 0.18683287, 0.84113128, 0.15987594])\n\n\n\nnp.random.uniform(low=0,high=2,size=10) # np.random.rand(10)*2\n\narray([1.92048296, 0.46776058, 0.88091555, 0.6673604 , 0.526995  ,\n       0.29801036, 0.09474962, 0.7326608 , 1.5746169 , 1.93166694])\n\n\n\nnp.random.uniform(low=2,high=4,size=10) # np.random.rand(10)*2+2\n\narray([3.84313973, 3.37684629, 2.39498209, 2.08586093, 2.40786316,\n       3.82188018, 3.35690899, 3.54373758, 3.73046583, 2.44734642])\n\n\n- 정규분포에서 난수생성\n\nnp.random.normal(loc=0,scale=1,size=10) # np.random.randn(10)\n\narray([ 1.41964858,  1.81804915,  1.90248078, -0.35544912,  0.74318258,\n       -0.20358438, -1.02604971,  1.21790816,  1.00842447,  1.32410826])\n\n\n\nnp.random.normal(loc=0,scale=2,size=10) # np.random.randn(10)*2 \n\narray([-2.43492087,  0.03145487,  0.19747163, -3.24386299, -0.15816569,\n       -4.11416044, -4.17102965,  1.56781517,  0.01883716, -1.86230904])\n\n\n\nnp.random.normal(loc=5,scale=2,size=10) # np.random.randn(10)*2 + 5 \n\narray([ 5.82768761,  3.1097944 ,  3.58905114,  3.95103801,  9.90936984,\n        5.98192221,  5.42354253,  4.69164569, -0.73867164,  6.98284749])\n\n\n- 이항분포\n\nlst = np.random.binomial(n=2, p=0.5, size=10000).tolist()\n{s:lst.count(s) for s in set(lst)}\n\n{0: 2506, 1: 5040, 2: 2454}\n\n\n- 포아송분포\n\nnp.random.poisson(lam=1.0,size=100)\n\narray([2, 2, 1, 1, 1, 1, 0, 4, 2, 0, 3, 0, 2, 3, 0, 1, 1, 0, 4, 0, 0, 1,\n       0, 0, 0, 2, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 2, 0, 1, 1, 3, 1, 0, 0,\n       2, 0, 0, 1, 3, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 3, 1, 1, 1, 3, 1, 1,\n       0, 0, 1, 0, 0, 3, 1, 0, 1, 0, 3, 1, 1, 2, 0, 1, 0, 0, 3, 1, 1, 1,\n       0, 2, 1, 1, 0, 1, 2, 0, 3, 2, 1, 0])"
  },
  {
    "objectID": "posts/07wk-2.html#a.-np.where-np.argwhere",
    "href": "posts/07wk-2.html#a.-np.where-np.argwhere",
    "title": "07wk-2: numpy (2)",
    "section": "A. np.where, np.argwhere",
    "text": "A. np.where, np.argwhere\n- 1차원\n\na = np.array([0,0,0,1,0])\na\n\narray([0, 0, 0, 1, 0])\n\n\n\nnp.where(a==1), np.where(a==0)\n\n((array([3]),), (array([0, 1, 2, 4]),))\n\n\n\nnp.argwhere(a==1), np.argwhere(a==0)\n\n(array([[3]]),\n array([[0],\n        [1],\n        [2],\n        [4]]))\n\n\n- 2차원\n\nnp.random.seed(43052)\na = np.random.randn(12).reshape(3,4)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368],\n       [ 0.23778744,  0.35595116, -1.66307542, -1.38277318],\n       [-1.92684484, -1.4862163 ,  0.00692519, -0.03488725]])\n\n\n\nnp.where(a&lt;0),np.argwhere(a&lt;0)\n\n((array([1, 1, 2, 2, 2]), array([2, 3, 0, 1, 3])),\n array([[1, 2],\n        [1, 3],\n        [2, 0],\n        [2, 1],\n        [2, 3]]))\n\n\n\na[1,2],a[1,3],a[2,0],a[2,1],a[2,3] \n\n(-1.6630754187023522,\n -1.382773180699087,\n -1.9268448358915802,\n -1.4862162961554322,\n -0.03488724631833874)\n\n\n\n인덱스를 읽기에는 np.argwhere 이 편한듯\n\n의문: np.where()은 필요없는가? –&gt; 사실 np.where()이 np.argwhere()보다 쓸만함\n\nnp.random.seed(43052)\na = np.random.randn(12).reshape(3,4)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368],\n       [ 0.23778744,  0.35595116, -1.66307542, -1.38277318],\n       [-1.92684484, -1.4862163 ,  0.00692519, -0.03488725]])\n\n\na의 원소중 0보다 작은것을 출력하고 싶다면?\n\na[np.where(a&lt;0)] # 출력가능\n\narray([-1.66307542, -1.38277318, -1.92684484, -1.4862163 , -0.03488725])\n\n\n\na[np.argwhere(a&lt;0)] # 출력불가능\n\nIndexError: index 3 is out of bounds for axis 0 with size 3\n\n\na의 원소중 0보다 작은것을 0으로 바꾸고 싶다면?\n\nnp.random.seed(43052)\na = np.random.randn(12).reshape(3,4)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368],\n       [ 0.23778744,  0.35595116, -1.66307542, -1.38277318],\n       [-1.92684484, -1.4862163 ,  0.00692519, -0.03488725]])\n\n\n\nnp.where(a&lt;0,0,a) # a&lt;0을 체크 -&gt; 조건에 맞으면 0 -&gt; 조건에 안맞으면 a\n\narray([[0.38342049, 1.0841745 , 1.14277825, 0.30789368],\n       [0.23778744, 0.35595116, 0.        , 0.        ],\n       [0.        , 0.        , 0.00692519, 0.        ]])\n\n\n\nnp.where(a&lt;0,0,100) # a&lt;0을 체크 -&gt; 조건에 맞으면 0 -&gt; 조건에 안맞으면 100\n\narray([[100, 100, 100, 100],\n       [100, 100,   0,   0],\n       [  0,   0, 100,   0]])\n\n\n- 요약: np.argwhere()이 인덱스의 좌표를 읽을때 가독성이 있으나 조건에 맞는 원소를 출력하거나 처리할때는 np.where()이 유용함."
  },
  {
    "objectID": "posts/07wk-2.html#b.-인덱싱-실수하지마세요",
    "href": "posts/07wk-2.html#b.-인덱싱-실수하지마세요",
    "title": "07wk-2: numpy (2)",
    "section": "B. 인덱싱 (실수하지마세요)",
    "text": "B. 인덱싱 (실수하지마세요)\n- 아래와 같은 2d-array를 고려하자.\n\na = np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n- 첫번째 행을 뽑을때, 축의 숫자를 줄이고 싶을때도 있고 축의 숫자를 유지하고 싶을때도 있음.\n\na[0,:] # 첫번째 행을 뽑는코드1 = 축이 하나 줄어든다\n\narray([0, 1, 2, 3])\n\n\n\na[[0],:] # 첫번째 행을 뽑는코드2 = 축의 숫자가 유지된다. \n\narray([[0, 1, 2, 3]])\n\n\n- 세번째 열을 뽑을때, 축의 숫자를 줄이고 싶을때도 있고 축의 숫자를 유지하고 싶을때도 있음.\n\na[:,2] # 세번째 열을 뽑는코드1 = 축이 하나 줄어든다\n\narray([ 2,  6, 10])\n\n\n\na[:,[2]] # 세번째 열을 뽑는코드2 = 축의 숫자가 유지된다. \n\narray([[ 2],\n       [ 6],\n       [10]])"
  },
  {
    "objectID": "posts/07wk-2.html#c.-np.ix_",
    "href": "posts/07wk-2.html#c.-np.ix_",
    "title": "07wk-2: numpy (2)",
    "section": "C. np.ix_",
    "text": "C. np.ix_\n\na = np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na[0:3,0:3]\n\narray([[ 0,  1,  2],\n       [ 4,  5,  6],\n       [ 8,  9, 10]])\n\n\n\na[[0,1,2],0:3]\n\narray([[ 0,  1,  2],\n       [ 4,  5,  6],\n       [ 8,  9, 10]])\n\n\n\na[0:3,[0,1,2]]\n\narray([[ 0,  1,  2],\n       [ 4,  5,  6],\n       [ 8,  9, 10]])\n\n\n\na[[0,1,2],[0,1,2]] # 이건 왜이래?\n\narray([ 0,  5, 10])\n\n\n- 사실 np.where 에서 이러한 결과를 보긴했음\n\na[np.where(a % 5 ==0)]\n\narray([ 0,  5, 10])\n\n\n\na[[0,1,2],[0,1,2]] # 이 코드는 a[0:3,0:3] 와 다르다!\n\narray([ 0,  5, 10])\n\n\n\n헷갈리게 만든건 맞음. 결론은 실수하면 안됨.\n\n- 그런데 가끔은 a[[0,1,2],[0,1,2]] 이 a[0:3,0:3]를 의미하도록 하고 싶음.\n\na[[0,1,2],[0,1,2]] # 이건 이상하게 동작하는데..\n\narray([ 0,  5, 10])\n\n\n\na[np.ix_([0,1,2],[0,1,2])] # 이건 상식적으로 동작함..\n\narray([[ 0,  1,  2],\n       [ 4,  5,  6],\n       [ 8,  9, 10]])"
  },
  {
    "objectID": "posts/07wk-2.html#d.-메소드의-도움말을-자세히-확인하기",
    "href": "posts/07wk-2.html#d.-메소드의-도움말을-자세히-확인하기",
    "title": "07wk-2: numpy (2)",
    "section": "D. 메소드의 도움말을 자세히 확인하기",
    "text": "D. 메소드의 도움말을 자세히 확인하기\n- 넘파이에서 a.sum()에 대한 도움말은 np.sum을 확인하면 더 자세하게 읽을 수 있음."
  },
  {
    "objectID": "posts/07wk-2.html#e.-hstack-vstack",
    "href": "posts/07wk-2.html#e.-hstack-vstack",
    "title": "07wk-2: numpy (2)",
    "section": "E. hstack, vstack",
    "text": "E. hstack, vstack\n- hstack, vstack을 쓰는 사람도 있다.\n\na = np.arange(6)\nb = -a \n\n\nnp.vstack([a,b]) # 출력이 2차원\n# np.stack([a,b],axis=0) -- 이거랑 같은코드\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 0, -1, -2, -3, -4, -5]])\n\n\n\nnp.hstack([a,b]) # 출력이 1차원\n# np.concatenate([a,b],axis=0) -- 이거랑 같은 코드\n\narray([ 0,  1,  2,  3,  4,  5,  0, -1, -2, -3, -4, -5])"
  },
  {
    "objectID": "posts/07wk-2.html#f.-append",
    "href": "posts/07wk-2.html#f.-append",
    "title": "07wk-2: numpy (2)",
    "section": "F. append",
    "text": "F. append\n- 이걸 쓰는 사람도 있음\n- 활용방법1: reshape(-1) + concat\n\na = np.arange(30).reshape(5,6)\nb = -np.arange(8).reshape(2,2,2)\n\n\na, b\n\n(array([[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11],\n        [12, 13, 14, 15, 16, 17],\n        [18, 19, 20, 21, 22, 23],\n        [24, 25, 26, 27, 28, 29]]),\n array([[[ 0, -1],\n         [-2, -3]],\n \n        [[-4, -5],\n         [-6, -7]]]))\n\n\n\na.shape, b.shape\n\n((5, 6), (2, 2, 2))\n\n\n\nnp.append(a,b)\n# np.concatenate([a.reshape(-1), b.reshape(-1)]) -- 같은코드\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,  0, -1, -2, -3,\n       -4, -5, -6, -7])\n\n\n- 활용방법2: reshape(-1) + concat\n\na = np.arange(2*3*4).reshape(2,3,4)\nb = -a\n\n\na.shape, b.shape\n\n((2, 3, 4), (2, 3, 4))\n\n\n\nnp.append(a,b,axis=0)\n#np.concatenate([a,b],axis=0) -- 이거랑 같은코드\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\nappend와 concat은 약간의 차이가 있음 – append는 3개이상을 concat할 수 없음.\n\na = np.arange(2*3*4).reshape(2,3,4)\nb = -a\nc = 2*a\n\n\nnp.concatenate([a,b,c],axis=0)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]],\n\n       [[  0,   2,   4,   6],\n        [  8,  10,  12,  14],\n        [ 16,  18,  20,  22]],\n\n       [[ 24,  26,  28,  30],\n        [ 32,  34,  36,  38],\n        [ 40,  42,  44,  46]]])\n\n\n\nnp.append(a,b,c,axis=0) # 3개는 에러..\n\nTypeError: append() got multiple values for argument 'axis'"
  },
  {
    "objectID": "posts/07wk-2.html#g.-ravel-faltten",
    "href": "posts/07wk-2.html#g.-ravel-faltten",
    "title": "07wk-2: numpy (2)",
    "section": "G. ravel, faltten",
    "text": "G. ravel, faltten\n\na = np.arange(2*3*4).reshape(2,3,4)\na\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\na.reshape(-1)\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.ravel()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.flatten()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])"
  },
  {
    "objectID": "posts/07wk-2.html#h.-통계관련-함수들",
    "href": "posts/07wk-2.html#h.-통계관련-함수들",
    "title": "07wk-2: numpy (2)",
    "section": "H. 통계관련 함수들",
    "text": "H. 통계관련 함수들\n- 평균, 중앙값\n\na = np.random.randn(1000)*2 + 1 \na.mean(), np.median(a)\n\n(0.8895052521575179, 0.9436102467241907)\n\n\n- 표준편차, 분산\n\na = np.random.randn(1000)*2 + 1 \na.var(), a.std()\n\n(4.123382455103265, 2.0306113500872747)\n\n\n\n# 자유도의 조절\na.var(ddof=1), a.std(ddof=1)\n\n(4.127509965068334, 2.0316274178766967)\n\n\n- corr matrix, cov matrix\n\nx = np.random.randn(10000)\ny = np.random.randn(10000)*2\nz = np.random.randn(10000)*0.5\n\n\nnp.cov([x,y,z]).round(2)\n\narray([[ 1.  , -0.02,  0.  ],\n       [-0.02,  4.08,  0.01],\n       [ 0.  ,  0.01,  0.25]])\n\n\n\nnp.corrcoef([x,y,z]).round(2)\n\narray([[ 1.  , -0.01,  0.  ],\n       [-0.01,  1.  ,  0.01],\n       [ 0.  ,  0.01,  1.  ]])"
  },
  {
    "objectID": "posts/07wk-2.html#i.-dtype",
    "href": "posts/07wk-2.html#i.-dtype",
    "title": "07wk-2: numpy (2)",
    "section": "I. dtype",
    "text": "I. dtype\n- np.array 에는 항상 dtype이 있다.\n\na = np.array([1,2,3])\na.dtype\n\ndtype('int64')\n\n\n\na = np.array([1.0, 2.0, 3.0])\na.dtype\n\ndtype('float64')\n\n\n- 같은 int라고 해도 int16, int32, int64와 같이 타입이 다를 수 있다.\n\na = np.array([1,2,3], dtype=np.int64)\na\n\narray([1, 2, 3])\n\n\n\na = np.array([1,2,3], dtype=np.int32)\na\n\narray([1, 2, 3], dtype=int32)\n\n\n\na = np.array([1,2,3], dtype=np.int16)\na\n\narray([1, 2, 3], dtype=int16)\n\n\n- 같은 float라고 해도 float16, float32, float64와 같이 타입이 다를 수 있다.\n\na = np.array([1,2,3], dtype=np.float64)\na\n\narray([1., 2., 3.])\n\n\n\na = np.array([1,2,3], dtype=np.float32)\na\n\narray([1., 2., 3.], dtype=float32)\n\n\n\na = np.array([1,2,3], dtype=np.float16)\na\n\narray([1., 2., 3.], dtype=float16)\n\n\n- dtype은 아래와 같은 방법으로 변환할 수 있다.\n\na = np.array([1,2,3])\na\n\narray([1, 2, 3])\n\n\n\na.dtype\n\ndtype('int64')\n\n\n\nb = a.astype(np.float64)\n\n\na, b\n\n(array([1, 2, 3]), array([1., 2., 3.]))\n\n\n- 문자열이 넘파이의 원소로 있는 경우\n\na = np.array(['a','b','c'])\na\n\narray(['a', 'b', 'c'], dtype='&lt;U1')\n\n\n\na = np.array(['aa','b','c'])\na\n\narray(['aa', 'b', 'c'], dtype='&lt;U2')\n\n\n\na = np.array(['aaaa','b','c'])\na\n\narray(['aaaa', 'b', 'c'], dtype='&lt;U4')\n\n\n- 문자열+숫자의혼합 -&gt; 각 원소의 자료형이 문자열로 통일됨\n\na = np.array([['Korea', 89],['Japan', 55]])\na\n\narray([['Korea', '89'],\n       ['Japan', '55']], dtype='&lt;U21')\n\n\n\na[0,1] # 이것이 string으로 저장되어있다.\n\n'89'\n\n\n\na[:,[1]].astype(np.int64)\n\narray([[89],\n       [55]])"
  },
  {
    "objectID": "posts/07wk-2.html#j.-브로드캐스팅과-시간측정",
    "href": "posts/07wk-2.html#j.-브로드캐스팅과-시간측정",
    "title": "07wk-2: numpy (2)",
    "section": "J. 브로드캐스팅과 시간측정",
    "text": "J. 브로드캐스팅과 시간측정\n(예비학습)\n\nimport time \n\n\nt1 = time.time()\n\n\nt2 = time.time()\n\n\nt2 - t1 \n\n0.23241567611694336\n\n\n예비학습 끝\n# 예제 – x=[0,1,2,3,4] 인 벡터가 있다고 가정하자. \\((i,j)\\)-th 원소가 (x[i]-x[j])**2을 의미하는 (5,5) matrix를 구하라.\n(풀이1) – 이건 이해하기 쉬움\n\nx = np.array([0,1,2,3,4])\nx\n\narray([0, 1, 2, 3, 4])\n\n\n\ndist2 = np.zeros([5,5])\ndist2\n\narray([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])\n\n\n\nfor i in range(5):\n    for j in range(5):\n        dist2[i,j] = (x[i]-x[j])**2 \n\n\ndist2\n\narray([[ 0.,  1.,  4.,  9., 16.],\n       [ 1.,  0.,  1.,  4.,  9.],\n       [ 4.,  1.,  0.,  1.,  4.],\n       [ 9.,  4.,  1.,  0.,  1.],\n       [16.,  9.,  4.,  1.,  0.]])\n\n\n(풀이2) – 이건 좀 이해하기 어려움\n\nx1 = x.reshape(5,1)\nx2 = x.reshape(1,5)\n\n\nx1 # (5,1)\nx2 # (1,5) \nx1-x2 \n\narray([[ 0, -1, -2, -3, -4],\n       [ 1,  0, -1, -2, -3],\n       [ 2,  1,  0, -1, -2],\n       [ 3,  2,  1,  0, -1],\n       [ 4,  3,  2,  1,  0]])\n\n\n\n이 매트릭스의 (i,j)-th 원소는 x[i]-x[j]를 의미함\n\n따라서 우리가 원하는 것은 아래와 같이 구할 수 있다.\n\n(x1-x2)**2\n\narray([[ 0,  1,  4,  9, 16],\n       [ 1,  0,  1,  4,  9],\n       [ 4,  1,  0,  1,  4],\n       [ 9,  4,  1,  0,  1],\n       [16,  9,  4,  1,  0]])\n\n\n\n\nn = 10000\ny = np.random.rand(n)\ndist2 = np.zeros([n,n]) \nt1 = time.time()\nfor i in range(n):\n    for j in range(n):\n        dist2[i,j] = (y[i]-y[j])**2 \nt2 = time.time()\nt2-t1\n\n35.770061016082764\n\n\n\nt1 = time.time()\n(y.reshape(n,1) - y.reshape(1,n))**2\nt2 = time.time()\nt2-t1 \n\n0.12731027603149414"
  },
  {
    "objectID": "posts/07wk-2.html#a.-이미지자료의-이해",
    "href": "posts/07wk-2.html#a.-이미지자료의-이해",
    "title": "07wk-2: numpy (2)",
    "section": "A. 이미지자료의 이해",
    "text": "A. 이미지자료의 이해\n- plt.imshow(...) 에서 ...의 shape이 (??,??) 이러한 형태라면 흑백이미지를 출력\n\nplt.imshow([[0,150],[0,255]],cmap='gray')\nplt.colorbar()\n\n\n\n\n\n\n\n\n- plt.imshow(...) 에서 ...의 shape이 (??,??,3) 이러한 형태라면 칼라이미지를 출력\n\nr = [[0,255],[0,255]] # (2,2)\ng = [[255,0],[0,0]] # (2,2)\nb = [[0,0],[255,0]] # (2,2) \nplt.imshow(np.stack([r,g,b],axis=-1))\n\n\n\n\n\n\n\n\n- plt.imshow(...) 에서 ...의 dtype이 int인지 float인지에 따라서 인식이 다름\n\nr = [[0,1],[0,1]] # (2,2)\ng = [[1,0],[0,0]] # (2,2)\nb = [[0,0],[1,0]] # (2,2) \nplt.imshow(np.stack([r,g,b],axis=-1))\n\n\n\n\n\n\n\n\n\nr = [[0,1],[0,1]] # (2,2)\ng = [[1,0],[0,0]] # (2,2)\nb = [[0,0],[1,0]] # (2,2) \nplt.imshow(np.stack([r,g,b],axis=-1).astype(np.float64))\n\n\n\n\n\n\n\n\n\n이건 마치 1을 255로 생각한 결과\n\n### – 예비학습 끝"
  },
  {
    "objectID": "posts/07wk-2.html#b.-hani",
    "href": "posts/07wk-2.html#b.-hani",
    "title": "07wk-2: numpy (2)",
    "section": "B. hani",
    "text": "B. hani\n\n!wget https://raw.githubusercontent.com/guebin/SC2022/main/hani.jpeg\nhani = np.einsum('ijk-&gt;jik',np.array(PIL.Image.open('hani.jpeg'),dtype=np.int64)/255)\n!rm hani.jpeg\n\n--2024-04-20 14:44:18--  https://raw.githubusercontent.com/guebin/SC2022/main/hani.jpeg\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.108.133, 185.199.109.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2445959 (2.3M) [image/jpeg]\nSaving to: ‘hani.jpeg’\n\nhani.jpeg           100%[===================&gt;]   2.33M  --.-KB/s    in 0.05s   \n\n2024-04-20 14:44:18 (51.6 MB/s) - ‘hani.jpeg’ saved [2445959/2445959]\n\n\n\n\nnote: 위 코드는 코랩 혹은 리눅스기반 환경에서 동작가능.\n\n불러온 이미지는 아래와 같다.\n\nhani,hani.shape\n\n(array([[[0.44705882, 0.48627451, 0.49411765],\n         [0.43137255, 0.46666667, 0.48627451],\n         [0.45882353, 0.50196078, 0.5254902 ],\n         ...,\n         [0.6627451 , 0.6627451 , 0.70196078],\n         [0.63529412, 0.62745098, 0.67058824],\n         [0.64313725, 0.63529412, 0.67843137]],\n \n        [[0.45882353, 0.49803922, 0.50588235],\n         [0.44313725, 0.48235294, 0.49019608],\n         [0.4627451 , 0.50588235, 0.52156863],\n         ...,\n         [0.63921569, 0.63921569, 0.67843137],\n         [0.64313725, 0.63529412, 0.67843137],\n         [0.63137255, 0.62352941, 0.66666667]],\n \n        [[0.45490196, 0.49411765, 0.50196078],\n         [0.4627451 , 0.49803922, 0.51764706],\n         [0.45882353, 0.50196078, 0.5254902 ],\n         ...,\n         [0.64313725, 0.64313725, 0.68235294],\n         [0.65490196, 0.65490196, 0.69411765],\n         [0.64313725, 0.64313725, 0.68235294]],\n \n        ...,\n \n        [[0.69411765, 0.69803922, 0.70588235],\n         [0.68627451, 0.69019608, 0.69803922],\n         [0.69411765, 0.69803922, 0.70588235],\n         ...,\n         [0.60784314, 0.6       , 0.60392157],\n         [0.6       , 0.59215686, 0.59607843],\n         [0.59607843, 0.58823529, 0.59215686]],\n \n        [[0.70196078, 0.70588235, 0.71372549],\n         [0.72156863, 0.7254902 , 0.73333333],\n         [0.69019608, 0.69411765, 0.70196078],\n         ...,\n         [0.61176471, 0.60392157, 0.60784314],\n         [0.60392157, 0.59607843, 0.6       ],\n         [0.61568627, 0.60784314, 0.61176471]],\n \n        [[0.7254902 , 0.72941176, 0.7372549 ],\n         [0.73333333, 0.7372549 , 0.74509804],\n         [0.70980392, 0.71372549, 0.72156863],\n         ...,\n         [0.61176471, 0.60392157, 0.60784314],\n         [0.60392157, 0.59607843, 0.6       ],\n         [0.61960784, 0.61176471, 0.61568627]]]),\n (4032, 3024, 3))\n\n\n\n이미지는 4032 \\(\\times\\) 3024 개의 격자(픽셀)로 이루어져 있음\n\n이미지를 보는 방법은 아래와 같다.\n\nplt.imshow(hani) # 모든이미지, 하니매트릭스\n\n\n\n\n\n\n\n\n\nplt.imshow(hani[1000:1500, 1000:2000,:]) # 얼굴만 확대, 하니의 서브매트릭스 \n\n\n\n\n\n\n\n\n(1) 하니이미지를 나타내는 어레이를 변형하여 빨간색을 의미하는 칼라만 남겨서 “빨간하니”를 만들고 이미지를 출력하라.\n(풀이1) – 제가 원래 하려고 했던 풀이\n\nplt.imshow(np.stack([hani[:,:,0], hani[:,:,0]*0, hani[:,:,0]*0],axis=-1))\n\n\n\n\n\n\n\n\n(풀이2) – GPT이용하여 얻은 힌트\n\n# hani[:,:,1].fill(0)\n# hani[:,:,2].fill(0)\n\n\n# plt.imshow(hani)\n\n(2) 하니의 모든 값에 루트를 취하여 “루트하니”를 만들고 “원본하니”와 “루트하니”를 좌우로 나란히 배치하여 출력하라.\n(풀이)\n\nroot_hani = np.sqrt(hani) \n\n\nplt.imshow(np.concatenate([hani,root_hani],axis=1))\n\n\n\n\n\n\n\n\n(3) 하니의 모든값에 아래와 같은 함수를 적용하라.\n\n\\(f(x)=\\begin{cases} \\sqrt{x} & x&gt;0.75 \\\\ x & x \\leq 0.75 \\end{cases}\\)\n\n함수의 결과로 얻어진 매트릭스를 “후광하니”라고 부르자. “원본하니”와 “후광하니”를 좌우로 나란히 배치하여 출력하라.\n(풀이)\n\nshining_hani = np.where(hani&gt;0.75, np.sqrt(hani), hani)\n\n\nplt.imshow(np.concatenate([hani,shining_hani],axis=1))"
  },
  {
    "objectID": "posts/07wk-2.html#c.-mnist-data",
    "href": "posts/07wk-2.html#c.-mnist-data",
    "title": "07wk-2: numpy (2)",
    "section": "C. MNIST data",
    "text": "C. MNIST data\n아래는 0~9가지의 숫자이미지가 저장된 이미지데이터를 불러오는 코드이다.\n\n# URL 설정\nurl = 'https://github.com/guebin/PP2023/raw/main/posts/02_DataScience/mnist.npz'\n\n# URL에서 파일 다운로드\nurllib.request.urlretrieve(url, './mnist.npz')\n\n# 데이터 로드\ndata = np.load('./mnist.npz')\nxtrain, ytrain, xtest, ytest = data['x_train']/255, data['y_train'], data['x_test']/255, data['y_test']\n\n# mnist.npz 삭제\n!rm mnist.npz\n\n\nprint(f'이미지: xtrain -- {xtrain.shape}, xtest -- {xtest.shape}')\nprint(f'라벨: ytrain -- {ytrain.shape}, ytest -- {ytest.shape}')\n\n이미지: xtrain -- (60000, 28, 28), xtest -- (10000, 28, 28)\n라벨: ytrain -- (60000,), ytest -- (10000,)\n\n\n아래는 데이터에 대한 설명이다.\n\n전체의 이미지의 수는 70000개이며, 60000개의 이미지 \\({\\tt xtrain}\\)에 10000개의 이미지는 \\({\\tt xtest}\\)에 저장되어 있다.\n이미지에 대한 라벨은 각각 \\({\\tt ytrain}\\)과 \\(\\tt ytest\\)에 저장되어 있다. 따라서 \\(\\tt ytrain\\)에는 60000개의 이미지에 해당하는 라벨이, \\(\\tt ytest\\)에는 10000개의 이미지에 해당하는 라벨이 기록되어 있다.\n\n\nfig, ax = plt.subplots(2,5,figsize=(10,4))\n\nax[0][0].imshow(xtrain[0],cmap='gray'); ax[0][0].set_title(f'label={ytrain[0]}');\nax[0][1].imshow(xtrain[1],cmap='gray'); ax[0][1].set_title(f'label={ytrain[1]}');\nax[0][2].imshow(xtrain[2],cmap='gray'); ax[0][2].set_title(f'label={ytrain[2]}');\nax[0][3].imshow(xtrain[3],cmap='gray'); ax[0][3].set_title(f'label={ytrain[3]}');\nax[0][4].imshow(xtrain[4],cmap='gray'); ax[0][4].set_title(f'label={ytrain[4]}');\n\nax[1][0].imshow(xtrain[5],cmap='gray'); ax[1][0].set_title(f'label={ytrain[5]}');\nax[1][1].imshow(xtrain[6],cmap='gray'); ax[1][1].set_title(f'label={ytrain[6]}');\nax[1][2].imshow(xtrain[7],cmap='gray'); ax[1][2].set_title(f'label={ytrain[7]}');\nax[1][3].imshow(xtrain[8],cmap='gray'); ax[1][3].set_title(f'label={ytrain[8]}');\nax[1][4].imshow(xtrain[9],cmap='gray'); ax[1][4].set_title(f'label={ytrain[9]}');\n\nfig.tight_layout()\n\n\n\n\n\n\n\n\n(1) 70000개의 이미지중 0~9에 해당하는 이미지는 각각 몇장씩 들어있는가?\n(풀이)\n\ny = np.concatenate([ytrain,ytest]).tolist()\n\n\n{s:y.count(s) for s in set(y)}\n\n{0: 6903,\n 1: 7877,\n 2: 6990,\n 3: 7141,\n 4: 6824,\n 5: 6313,\n 6: 6876,\n 7: 7293,\n 8: 6825,\n 9: 6958}\n\n\n(2) \\({\\tt xtrain}\\)에서 손글씨 0을 의미하는 이미지만을 모아서 새로운 다차원 array \\({\\tt xtrain0}\\)를 만들어라. 이 다차원 array 에서 처음과 마지막 이미지를 출력하라.\nhint: \\({\\tt xtrain0}\\) 의 shape은 (5923,28,28)이어야 한다.\n(풀이)\n\nxtrain0 = xtrain[ytrain == 0] # 숫자0이 라벨로 기록된 이미지들 \n\n\nplt.imshow(xtrain0[0],cmap=\"gray\")\n\n\n\n\n\n\n\n\n\nplt.imshow(xtrain0[-1],cmap=\"gray\")\n\n\n\n\n\n\n\n\n(3) \\({\\tt xtrain}\\)에서 손글씨 0을 의미하는 이미지들의 평균을 계산하라. 즉 아래를 계산하라.\n\n\\({\\tt xtrain0mean} = \\frac{1}{5923}\\sum_{i=1}^{5923} {\\tt xtrain0[i, :, :]}\\)\n\n계산결과를 출력하라.\n(풀이)\n첫번째 이미지 (왼쪽) 두번째 이미지 (가운데) 와 처음 두개의 이미지의 평균 (오른쪽) 은 아래와 같이 나타낼 수 있다.\n\nfig,ax = plt.subplots(1,3)\nax[0].imshow(xtrain0[0],cmap=\"gray\")\nax[1].imshow(xtrain0[1],cmap=\"gray\")\n#ax[2].imshow((xtrain0[0]+xtrain0[1])/2,cmap=\"gray\")\nax[2].imshow(xtrain0[[0,1]].mean(axis=0),cmap=\"gray\")\n\n\n\n\n\n\n\n\n전체이미지의 평균은 아래와 같다.\n\nplt.imshow(xtrain0.mean(axis=0),cmap='gray')\n\n\n\n\n\n\n\n\n(4) \\({\\tt xtrain}\\)에서 각 라벨에 대한 평균이미지를 계산하고 계산결과를 \\({\\tt imgmean}\\)에 길이가 10인 list로 저장하라. 즉 \\({\\tt imgmean}\\)은 아래와 같은 자료구조를 가지고 있어야 한다.\n\n\\({\\tt imgmean}=\\big[{\\tt imgmean[0]},\\dots, {\\tt imgmean[9]}\\big]\\)\n\\({\\tt imgmean[0]}, \\dots, {\\tt imgmean[9]}\\) 는 각각 (28,28)의 shape을 가진 numpy array\n\\({\\tt imgmean[0]}, \\dots, {\\tt imgmean[9]}\\) 는 각각 숫자 0,1, …, 9의 평균이미지를 의미\n\n\\({\\tt imgmean[0]},\\dots, {\\tt imgmean[9]}\\)를 시각화 하라.\n(풀이)\n\nimgmean = [xtrain[ytrain == i].mean(axis=0) for i in range(10)]\n\n\nfig, ax = plt.subplots(2,5,figsize=(10,4))\n\nax[0][0].imshow(imgmean[0],cmap='gray')\nax[0][1].imshow(imgmean[1],cmap='gray')\nax[0][2].imshow(imgmean[2],cmap='gray')\nax[0][3].imshow(imgmean[3],cmap='gray')\nax[0][4].imshow(imgmean[4],cmap='gray')\n\nax[1][0].imshow(imgmean[5],cmap='gray')\nax[1][1].imshow(imgmean[6],cmap='gray')\nax[1][2].imshow(imgmean[7],cmap='gray')\nax[1][3].imshow(imgmean[8],cmap='gray')\nax[1][4].imshow(imgmean[9],cmap='gray')\n\nfig.tight_layout()\n\n\n\n\n\n\n\n\n(5) \\({\\tt xtrain}\\)의 두번째 이미지와 \\({\\tt imgmean[0]}\\)의 차이를 제곱한 값의 평균을 구하라. 즉 아래를 계산하라.\n\n\\(mean\\Big(({\\tt xtrain[1]}-{\\tt imgmean[0]})^2\\Big)\\)\n\n(풀이)\n\nfig, ax = plt.subplots(1,3)\nax[0].imshow(xtrain[1],cmap=\"gray\")\nax[1].imshow(imgmean[0],cmap=\"gray\")\nax[2].imshow((xtrain[1]-imgmean[0])**2,cmap=\"gray\")\n\n\n\n\n\n\n\n\n\n((xtrain[1]-imgmean[0])**2).mean()\n\n0.03537037336385432\n\n\n(6) 모든 \\(j=0,1,\\dots,9\\) 에 대하여 아래를 계산하라.\n\n\\(mean\\Big(({\\tt xtrain[1]}-{\\tt imgmean[j]})^2\\Big)\\)\n\n계산값이 가장 작게 나오는 \\(j\\)는 얼마인가? 위의 계산결과를 토대로 \\({\\tt xtrain}\\)의 두번째 이미지는 어떠한 숫자를 의미한다고 “분류”하는 것이 타당한가?\n(풀이)\n\n{j:((xtrain[1]-imgmean[j])**2).mean() for j in range(10)}\n\n{0: 0.03537037336385432,\n 1: 0.11495388576147866,\n 2: 0.09465585697275321,\n 3: 0.09057822103883667,\n 4: 0.10401706236099066,\n 5: 0.07100192423576142,\n 6: 0.09006332783104219,\n 7: 0.09943866938812378,\n 8: 0.09098879425485074,\n 9: 0.09820108036961576}\n\n\n((xtrain[1]-imgmean[j])**2).mean() 를 가장 작게만드는 j는 0 이다.\n\nfig, ax = plt.subplots(10,3,figsize=(7.5,30))\nfor j in range(10):\n    ax[j][0].imshow(xtrain[1],cmap=\"gray\"); \n    ax[j][0].set_title(\"xtrain[1]\")\n    ax[j][1].imshow(imgmean[j],cmap=\"gray\")\n    ax[j][1].set_title(f\"imgmean[{j}]\")\n    ax[j][2].imshow((xtrain[1]-imgmean[j])**2,cmap=\"gray\")\n    ax[j][2].set_title(f'loss = {((xtrain[1]-imgmean[j])**2).mean():.4f}')\nfig.tight_layout()\n\n\n\n\n\n\n\n\nxtrain[1] 이미지는 0으로 분류하는게 타당해보인다.\n(7) 아래와 같은 numpy array 를 생성하라.\n\\[{\\tt loss}=\n\\begin{bmatrix}\n{\\tt loss[0,0]} & \\dots & {\\tt loss[0,9]} \\\\\n{\\tt loss[1,0]} & \\dots & {\\tt loss[1,9]} \\\\\n\\dots & \\dots &  \\dots \\\\\n{\\tt loss[59999,0]}& \\dots &{\\tt loss[59999,9]} \\\\\n\\end{bmatrix}\\]\n단, \\({\\tt loss[i,j]} = mean\\Big(({\\tt xtrain[i]}-{\\tt imgmean[j]})^2\\Big)\\)\n위에서 생성한 \\({\\tt loss}\\)를 이용해 (6)와 같은 방식으로 \\({\\tt xtrain}\\)의 모든 이미지에 대한 분류를 수행하라.\nhint: \\({\\tt loss}\\)에서 “최소값을 가지는 원소의 인덱스를 출력”하는 함수를 각 행별로 적용하면 된다.\n(풀이)\n\nloss = np.array([[np.mean((xtrain[i] - imgmean[j])**2) for j in range(10)] for i in range(60000)])\nloss\n\narray([[0.08436263, 0.08777293, 0.08016276, ..., 0.07754168, 0.06951451,\n        0.07958829],\n       [0.03537037, 0.11495389, 0.09465586, ..., 0.09943867, 0.09098879,\n        0.09820108],\n       [0.10793399, 0.09755518, 0.08827192, ..., 0.08612435, 0.09451805,\n        0.0769925 ],\n       ...,\n       [0.09429922, 0.08422548, 0.09809041, ..., 0.07034968, 0.06364432,\n        0.06299717],\n       [0.06883611, 0.07933228, 0.0698403 , ..., 0.07655916, 0.08341635,\n        0.07272038],\n       [0.08297837, 0.0728127 , 0.06969071, ..., 0.07119765, 0.05851329,\n        0.06540166]])\n\n\n\nloss.argmin(axis=-1) # 꽤 그럴듯하게 예측하고 있음\n\narray([5, 0, 4, ..., 5, 6, 8])\n\n\n(8) (7)에서 수행한 분류결과와 실제 라벨 \\({\\tt ytrain}\\)을 비교하라. 얼마나 많은 결과가 일치하는지 비율을 계산하라.\n(풀이)\n\nsum(ytrain == loss.argmin(axis=-1)) / 60000\n\n0.8079833333333334\n\n\n\n(ytrain == loss.argmin(axis=-1)).mean()\n\n0.8079833333333334\n\n\n(9) \\({\\tt xtrain}\\)에서 학습한 평균이미지 \\({\\tt imgmean}\\)를 바탕으로 \\({\\tt xtest}\\)의 이미지를 분류하라. 분류결과를 \\({\\tt ytest}\\)와 비교하라. 얼마나 많은 결과가 일치하는지 비율을 계산하라.\n(풀이)\n\nloss = np.array([[np.mean((xtest[i] - imgmean[j])**2) for j in range(10)] for i in range(10000)])\n(loss.argmin(axis=-1) == ytest).mean()\n\n0.8203\n\n\n(10) (9)의 과정에서 잘못분류된 이미지 10개를 선택하여 시각화 하라.\n\n실제 라벨과 잘못된 라벨을 구분하여 시각화 할 것\n\n\nnp.sum(loss.argmin(axis=-1) != ytest) # 잘못분류된것\n\n1797\n\n\n\nimg = xtest[loss.argmin(axis=-1) != ytest] # 잘못분류된 이미지\nlabel = ytest[loss.argmin(axis=-1) != ytest] # 잘못분류된 이미지의 실제라벨\nestimated = loss.argmin(axis=-1)[loss.argmin(axis=-1) != ytest] # 잘못분류된 이미지의 예측된라벨\n\n\nfig,ax = plt.subplots(2,5,figsize=(10,4))\nfor i in range(2):\n    for j in range(5):      \n        ax[i][j].imshow(img[i*5+j],cmap='gray')\n        ax[i][j].set_title(f\"{label[0]} / {estimated[0]}\")\nfig.tight_layout()"
  },
  {
    "objectID": "posts/12wk-1.html",
    "href": "posts/12wk-1.html",
    "title": "12wk-1: 퀴즈7",
    "section": "",
    "text": "Caution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별 다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\n\n1. – 10점\n아래의 자료를 불러오라.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv').drop(['Loaned From','Best Overall Rating'],axis=1).dropna().reset_index(drop=True)\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nWork Rate\nBody Type\nReal Face\nPosition\nJoined\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nHigh/ Medium\nUnique\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\n2026\n189cm\n82kg\n€157M\n8.0\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\n2026\n179cm\n69kg\n€155M\n8.0\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nHigh/ High\nStocky (170-185)\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\n2024\n172cm\n69kg\n€97.7M\n19.0\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\n2025\n181cm\n70kg\n€198.9M\n17.0\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nHigh/ High\nNormal (170-)\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\n2026\n172cm\n68kg\n€154.4M\n23.0\n\n\n\n\n5 rows × 27 columns\n\n\n\n선수들의 키의 평균을 구하여라. (선수들의키는 ’Height’라는 열로 저장되어 있음)\n(풀이)\n\nnp.mean([int(l.replace('cm','')) for l in df.Height])\n\n180.85211439745783\n\n\n\n\n2. – 10점\n표준정규분포에서 1000개의 난수를 생성하여 아래와 같은 데이터프레임을 만들어라.\n\n# 생성예시 \n\n\n\n\n\n\n\n\nX0\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\nX9\n...\nX90\nX91\nX92\nX93\nX94\nX95\nX96\nX97\nX98\nX99\n\n\n\n\n0\n0.383420\n1.084175\n1.142778\n0.307894\n0.237787\n0.355951\n-1.663075\n-1.382773\n-1.926845\n-1.486216\n...\n-0.993172\n0.725927\n0.365930\n0.344201\n0.554081\n1.308688\n0.405376\n-0.185070\n1.055388\n1.187014\n\n\n1\n-0.250273\n-1.580452\n0.112415\n-2.384201\n0.785381\n1.503459\n-0.540345\n-0.288569\n0.653383\n0.454134\n...\n-0.004055\n1.266743\n0.117038\n-0.350165\n0.410882\n-0.763975\n0.766821\n1.032189\n0.404380\n-0.134916\n\n\n2\n-0.767637\n-0.642942\n-0.247824\n-1.457658\n-0.091060\n0.323402\n-0.774021\n0.659558\n-0.794595\n-2.605380\n...\n-0.905361\n0.893707\n-1.521594\n0.856883\n-0.401441\n-1.111551\n0.958028\n-0.015302\n0.891259\n-0.826834\n\n\n3\n1.822226\n-1.258543\n-0.705506\n-0.519831\n-0.593394\n-1.399224\n-1.616172\n-0.626952\n-0.083539\n0.528519\n...\n-0.557674\n-0.114760\n-1.435302\n0.017538\n-0.132572\n-0.300457\n-0.516030\n-1.617621\n-0.503742\n1.212361\n\n\n4\n0.060574\n-0.565512\n-1.538121\n1.758610\n0.084860\n0.412914\n-1.763512\n-1.859547\n-0.049909\n-1.847753\n...\n1.026497\n2.004166\n0.048826\n-1.540996\n0.512631\n1.968778\n-1.593192\n0.138268\n1.101756\n-0.871777\n\n\n5\n0.607008\n-0.352237\n1.186118\n1.446668\n0.762599\n-0.244244\n0.304258\n1.284617\n0.110343\n-2.962656\n...\n-0.013544\n0.807378\n0.696742\n1.674315\n0.072385\n-0.908225\n-0.040520\n0.468065\n1.061927\n0.424025\n\n\n6\n1.684726\n0.787468\n-0.515706\n-1.345645\n1.310011\n-2.072882\n-0.200044\n-2.488585\n-1.760744\n-0.790638\n...\n0.567038\n-0.909974\n-0.514430\n0.794560\n2.100759\n-0.946753\n0.718903\n0.465566\n-2.334143\n0.080626\n\n\n7\n0.147938\n-1.731017\n-0.432569\n0.764183\n-1.550268\n-0.885863\n-0.480227\n-0.301026\n0.569153\n0.982708\n...\n-1.493670\n-0.915688\n0.373344\n-0.390797\n-0.630293\n0.102486\n-0.039481\n-1.336725\n0.052716\n-0.412041\n\n\n8\n-0.429898\n-0.803940\n-0.575407\n-0.105742\n1.169761\n-0.028086\n0.355928\n-0.887930\n-0.436832\n-0.059071\n...\n-0.074304\n0.950444\n-0.195984\n-1.212342\n-0.545283\n0.215465\n-0.758794\n-1.042145\n-0.909816\n1.195194\n\n\n9\n-0.255254\n-0.969684\n0.405988\n0.411374\n-0.793646\n1.014501\n-0.812766\n0.238440\n-0.265215\n0.408764\n...\n-0.147446\n-0.992780\n0.363403\n0.017319\n0.879830\n0.041092\n-1.286358\n0.710257\n-1.908729\n0.650026\n\n\n\n\n10 rows × 100 columns\n\n\n\nNotes\n\ncolumn의 이름은 X0,...,X99와 같이 되어야 한다.\n표준정규분포에서 난수를 뽑는 코드는 np.random.randn 혹은 np.random.normal 을 이용한다.\n\n(풀이)\n\ndf = pd.DataFrame(np.random.randn(1000).reshape(10,100))\ndf.columns = [f\"X{l}\" for l in df.columns]\ndf\n\n\n\n\n\n\n\n\nX0\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\nX9\n...\nX90\nX91\nX92\nX93\nX94\nX95\nX96\nX97\nX98\nX99\n\n\n\n\n0\n1.154279\n-1.076839\n0.461829\n-1.657709\n0.337098\n-1.066188\n0.863708\n0.908695\n1.002116\n-1.969111\n...\n0.343229\n1.409096\n0.781730\n1.004021\n0.385890\n-0.263554\n1.145646\n-1.317443\n-0.936349\n-0.872273\n\n\n1\n0.967545\n-0.599505\n0.311318\n0.445705\n-0.358476\n-0.955061\n-1.398404\n0.344749\n1.296573\n-0.643000\n...\n2.050203\n0.870737\n1.329552\n0.339286\n1.685011\n-0.847316\n0.052932\n0.130593\n-0.558282\n1.226135\n\n\n2\n0.254918\n-0.093590\n0.024426\n1.500279\n-1.322294\n0.013167\n-0.240090\n-0.910340\n-0.046094\n0.586833\n...\n-0.428111\n0.154454\n0.209600\n0.334046\n0.771702\n-0.023900\n-1.177482\n-1.941570\n-0.106852\n-0.417114\n\n\n3\n-0.590731\n-1.005409\n-0.623825\n0.613173\n0.597909\n0.380969\n0.226733\n0.587772\n-1.518766\n-0.280510\n...\n0.335841\n-0.870318\n-0.952133\n-1.985928\n0.109196\n-0.419957\n1.087154\n-0.336847\n1.656620\n1.539690\n\n\n4\n-0.099157\n0.352339\n0.911157\n-1.881233\n-0.256323\n0.484511\n-0.440353\n0.134911\n2.879129\n-0.299404\n...\n-0.755338\n-0.790758\n1.375327\n-0.822671\n1.111417\n0.418727\n-0.381257\n1.051045\n0.805947\n-1.027279\n\n\n5\n1.383427\n0.876598\n-1.490912\n-0.500443\n-0.455737\n0.352433\n0.148228\n2.366743\n0.779486\n0.310947\n...\n-1.252812\n-0.875156\n-0.877245\n0.909194\n0.197434\n-0.645160\n-0.591509\n-1.355754\n0.776870\n-0.260169\n\n\n6\n0.518310\n-0.526449\n-1.250760\n0.593439\n-0.642141\n0.122488\n0.764898\n-1.198715\n0.686448\n0.725643\n...\n0.899694\n1.373242\n-1.781869\n-0.096486\n-0.816270\n0.959392\n0.920707\n-0.236863\n1.406082\n-0.092026\n\n\n7\n1.460629\n0.195015\n-1.757572\n-0.430745\n-1.135580\n0.050923\n0.167272\n-1.958813\n-1.526207\n0.133903\n...\n0.408465\n-0.489587\n-0.029735\n-0.762391\n0.257323\n-2.078152\n-1.539251\n0.775559\n-1.211843\n0.255121\n\n\n8\n-0.892184\n1.368760\n1.636672\n0.076691\n-1.390924\n-0.544879\n-0.373292\n-2.451802\n1.659052\n-1.129343\n...\n-0.541981\n1.076584\n0.491549\n-0.991186\n-0.815661\n0.410818\n-0.532781\n0.796814\n0.577215\n0.800259\n\n\n9\n-1.152711\n0.475192\n-1.278233\n0.427637\n-1.787645\n-0.964571\n0.927063\n0.397576\n-1.126033\n0.471479\n...\n0.862985\n0.876735\n-0.516859\n0.278134\n-0.492077\n-0.807814\n-0.094944\n0.404810\n0.432855\n-0.386882\n\n\n\n\n10 rows × 100 columns\n\n\n\n\n\n3. – 10점\n아래의 데이터프레임을 관찰하라.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n열의 이름에 공백 ' '이 포함된 열은 모두 몇개인가?\n\n확장가능하지 않은 코드는 정답인정하지 않음 (예를들어 직접세는 경우)\n\n(풀이)\n\nsum([' ' in l for l in df.columns])\n\n13\n\n\n\n\n4. – 10점\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,20)\nrep = np.random.choice(np.arange(5,21)*5,20)\nmid = np.random.choice(np.arange(0,21)*5,20)\nfin = np.random.choice(np.arange(0,21)*5,20)\ndf = pd.DataFrame({'att':att,'rep':rep,'mid':mid,'fin':fin})\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n0\n65\n55\n50\n40\n\n\n1\n95\n100\n50\n80\n\n\n2\n65\n90\n60\n30\n\n\n3\n55\n80\n75\n80\n\n\n4\n80\n30\n30\n100\n\n\n5\n75\n40\n100\n15\n\n\n6\n65\n45\n45\n90\n\n\n7\n60\n60\n25\n0\n\n\n8\n95\n65\n20\n10\n\n\n9\n90\n80\n80\n20\n\n\n10\n55\n75\n35\n25\n\n\n11\n95\n95\n45\n0\n\n\n12\n95\n55\n15\n35\n\n\n13\n50\n80\n40\n30\n\n\n14\n50\n55\n15\n85\n\n\n15\n95\n30\n30\n95\n\n\n16\n50\n50\n45\n10\n\n\n17\n65\n55\n15\n45\n\n\n18\n70\n70\n40\n35\n\n\n19\n90\n90\n80\n90\n\n\n\n\n\n\n\n위의 데이터프레임에 아래의 공식을 적용하여 total을 계산하라.\n\ntotal = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35\n\n계산된 total을 바탕으로 아래의 규칙을 적용하여 grade를 정하라.\n\ntotal &gt;= 70: A+\n40 &lt; total&lt; 70: B0\ntotal&lt;= 40: F\n\ngrade를 원래 df에 할당하여 최종결과를 출력하라.\n(풀이)\n\ntotal = df.att*0.1 + df.rep*0.2 + df.mid*0.35 + df.fin*0.35 \ntotal\n\n0     49.00\n1     75.00\n2     56.00\n3     75.75\n4     59.50\n5     55.75\n6     62.75\n7     26.75\n8     33.00\n9     60.00\n10    41.50\n11    44.25\n12    38.00\n13    45.50\n14    51.00\n15    59.25\n16    34.25\n17    38.50\n18    47.25\n19    86.50\ndtype: float64\n\n\n\ndef make_grade(total):\n    if total &gt;= 70: \n        return \"A+\"\n    elif 40 &lt; total: \n        return \"B0\"\n    else: \n        return \"F\"\n\n\ndf.assign(grade = [make_grade(l) for l in total])\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ngrade\n\n\n\n\n0\n65\n55\n50\n40\nB0\n\n\n1\n95\n100\n50\n80\nA+\n\n\n2\n65\n90\n60\n30\nB0\n\n\n3\n55\n80\n75\n80\nA+\n\n\n4\n80\n30\n30\n100\nB0\n\n\n5\n75\n40\n100\n15\nB0\n\n\n6\n65\n45\n45\n90\nB0\n\n\n7\n60\n60\n25\n0\nF\n\n\n8\n95\n65\n20\n10\nF\n\n\n9\n90\n80\n80\n20\nB0\n\n\n10\n55\n75\n35\n25\nB0\n\n\n11\n95\n95\n45\n0\nB0\n\n\n12\n95\n55\n15\n35\nF\n\n\n13\n50\n80\n40\n30\nB0\n\n\n14\n50\n55\n15\n85\nB0\n\n\n15\n95\n30\n30\n95\nB0\n\n\n16\n50\n50\n45\n10\nF\n\n\n17\n65\n55\n15\n45\nF\n\n\n18\n70\n70\n40\n35\nB0\n\n\n19\n90\n90\n80\n90\nA+\n\n\n\n\n\n\n\n\n\n5. – 10점\n아래의 2개의 list를 관찰하자.\n\neng = ['apple', 'banana', 'carrot', 'dragonfly', 'elephant', 'forest', 'giraffe', 'honey', 'island', 'jungle']\nkor = ['사과', '바나나', '당근', '잠자리', '코끼리', '숲', '기린', '꿀', '섬', '정글']\n\n위의 list와 zip을 이용하여 아래와 같은 Dictionary를 만들어라.\n\ndct = {'apple': '사과',\n 'banana': '바나나',\n 'carrot': '당근',\n 'dragonfly': '잠자리',\n 'elephant': '코끼리',\n 'forest': '숲',\n 'giraffe': '기린',\n 'honey': '꿀',\n 'island': '섬',\n 'jungle': '정글'}\n\n(풀이)\n\n{e:k for e,k in zip(eng,kor)}\n\n{'apple': '사과',\n 'banana': '바나나',\n 'carrot': '당근',\n 'dragonfly': '잠자리',\n 'elephant': '코끼리',\n 'forest': '숲',\n 'giraffe': '기린',\n 'honey': '꿀',\n 'island': '섬',\n 'jungle': '정글'}\n\n\n\n\n6. – 50점\n\n각 문제당 10점\n\n아래의 데이터프레임을 관찰하자.\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\").drop(['PassengerId','logFare','Cabin'],axis=1).dropna()\ndf\n\n\n\n\n\n\n\n\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nEmbarked\n\n\n\n\n0\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nS\n\n\n1\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC\n\n\n2\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nS\n\n\n3\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nS\n\n\n4\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n885\n0\n3\nRice, Mrs. William (Margaret Norton)\nfemale\n39.0\n0\n5\n382652\n29.1250\nQ\n\n\n886\n0\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\nS\n\n\n887\n1\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nS\n\n\n889\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC\n\n\n890\n0\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\nQ\n\n\n\n\n712 rows × 10 columns\n\n\n\n이 데이터프레임은 타이타닉 데이터셋으로 1912년에 침몰한 타이타닉 호에 대한 자료이다. 자료의 row는 개별승객을 의미하고 자료의 column은 승객에 대한 정보를 의미한다. 각 column에 대한 설명은 아래와 같다.\n\nSurvived: 생존 여부 (0 = 사망, 1 = 생존)\nPclass: 객실 등급 (1 = 일등석, 2 = 이등석, 3 = 삼등석)\nName: 승객 이름\nSex: 성별\nAge: 나이\nSibSp: 함께 탑승한 형제자매 또는 배우자 수\nParch: 함께 탑승한 부모 또는 자녀 수\nTicket: 티켓 번호\nFare: 요금\nEmbarked: 탑승한 항구 (C = Cherbourg, Q = Queenstown, S = Southampton)\n\n예를들어 아래와 같은 첫번째 승객을 고려하면,\n\ndf.iloc[[0]]\n\n\n\n\n\n\n\n\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nEmbarked\n\n\n\n\n0\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.25\nS\n\n\n\n\n\n\n\n이 승객은 사망한 승객이며1 3등석에 타고 있으며, 이름은 Braund, Mr. Owen Harris 성별은 남, 나이는 22, Southampton 에서 탑승했다는 것을 알 수 있다.\n1 Survived = 0(1) 남성승객과 여성승객은 각각 모두 몇명인가?\n(풀이)\n\nsum(df.Sex == 'male'),sum(df.Sex == 'female') \n\n(453, 259)\n\n\n(2) 남성승객중 몇명이 살아남았는가? 여성승객중 몇명이 살아남았는가? 남성과 여성중 어떠한 성별이 더 많이 생존했다고 생각하는가?\n(풀이)\n\nsum((df.Sex == 'male') & (df.Survived ==1)),sum((df.Sex == 'female') & (df.Survived ==1))\n\n(93, 195)\n\n\n\n93/453, 195/259\n\n(0.2052980132450331, 0.752895752895753)\n\n\n(3) Pclass == 3 인 승객들에 한정하여 Fare의 평균을 계산하라.\n(풀이)\n\ndf[df.Pclass == 3].Fare.mean()\n\n13.229435211267605\n\n\n(4) 혼자 탄 승객은 모두 몇명인가?\nhint: SibSp=0 이고 Parch=0 인 승객을 조사하면된다.\n(풀이)\n\nsum((df.SibSp == 0) & (df.Parch==0))\n\n402\n\n\n(5) 혼자 탄 승객들이 각각 어떠한 항구에서 탔는지 조사하라.\n(풀이)\n\nlst = list(df[(df.SibSp == 0) & (df.Parch==0)].Embarked)\n{s:lst.count(s) for s in set(lst)}\n\n{'S': 325, 'Q': 19, 'C': 58}"
  },
  {
    "objectID": "posts/02wk-1.html",
    "href": "posts/02wk-1.html",
    "title": "02wk-1: 퀴즈1",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n\n\n\n\nWarning\n\n\n\n\n모든 문항은 부분점수 없음.\n일부문항은 부분문제를 모두 맞출경우만 정답으로 인정함.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp등)은 채점하지 않음. 즉 0점 처리함. 제출방법 모르면 물어볼것!\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n\n\n\n\n문제 1. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n(1) 아래와 같이 50개의 숫자를 나열한 배열 \\({\\bf x}=[x_1,x_2,\\dots,x_n]\\)을 상상하자.\n\nx = np.array([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n              0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n              0, 0, 0, 0, 1, 0])\nx\n\narray([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0])\n\n\n위와 같은 \\(x_i\\)에 대하여 \\(0&lt;p&lt;1\\)에서의 아래와 같은 함수 \\(l(p)\\)를 정의하라.\n\\[l(p)=\\sum_{i=1}^nx_i \\log p +\\left(n-\\sum_{i=1}^{n}x_i \\right)\\log(1-p)\\]\n파이썬을 이용하여 아래를 근사계산하라.\n\\[\\lim_{h \\to 0}\\frac{l(0.32+h)-l(0.32)}{h}\\]\n(풀이)\n\nl = lambda p: 16*np.log(p) + (50-16)*np.log(1-p)\nh =0.000000001\n(l(0.32+h)-l(0.32))/h\n\n3.5527136788005005e-06\n\n\n(2) \\(0&lt;p&lt;1\\)의 범위에서 \\(l(p)\\)를 최대로 만드는 \\(p\\)의 값을 구하라. 즉 \\(\\underset{p}{\\operatorname{argmax}} l(p)\\)를 구하라.\n(풀이)\n\np = np.linspace(1/100,1,100)[:-1]\np\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n\np[np.argmax(l(p))]\n\n0.32\n\n\n\n\n문제 2. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n길이가 100인 벡터 \\({\\bf x} = [x_0, x_1, \\dots, x_{99}]\\)를 아래와 같이 선언하라.\n\nnp.random.seed(43052)\nx = np.random.randn(100)\n\n(1) \\(x_0\\)의 값은 얼마인가?\n(풀이)\n\nx[0]\n\n0.38342048800857303\n\n\n(2) \\(x_{99}\\)의 값은 얼마인가?\n(풀이)\n\nx[99]\n\n1.1870144262405193\n\n\n(3) \\(\\sum_{i=0}^{99} x_i\\)의 값은 얼마인가?\n(풀이)\n\nnp.sum(x)\n\n-8.136079223187856\n\n\n(4) \\(\\sum_{i=22}^{55} x_i\\)의 값은 얼마인가?\n(풀이)\n\nnp.sum(x[22:56])\n\n-1.1780743585314586\n\n\n\n\n문제 3. – 10점\n길이가 100인 벡터 \\({\\bf x} = [x_0, x_1, \\dots, x_{99}]\\)를 아래와 같이 선언하라.\n\nnp.random.seed(43052)\nx = np.random.randn(100)\n\n이 벡터에 대하여\n\n\\(a=\\sum_{i=0}^{24}x_i\\)\n\\(b=\\sum_{i=25}^{49}x_i\\)\n\\(c=\\sum_{i=50}^{74}x_i\\)\n\\(d=\\sum_{i=75}^{99}x_i\\)\n\n의 값을 각각 조사하라. a,b,c,d 중 가장 큰 값은 무엇인가?\n(풀이)\n\na = np.sum(x[:25])\nb = np.sum(x[25:50])\nc = np.sum(x[50:75])\nd = np.sum(x[75:])\n\n\na,b,c,d\n\n(-3.006728261055644,\n 0.3368136525904264,\n -4.526860531092521,\n -0.9393040836301192)\n\n\n\n\n문제 4. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n(1) lambda를 이용하여 \\(f(x)=\\sin(x)\\)에 대응하는 함수를 선언하라.\n(풀이)\n\nlambda x: np.sin(x)\n\n&lt;function __main__.&lt;lambda&gt;(x)&gt;\n\n\n(2) def를 이용하여 \\(g(x)=\\cos(2x)\\)에 대응하는 함수를 선언하라.\n(풀이)\n\ndef g(x):\n    return np.cos(2*x)\n\n(3) 임의의 벡터 \\({\\bf x}=[x_0,\\dots,x_{n-1}]\\) 이 왔을때, \\({\\bf x}\\)의 최대값을 \\(x_{max}\\) 라고 하고 최소값을 \\(x_{min}\\)이라고 하자. 예를들어\n\\[{\\bf x} = [1,2,3,0]\\]\n의 경우 \\(x_{max}=3\\) 이고 \\(x_{min}=0\\) 이다. 벡터 \\({\\bf x}\\)를 입력으로 하고 출력으로 \\(x_{max}-x_{min}\\)의 계산값을 리턴하는 함수를 구현하라.\n(풀이)\n\nf = lambda x: np.max(x) - np.min(x)\n\n\nf([1,2,3,0])\n\n3\n\n\n\nf([-1,2,4,10])\n\n11\n\n\n\n\n문제 5. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(4305)\n\n(1) 생성된 \\(x_i\\) 중 0.65와 가장 가까운 값을 출력하라.\n(풀이)\n\nx[np.argmin(np.abs(x-0.65))]\n\n0.6499741766686671\n\n\n(2) 생성된 값의 평균을 구하라.\nhint \\(\\frac{1}{4305}\\sum_{i=1}^{4305}x_i\\)를 계산하면 된다. 아니면 np.mean() 함수를 이용해도된다.\n(풀이)\n\nnp.sum(x)/4305, np.mean(x)\n\n(0.4965974918744432, 0.4965974918744432)\n\n\n(3) (2)에서 계산된 평균값과 가장 가까운 \\(x_i\\)값을 출력하라.\n(풀이)\n\nx[np.argmin(np.abs(x-np.mean(x)))]\n\n0.497315535600802\n\n\n\n\n문제 6. – 20점\n\\(\\frac{\\pi}{2}\\leq x \\leq \\pi\\) 에서 \\(f(x)=\\sin(\\frac{3}{2}x)\\) 와 \\(g(x)=\\cos(2x)\\sin(5x)\\) 의 교점의 좌표를 구하라.\n\n근사값만구해도 정답으로 인정함\n\n(풀이)\n\nx = np.linspace(np.pi/2, np.pi,1000000)\nf = lambda x: np.sin(3/2*x) \ng = lambda x: np.cos(2*x)*np.sin(5*x)\n\n\nplt.plot(x,f(x))\nplt.plot(x,g(x))\n\n\n\n\n\n\n\n\n\nxx = x[np.argmin(np.abs(f(x)-g(x)))]\nxx\n\n1.9462123119258816\n\n\n\nf(xx), g(xx)\n\n(0.2204484288597834, 0.2204457729878962)\n\n\n\n\n문제 7. – 30점\n(1) 무한급수 \\(\\sum_{n=1}^{\\infty}(\\frac{1}{2})^n\\) 의 수렴 및 발산을 파이썬을 이용하여 판정하라. – 10점\n힌트\n\\(n=10, 20, 30, ..., 100\\) 등에서 \\(S_n=\\sum_{k=1}^{n}a_k\\)의 값을 조사해보고 수렴성을 판단하라.\n(풀이)\n\nn = np.linspace(1,100,100)\nan = (1/2)**n\nSn = np.cumsum(an)\n\n\nSn\n\narray([0.5       , 0.75      , 0.875     , 0.9375    , 0.96875   ,\n       0.984375  , 0.9921875 , 0.99609375, 0.99804688, 0.99902344,\n       0.99951172, 0.99975586, 0.99987793, 0.99993896, 0.99996948,\n       0.99998474, 0.99999237, 0.99999619, 0.99999809, 0.99999905,\n       0.99999952, 0.99999976, 0.99999988, 0.99999994, 0.99999997,\n       0.99999999, 0.99999999, 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ])\n\n\n수렴한다\n(2) 무한급수 \\(\\sum_{n=1}^{\\infty}\\frac{1}{n}\\) 의 수렴 및 발산을 파이썬을 이용하여 판정하라. – 20점\n힌트 – (1)번과 동일한 테크닉\n(풀이)\n\nn = np.linspace(1,100000000,100000000)\nan = 1/n\nSn = np.cumsum(an)\n\n\nSn\n\narray([ 1.        ,  1.5       ,  1.83333333, ..., 18.99789639,\n       18.9978964 , 18.99789641])\n\n\n발산한다\n\n\n성적분포\n\nimport pandas as pd\n\n\npd.read_csv(\"2wk.csv\")['2wk'].sort_values().to_numpy()\n\narray([  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,  10,  10,  10,  20,  20,  20,  20,  20,  30,  30,\n        30,  30,  40,  40,  40,  40,  40,  50,  50,  50,  50,  50,  50,\n        50,  60,  60,  60,  70,  70,  80,  80,  80,  90,  90, 100, 100,\n       100, 100, 100, 100])"
  },
  {
    "objectID": "posts/01wk-2.html#a.-함수를-선언하는-두-가지-방법",
    "href": "posts/01wk-2.html#a.-함수를-선언하는-두-가지-방법",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "A. 함수를 선언하는 두 가지 방법",
    "text": "A. 함수를 선언하는 두 가지 방법\n- 방법1: def를 이용하는 방법\n\ndef f(x):\n    return x+1\n\n\nf(3)\n\n4\n\n\n- 방법2: lambda를 사용하는 방법\n\nf = lambda x: x+1\n\n\nf(3)\n\n4"
  },
  {
    "objectID": "posts/01wk-2.html#b.-list와-np.array의-차이점",
    "href": "posts/01wk-2.html#b.-list와-np.array의-차이점",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "B. list와 np.array의 차이점",
    "text": "B. list와 np.array의 차이점\n- 리스트는 수학친화적이지 않다.\n\nlst1 = [1,2,3]\nlst2 = [-1, -2, -3]\n\n\nlst1+lst2\n\n[1, 2, 3, -1, -2, -3]\n\n\n- 넘파이는 수학친화적이다.\n\narr1 = np.array([1,2,3])\narr2 = np.array([-1, -2, -3])\n\n\narr1+arr2\n\narray([0, 0, 0])"
  },
  {
    "objectID": "posts/01wk-2.html#c.-인덱스로-벡터의-원소를-뽑는-방법",
    "href": "posts/01wk-2.html#c.-인덱스로-벡터의-원소를-뽑는-방법",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "C. 인덱스로 벡터의 원소를 뽑는 방법",
    "text": "C. 인덱스로 벡터의 원소를 뽑는 방법\n\nx = [11,22,33,-22,-33,-44]\n\n- 첫번째 원소를 뽑고 싶다면?\n\nx[0]\n\n11\n\n\n- 두번째 원소를 뽑고 싶다면?\n\nx[1]\n\n22\n\n\n- 마지막 원소를 뽑고 싶다면?\n\nx[5]\n\n-44\n\n\n\nx[-1]\n\n-44\n\n\n- 마지막에서 두번째 원소를 뽑고 싶다면?\n\nx[4]\n\n-33\n\n\n\nx[-2]\n\n-33\n\n\n- index = 0,1,2 에 해당하는 원소만 추출\n\nx[0:3] # 마지막 인덱스 3은 포함되지 않음 \n\n[11, 22, 33]\n\n\n- index = 2,3,4 에 해당하는 원소만 추출\n\nx[2:5] # 2,3,4에 해당하는 인덱스만 추출\n\n[33, -22, -33]\n\n\n- x[0:3]와 같이 처음 시작점이 0인 경우 생략가능\n\nx[:3] \n\n[11, 22, 33]\n\n\n- x[k:]와 같은 코드는 index=k에서 끝까지 뽑는다는 의미이다.\n\nx[3:6] #3,4,5\n\n[-22, -33, -44]\n\n\n\nx[3:]\n\n[-22, -33, -44]"
  },
  {
    "objectID": "posts/01wk-2.html#d.-np.cumsum-np.cumprod",
    "href": "posts/01wk-2.html#d.-np.cumsum-np.cumprod",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "D. np.cumsum(), np.cumprod()",
    "text": "D. np.cumsum(), np.cumprod()\n- 누적합\n\narr = np.array([1,-1,1,-1,1,-1])\narr\n\narray([ 1, -1,  1, -1,  1, -1])\n\n\n\nnp.cumsum(arr)\n\narray([1, 0, 1, 0, 1, 0])\n\n\n- 누적곱\n\narr = np.array([1,2,3,4])\narr\n\narray([1, 2, 3, 4])\n\n\n\nnp.cumprod(arr)\n\narray([ 1,  2,  6, 24])"
  },
  {
    "objectID": "posts/01wk-2.html#e.-plt.plot",
    "href": "posts/01wk-2.html#e.-plt.plot",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "E. plt.plot()",
    "text": "E. plt.plot()\n- 예시1: \\(x\\)없이 그리기 (라인)\n\ny=[2,3,5,2]\nplt.plot(y)\n\n\n\n\n\n\n\n\n- 예시2: \\(x\\)없이 그리기 (점)\n\ny=[2,3,5,2]\nplt.plot(y,'o')\n\n\n\n\n\n\n\n\n- 예시3: \\((x,y)\\)를 전달하여 그리기(점)\n\nx=[20,21,22,23]\ny=[2,3,5,2]\nplt.plot(x,y,'o')\n\n\n\n\n\n\n\n\n- 예시4: 겹쳐서 그리기\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o')\nplt.plot(x,y2,'--o')\n\n\n\n\n\n\n\n\n- 예시5: 겹쳐서 그리기 + 라벨\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o',label=\"y1\")\nplt.plot(x,y2,'--o',label=\"y2\")\nplt.legend()\n\n\n\n\n\n\n\n\n- 예시5: 겹쳐서 그리기 + latex 라벨\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o',label=r\"$y_1$\")\nplt.plot(x,y2,'--o',label=r\"$y_2$\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nlatex수식은 이 수업에서 필수사항은 아님\nlatex수식을 사용할 수 없어도 시험점수를 획득할때 아무런 불이익이 없음."
  },
  {
    "objectID": "posts/01wk-2.html#f.-np.argmax-np.argmin",
    "href": "posts/01wk-2.html#f.-np.argmax-np.argmin",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "F. np.argmax, np.argmin",
    "text": "F. np.argmax, np.argmin\n- 예시1\n\narr = np.array([1,2,3,2,1,0])\narr\n\narray([1, 2, 3, 2, 1, 0])\n\n\n\nnp.argmax(arr),np.argmin(arr)\n\n(2, 5)\n\n\n# 예제 – 두 함수의 교점\n\\(-1 \\leq x \\leq 3\\) 에서\n\n\\(f(x)=(x-1)^2\\) 와\n\\(g(x)=-2x+5\\)\n\n의 교점의 좌표를 구하여라.\n(풀이)\n\nx = np.linspace(-1,3,101)\nf = (x-1)**2\ng = -2*x+5 \nplt.plot(x,f,label=r\"$f(x)=(x-1)^2$\")\nplt.plot(x,g,label=r\"$g(x)=-2x+5$\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nx[np.argmin(abs(f-g))]\n\n2.0\n\n\n\n2,(2-1)**2\n\n(2, 1)\n\n\n\n이것이 교점의 좌표"
  },
  {
    "objectID": "posts/06wk-2.html#a.-선언",
    "href": "posts/06wk-2.html#a.-선언",
    "title": "06wk-2: numpy (1)",
    "section": "A. 선언",
    "text": "A. 선언\n\na=np.array([1,2,3]) # list를 만들고 ndarray화 시킴 \nl=[1,2,3]"
  },
  {
    "objectID": "posts/06wk-2.html#b.-기본연산-브로드캐스팅",
    "href": "posts/06wk-2.html#b.-기본연산-브로드캐스팅",
    "title": "06wk-2: numpy (1)",
    "section": "B. 기본연산 브로드캐스팅",
    "text": "B. 기본연산 브로드캐스팅\n\na+1 ## [1,2,3] + 1 = [2,3,4]\n\narray([2, 3, 4])\n\n\n\nl+1\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n\na*2\n\narray([2, 4, 6])\n\n\n\nl*2\n\n[1, 2, 3, 1, 2, 3]\n\n\n\na/2\n\narray([0.5, 1. , 1.5])\n\n\n\nl/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n\na**2\n\narray([1, 4, 9])\n\n\n\nl**2\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n\n\n\na%2 # %2 = 2로 나눈 나머지를 리턴 a=[1,2,3] \n\narray([1, 0, 1])\n\n\n\nl%2\n\nTypeError: unsupported operand type(s) for %: 'list' and 'int'"
  },
  {
    "objectID": "posts/06wk-2.html#c.-기타수학연산지원",
    "href": "posts/06wk-2.html#c.-기타수학연산지원",
    "title": "06wk-2: numpy (1)",
    "section": "C. 기타수학연산지원",
    "text": "C. 기타수학연산지원\n\nnp.sqrt(a), np.sqrt(l)\n\n(array([1.        , 1.41421356, 1.73205081]),\n array([1.        , 1.41421356, 1.73205081]))\n\n\n\nnp.log(a), np.log(l)\n\n(array([0.        , 0.69314718, 1.09861229]),\n array([0.        , 0.69314718, 1.09861229]))\n\n\n\nnp.exp(a), np.exp(l)\n\n(array([ 2.71828183,  7.3890561 , 20.08553692]),\n array([ 2.71828183,  7.3890561 , 20.08553692]))\n\n\n\nnp.sin(a), np.sin(l)\n\n(array([0.84147098, 0.90929743, 0.14112001]),\n array([0.84147098, 0.90929743, 0.14112001]))"
  },
  {
    "objectID": "posts/06wk-2.html#d.-인덱싱-1차원",
    "href": "posts/06wk-2.html#d.-인덱싱-1차원",
    "title": "06wk-2: numpy (1)",
    "section": "D. 인덱싱 1차원",
    "text": "D. 인덱싱 1차원\n- 선언\n\nl=[11,22,33,44,55,66] \na=np.array(l) \n\n- 인덱스로 접근\n\nl[0],l[1],l[2],l[3],l[-2],l[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n\na[0],a[1],a[2],a[3],a[-2],a[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n- : 이용 (슬라이싱)\n\nl[2:4] # index 2에서 시작, index 4는 포함하지 않음 \n\n[33, 44]\n\n\n\na[2:4] \n\narray([33, 44])\n\n\n- 정수배열에 의한 인덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na[[0,2,4]] # index=0, index=2, index=4 에 해당하는 원소를 뽑고 싶다 \n\narray([11, 33, 55])\n\n\n\nl[[0,2,4]] # 리스트는 불가능 \n\nTypeError: list indices must be integers or slices, not list\n\n\n- 부울값에 의한 인덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na[[True,False,True,False,True,False]] \n\narray([11, 33, 55])\n\n\n응용하면?\n\na &lt; 33 \n\narray([ True,  True, False, False, False, False])\n\n\n\na[a&lt;33]\n\narray([11, 22])\n\n\n리스트는 불가능\n\nl&lt;33 # 여기에서부터 불가능 \n\nTypeError: '&lt;' not supported between instances of 'list' and 'int'\n\n\n\nl[[True,False,True,False,True,False]] # 이것도 불가능 \n\nTypeError: list indices must be integers or slices, not list"
  },
  {
    "objectID": "posts/06wk-2.html#e.-인덱싱-2차원",
    "href": "posts/06wk-2.html#e.-인덱싱-2차원",
    "title": "06wk-2: numpy (1)",
    "section": "E. 인덱싱 2차원",
    "text": "E. 인덱싱 2차원\n- 중첩리스트와 2차원 np.array 선언\n\nA = [[1,2,3,4],[-1,-2,-3,-4],[5,6,7,8],[-5,-6,-7,-8]]\nA2 = np.array(A)\n\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA\n\n[[1, 2, 3, 4], [-1, -2, -3, -4], [5, 6, 7, 8], [-5, -6, -7, -8]]\n\n\n- A의 원소 인덱싱\n\nA[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2의 원소 인덱싱\n\nA2[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2에서만 되는 기술 (넘파이에서 제시하는 신기술, R에서는 기본적으로 쓰던것, 이중list는 불가능)\n\nA2[0,0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1,2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1,0] # (4,1)의 원소 \n\n-5\n\n\n- 정수배열에 의한 인덱싱 & 슬라이싱!\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA2[0,0:2] # 1행1열, 1행2열 \n\narray([1, 2])\n\n\n\nA2[0,:] # 1행 \n\narray([1, 2, 3, 4])\n\n\n\nA2[0] # 1행\n\narray([1, 2, 3, 4])\n\n\n\nA2[[0,2],:] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[[0,2]] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[:,0] # 1열 \n\narray([ 1, -1,  5, -5])\n\n\n\nA2[:,[0]] # 1열 \n\narray([[ 1],\n       [-1],\n       [ 5],\n       [-5]])\n\n\n\nA2[:,[0,2]] # 1열, 3열\n\narray([[ 1,  3],\n       [-1, -3],\n       [ 5,  7],\n       [-5, -7]])\n\n\n\nA2[0:2,[0,2]] # 1행~2행 //  1열,3열 \n\narray([[ 1,  3],\n       [-1, -3]])"
  },
  {
    "objectID": "posts/06wk-2.html#f.-1차원-배열의-선언",
    "href": "posts/06wk-2.html#f.-1차원-배열의-선언",
    "title": "06wk-2: numpy (1)",
    "section": "F. 1차원 배열의 선언",
    "text": "F. 1차원 배열의 선언\n- 리스트나 튜플을 선언하고 형변환\n\nnp.array((1,2,3)) # 튜플-&gt;넘파이어레이 \n\narray([1, 2, 3])\n\n\n\nnp.array([1,2,3]) # 리스트 -&gt;넘파이어레이 \n\narray([1, 2, 3])\n\n\n- range()를 이용해서 선언하고 형변환\n\nnp.array(range(10)) # range(10) -&gt; 넘파이어레이 \n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n- np.zeros, np.ones\n\nnp.zeros(3) \n\narray([0., 0., 0.])\n\n\n\nnp.ones(4)\n\narray([1., 1., 1., 1.])\n\n\n- np.linspace\n\nnp.linspace(0,1,12) # 0에서 시작하고 1에서 끝남 (양끝점 모두 포함)\n\narray([0.        , 0.09090909, 0.18181818, 0.27272727, 0.36363636,\n       0.45454545, 0.54545455, 0.63636364, 0.72727273, 0.81818182,\n       0.90909091, 1.        ])\n\n\n\nlen(np.linspace(0,1,12)) # 길이는 12\n\n12\n\n\n- np.arange\n\nnp.arange(5) # np.array(range(5))\n\narray([0, 1, 2, 3, 4])\n\n\n\nnp.arange(1,6) # np.array(range(1,6))\n\narray([1, 2, 3, 4, 5])"
  },
  {
    "objectID": "posts/06wk-2.html#g.-reshape",
    "href": "posts/06wk-2.html#g.-reshape",
    "title": "06wk-2: numpy (1)",
    "section": "G. reshape",
    "text": "G. reshape\n- reshape: ndarray의 특수한 기능\n\na=np.array([11,22,33,44,55,66])\na ## 길이가 6인 벡터 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na.reshape(2,3) ## (2,3) matrix 라고 생각해도 무방 \n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\nnote: reshape은 a자체를 변화시키는것은 아님\n\na # a는 그대로 있음 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\nb= a.reshape(2,3) # a를 reshape한 결과를 b에 저장 \nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\na # a는 여전히 그대로 있음\n\narray([11, 22, 33, 44, 55, 66])\n\n\n- 다시 b를 a처럼 바꾸고 싶다\n\nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\nb.reshape(6) # b는 (2,3) matrix , 그런데 이것을 길이가 6인 벡터로 만들고 싶다. \n\narray([11, 22, 33, 44, 55, 66])\n\n\n- reshape with -1\n\na=np.arange(24) # np.array(range(24))\na\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.reshape(2,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(3,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(4,-1)\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(5,-1)\n\nValueError: cannot reshape array of size 24 into shape (5,newaxis)\n\n\n\na.reshape(6,-1)\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23]])\n\n\n\na.reshape(7,-1)\n\nValueError: cannot reshape array of size 24 into shape (7,newaxis)\n\n\n\na.reshape(8,-1)\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17],\n       [18, 19, 20],\n       [21, 22, 23]])\n\n\n\na.reshape(12,-1)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb= a.reshape(12,-1)\nb\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb.reshape(-1) # b를 다시 길이가 24인 벡터로!\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])"
  },
  {
    "objectID": "posts/06wk-2.html#h.-2차원-배열의-선언",
    "href": "posts/06wk-2.html#h.-2차원-배열의-선언",
    "title": "06wk-2: numpy (1)",
    "section": "H. 2차원 배열의 선언",
    "text": "H. 2차원 배열의 선언\n\nnp.zeros((3,3))\n\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\nnp.ones((3,3))\n\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\n\nnp.diag([1,2,3,-1])\n\narray([[ 1,  0,  0,  0],\n       [ 0,  2,  0,  0],\n       [ 0,  0,  3,  0],\n       [ 0,  0,  0, -1]])"
  },
  {
    "objectID": "posts/06wk-2.html#i.-랜덤으로-배열-생성",
    "href": "posts/06wk-2.html#i.-랜덤으로-배열-생성",
    "title": "06wk-2: numpy (1)",
    "section": "I. 랜덤으로 배열 생성",
    "text": "I. 랜덤으로 배열 생성\n\nnp.random.randn(10) # 표쥰정규분포에서 10개를 뽑음 \n\narray([-0.33138513,  1.42650878,  1.22837316,  0.08113144, -1.0972836 ,\n        1.66641222,  0.18244459,  0.45246865, -1.22156378,  0.18756565])\n\n\n\nnp.random.rand(10) # 0~1사이에서 10개를 뽑음\n\narray([0.67642264, 0.06040223, 0.48991224, 0.32202819, 0.22195857,\n       0.31407011, 0.82567895, 0.14494499, 0.74293485, 0.37775136])\n\n\n\nnp.random.randn(4).reshape(2,2) # 표준정규분포에서 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[-1.1514733 , -0.82454175],\n       [-0.07976586,  0.0863252 ]])\n\n\n\nnp.random.rand(4).reshape(2,2) # 0~1 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[0.06084905, 0.54804885],\n       [0.64428734, 0.76590051]])"
  },
  {
    "objectID": "posts/06wk-2.html#j.-행렬관련기능",
    "href": "posts/06wk-2.html#j.-행렬관련기능",
    "title": "06wk-2: numpy (1)",
    "section": "J. 행렬관련기능",
    "text": "J. 행렬관련기능\n\nA=np.arange(4).reshape(2,2) \nA\n\narray([[0, 1],\n       [2, 3]])\n\n\n\nA.T # .T는 전치행렬을 구해줌 \n\narray([[0, 2],\n       [1, 3]])\n\n\n\nnp.linalg.inv(A) # np.linalg.inv는 역행렬을 구해주는 함수 \n\narray([[-1.5,  0.5],\n       [ 1. ,  0. ]])\n\n\n\nA @ np.linalg.inv(A) # @는 행렬곱을 수행 \n\narray([[1., 0.],\n       [0., 1.]])"
  },
  {
    "objectID": "posts/06wk-2.html#k.-2차원-배열과-연립-1차-방정식",
    "href": "posts/06wk-2.html#k.-2차원-배열과-연립-1차-방정식",
    "title": "06wk-2: numpy (1)",
    "section": "K. 2차원 배열과 연립 1차 방정식",
    "text": "K. 2차원 배열과 연립 1차 방정식\n- 아래의 연립방정식 고려\n\\(\\begin{cases}\ny+z+w = 3 \\\\\nx+z+w = 3 \\\\\nx+y+w = 3 \\\\\nx+y+z = 3\n\\end{cases}\\)\n- 행렬표현?\n\\(\\begin{bmatrix}\n0 & 1 & 1 & 1 \\\\\n1 & 0 & 1 & 1 \\\\\n1 & 1 & 0 & 1 \\\\\n1 & 1 & 1 & 0\n\\end{bmatrix}\n\\begin{bmatrix}\nx \\\\\ny \\\\\nz \\\\\nw\n\\end{bmatrix} =\n\\begin{bmatrix}\n3 \\\\\n3 \\\\\n3 \\\\\n3\n\\end{bmatrix}\\)\n- 풀이\n\nA = np.array([[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]])\nA\n\narray([[0, 1, 1, 1],\n       [1, 0, 1, 1],\n       [1, 1, 0, 1],\n       [1, 1, 1, 0]])\n\n\n\nb= np.array([3,3,3,3]).reshape(4,1)\nb\n\narray([[3],\n       [3],\n       [3],\n       [3]])\n\n\n\nnp.linalg.inv(A) @ b \n\narray([[1.],\n       [1.],\n       [1.],\n       [1.]])\n\n\n- 다른풀이\nb를 아래와 같이 만들어도 된다.\n\nb=np.array([3,3,3,3])\nb\n\narray([3, 3, 3, 3])\n\n\n\nb.shape # b.shape은 길이가 1인 튜플로 나온다. \n\n(4,)\n\n\n\nnp.linalg.inv(A) @ b \n\narray([1., 1., 1., 1.])\n\n\n@의 유연성\n- 엄밀하게는 아래의 행렬곱이 가능하다. - (2,2) @ (2,1) =&gt; (2,1) - (1,2) @ (2,2) =&gt; (1,2)\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nA@b\n\narray([[ 5],\n       [11]])\n\n\n\nA.shape, b.shape, (A@b).shape\n\n((2, 2), (2, 1), (2, 1))\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nb@A \n\narray([[ 7, 10]])\n\n\n\nA.shape, b.shape, (b@A).shape\n\n((2, 2), (1, 2), (1, 2))\n\n\n- 당연히 아래는 성립안한다.\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nb@A\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 2 is different from 1)\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nA@b\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 1 is different from 2)\n\n\n- 아래는 어떨까? 계산가능할까? \\(\\to\\) 모두 계산가능! - (2,) @ (2,2) = (2,) - (2,2) @ (2,) = (2,)\n\nA = np.array([1,2,3,4]).reshape(2,2)\nb = np.array([1,2]) \nA@b\n\narray([ 5, 11])\n\n\n\nA.shape, b.shape, (A@b).shape \n\n((2, 2), (2,), (2,))\n\n\n\nb를 마치 (2,1)처럼 해석하여 행렬곱하고 결과는 다시 (2,) 로 만든것 같다.\n\n\nb@A\n\narray([ 7, 10])\n\n\n\nA.shape, b.shape, (b@A).shape \n\n((2, 2), (2,), (2,))\n\n\n\n이때는 \\(b\\)를 마치 (1,2)처럼 해석하여 행렬곱하고 결과는 다시 (2,)로 만든것 같다.\n\n- 아래는 어떠할까?\n\nb1 = np.array([1,2,3,4]) \nb2 = np.array([1,2,3,4]) \nb1@b2 \n\n30\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((4,), (4,), ())\n\n\n\n(1,4) @ (4,1) = (1,1) 로 생각\n\n- 즉 위는 아래와 같이 해석하고 행렬곱한것과 결과가 같다.\n\nb1 = np.array([1,2,3,4]).reshape(1,4) \nb2 = np.array([1,2,3,4]).reshape(4,1) \nb1@b2 \n\narray([[30]])\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((1, 4), (4, 1), (1, 1))\n\n\n- 때로는 (4,1) @ (1,4)와 같은 계산결과를 얻고 싶을 수 있는데 이때는 차원을 명시해야함\n\nb1 = np.array([1,2,3,4]).reshape(4,1) \nb2 = np.array([1,2,3,4]).reshape(1,4) \nb1@b2 \n\narray([[ 1,  2,  3,  4],\n       [ 2,  4,  6,  8],\n       [ 3,  6,  9, 12],\n       [ 4,  8, 12, 16]])"
  },
  {
    "objectID": "posts/06wk-2.html#l.-차원",
    "href": "posts/06wk-2.html#l.-차원",
    "title": "06wk-2: numpy (1)",
    "section": "L. 차원",
    "text": "L. 차원\n- 넘파이배열의 차원은 .shape 으로 확인가능\n- 아래는 모두 미묘하게 다르다.\n\na=np.array(3.14) # 스칼라, 0d array \na, a.shape\n\n(array(3.14), ())\n\n\n\na=np.array([3.14]) # 벡터, 1d array \na, a.shape\n\n(array([3.14]), (1,))\n\n\n\na=np.array([[3.14]]) # 매트릭스, 2d array \na, a.shape\n\n(array([[3.14]]), (1, 1))\n\n\n\na=np.array([[[3.14]]]) # 텐서, 3d array \na, a.shape\n\n(array([[[3.14]]]), (1, 1, 1))"
  },
  {
    "objectID": "posts/06wk-2.html#a.-np.concatenate",
    "href": "posts/06wk-2.html#a.-np.concatenate",
    "title": "06wk-2: numpy (1)",
    "section": "A. np.concatenate",
    "text": "A. np.concatenate\n- 기본예제\n\na = np.array([1,2])\nb = -a\n\n\nnp.concatenate([a,b])\n\narray([ 1,  2, -1, -2])\n\n\n\n딱히 인상적인건 아님.\n왜냐하면 리스트에서 있는 기능임\n\n- 2D인 경우\n\na = np.array([1,2,3,4]).reshape(2,2)\nb = -a\n\n\nnp.concatenate([a,b])\n\narray([[ 1,  2],\n       [ 3,  4],\n       [-1, -2],\n       [-3, -4]])\n\n\na,b를 위아래가 아니라 좌우로 붙이고 싶다면?\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 1,  2, -1, -2],\n       [ 3,  4, -3, -4]])\n\n\n- 도데체 axis=0, 혹은 axis=1의 의미가 무엇인가?\n\nnp.concatenate([a,b],axis=0) # 이건 아까 np.concatenate([a,b])랑 같네?\n\narray([[ 1,  2],\n       [ 3,  4],\n       [-1, -2],\n       [-3, -4]])\n\n\n\nnp.concatenate([a,b],axis=1) # 이건 아까 np.concatenate([a,b])랑 같네?\n\narray([[ 1,  2, -1, -2],\n       [ 3,  4, -3, -4]])\n\n\n\n관찰에 의한 정리: a,b가 2차원일때 axis=0 이라고 쓰면 위아래로, axis=1이라고 하면 좌우로 합쳐진다.\naxis=0은 생략할 수 있다.\n\n- 2D일 경우에 활용\n\na = np.array([1,2,3,4]).reshape(2,2)\nb = np.array([10,20]).reshape(2,1)\nc = -b\n\n\na,b,c\n\n(array([[1, 2],\n        [3, 4]]),\n array([[10],\n        [20]]),\n array([[-10],\n        [-20]]))\n\n\n\nnp.concatenate([a,b.T],axis=0) \n\narray([[ 1,  2],\n       [ 3,  4],\n       [10, 20]])\n\n\n\nnp.concatenate([a,b.T,c.T],axis=0) \n\narray([[  1,   2],\n       [  3,   4],\n       [ 10,  20],\n       [-10, -20]])\n\n\n\nnp.concatenate([a,b],axis=1) \n\narray([[ 1,  2, 10],\n       [ 3,  4, 20]])\n\n\n\nnp.concatenate([a,b,c],axis=1) \n\narray([[  1,   2,  10, -10],\n       [  3,   4,  20, -20]])\n\n\n\nnp.concatenate([a.reshape(4,1), np.concatenate([b,c])],axis=1)\n\narray([[  1,  10],\n       [  2,  20],\n       [  3, -10],\n       [  4, -20]])\n\n\n- axis의 의미가 뭔지 궁금함. 좀 더 예제를 살펴보자.\n\na = np.arange(2*3*4).reshape(2,3,4)\nb = -a\n\n\na.shape, b.shape\n\n((2, 3, 4), (2, 3, 4))\n\n\n\nnp.concatenate([a,b],axis=0)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=1)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=2)\n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\n이번에는 axis=2 까지 계산이 가능함\n\n\nnp.concatenate([a,b],axis=3)\n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\naxis=3까지는 불가능\n\n- 뭔가 나름의 방식으로 합쳐지는것 같은데, 원리를 잘 모르겠음\n(분석) np.concatenate([a,b],axis=??)에서 ?? 의 숫자를 바꿔가면서 결과의 차원만 관찰해보자.\n\nprint(f'입력: {a.shape} concat {b.shape}')\nprint(f'출력: {np.concatenate([a,b],axis=0).shape} -- axis=0')\n\n입력: (2, 3, 4) concat (2, 3, 4)\n출력: (4, 3, 4) -- axis=0\n\n\n\nprint(f'입력: {a.shape} concat {b.shape}')\nprint(f'출력: {np.concatenate([a,b],axis=1).shape} -- axis=1')\n\n입력: (2, 3, 4) concat (2, 3, 4)\n출력: (2, 6, 4) -- axis=1\n\n\n\nprint(f'입력: {a.shape} concat {b.shape}')\nprint(f'출력: {np.concatenate([a,b],axis=2).shape} -- axis=2')\n\n입력: (2, 3, 4) concat (2, 3, 4)\n출력: (2, 3, 8) -- axis=2\n\n\n- 2D의 경우도 재해석\n\na = np.array([1,2,3,4,5,6]).reshape(3,2)\nb = -a                         \n\n좌우로 합치고 싶다면?? (3,2) concat (3,2) = (3,4) 가 되어야함 –&gt; 그러면 차원의 두번째 숫자가 바뀌어야함.\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 1,  2, -1, -2],\n       [ 3,  4, -3, -4],\n       [ 5,  6, -5, -6]])\n\n\n위아래로 합치고 싶다면? (3,2) concat (3,2) = (6,2) 가 되어야함 –&gt; 그러면 차원의 첫번째 숫자가 바뀌어야함.\n\nnp.concatenate([a,b],axis=0)\n\narray([[ 1,  2],\n       [ 3,  4],\n       [ 5,  6],\n       [-1, -2],\n       [-3, -4],\n       [-5, -6]])\n\n\n- axis=-1로 넣는 경우도 있음..\n\na = np.arange(2*3*4).reshape(2,3,4)\nb = -a\n\n\na.shape, b.shape\n\n((2, 3, 4), (2, 3, 4))\n\n\n(2,3,4) concat (2,3,4) = (2,3,8) 을 만들고 싶다면?? –&gt; 세번째(axis=2)축이 바뀌어야함.\n\nnp.concatenate([a,b],axis=2).shape\n\n(2, 3, 8)\n\n\n(2,3,4) concat (2,3,4) = (2,3,8) 을 만들고 싶다면?? –&gt; 마지막(axis=-1)축이 바껴야함.\n\nnp.concatenate([a,b],axis=-1).shape\n\n(2, 3, 8)\n\n\n(2,3,4) concat (2,3,4) = (2,6,4) 을 만들고 싶다면?? –&gt; 마지막에서 두번째 (axis=-2)축이 바껴야함.\n\nnp.concatenate([a,b],axis=-2).shape\n\n(2, 6, 4)\n\n\n(2,3,4) concat (2,3,4) = (4,3,4) 을 만들고 싶다면?? –&gt; 마지막에서 세번째 (axis=-3)축이 바껴야함.\n\nnp.concatenate([a,b],axis=-3).shape\n\n(4, 3, 4)\n\n\n- 2D의 경우에도 axis=-1, axis=-2를 적용가능\n\na = np.array([1,2,3,4]).reshape(2,2)\nb = np.array([10,20]).reshape(2,1)\n\n\na,b\n\n(array([[1, 2],\n        [3, 4]]),\n array([[10],\n        [20]]))\n\n\n\nnp.concatenate([a,b],axis=-1)\n\narray([[ 1,  2, 10],\n       [ 3,  4, 20]])\n\n\n\nnp.concatenate([b.T,a],axis=-2)\n\narray([[10, 20],\n       [ 1,  2],\n       [ 3,  4]])"
  },
  {
    "objectID": "posts/06wk-2.html#b.-np.stack",
    "href": "posts/06wk-2.html#b.-np.stack",
    "title": "06wk-2: numpy (1)",
    "section": "B. np.stack",
    "text": "B. np.stack\n- 혹시 아래가 가능할까?\n\n(3,) concat (3,) = (3,2)\n\n\na = np.array([1,2,3])\nb = -a \n\n\na,b\n\n(array([1, 2, 3]), array([-1, -2, -3]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\nAxisError: axis 1 is out of bounds for array of dimension 1\n\n\n\n불가능\n\n- 아래와 같은 방식은 가능\n\nnp.concatenate([a.reshape(3,1), b.reshape(3,1)],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n- 위의 과정을 줄여서 아래와 같이 할 수 있음.\n\nnp.stack([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n- 아래와 같은 결합도 가능\n\nnp.stack([a,b],axis=0)\n\narray([[ 1,  2,  3],\n       [-1, -2, -3]])\n\n\n- stack에서 axis의 역할에 대한 분석\n\na = np.arange(5*3*4).reshape(5,3,4)\nb = -a\n\n\nprint(f'입력: {a.shape} stack {b.shape}')\nprint(f'출력: {np.stack([a,b],axis=0).shape} -- axis=0')\nprint(f'출력: {np.stack([a,b],axis=1).shape} -- axis=1')\nprint(f'출력: {np.stack([a,b],axis=2).shape} -- axis=2')\nprint(f'출력: {np.stack([a,b],axis=3).shape} -- axis=3')\n#print(f'출력: {np.stack([a,b],axis=4).shape} -- axis=4')\n\n입력: (5, 3, 4) stack (5, 3, 4)\n출력: (2, 5, 3, 4) -- axis=0\n출력: (5, 2, 3, 4) -- axis=1\n출력: (5, 3, 2, 4) -- axis=2\n출력: (5, 3, 4, 2) -- axis=3\n\n\n- 다시 (3,) stack (3,) 상황을 이해하여보면\n\na = np.array([1,2,3])\nb = -a\n\na,b 모두 1차원이지만 이를 위아래로 붙여서 2차원으로 만들고 싶어. 즉 (3,) stack (3,) = (2,3) 을 만들고 싶음. -&gt; 첫번째 위치에(axis=0)에 축을 추가해야겠음.\n\nnp.stack([a,b],axis=0)\n\narray([[ 1,  2,  3],\n       [-1, -2, -3]])\n\n\na,b 모두 1차원이지만 이를 좌우로 붙여서 2차원으로 만들고 싶어. 즉 (3,) stack (3,) = (3,2) 을 만들고 싶음. -&gt; 두번째 위치에(axis=1)에 축을 추가해야겠음.\n\nnp.stack([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\nnote: np.concatenate은 축의 총 갯수를 유지하면서 결합, np.stack은 축의 갯수를 하나 증가시키면서 결합"
  },
  {
    "objectID": "posts/06wk-2.html#c.-sum",
    "href": "posts/06wk-2.html#c.-sum",
    "title": "06wk-2: numpy (1)",
    "section": "C. sum",
    "text": "C. sum\n- 1차원\n\na = np.array([1,2,3])\na\n\narray([1, 2, 3])\n\n\n\nnp.sum(a)\n\n6\n\n\n\na.sum() \n\n6\n\n\n\na.sum(axis=0)\n\n6\n\n\n- 2차원\n\na = np.array([1,2,3,4,5,6]).reshape(3,2)\na\n\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n\n\n\na.sum() # 전체합: 1+2+3+4+5+6\n\n21\n\n\n\na.sum(axis=0) # 1열의합, 2열의합\n\narray([ 9, 12])\n\n\n\na.sum(axis=1) # 1행의합, 2행의합, 3행의합\n\narray([ 3,  7, 11])\n\n\na를 2차원 array모양으로 만들고 axis을 잘 써주면 row-wise로 합을 구하거나 column-wise로 합을 구하기 좋음.\n- 넘파이 특수기능 .sum()에서 axis의 의미를 알아보자.\n\na.shape, a.sum(axis=0).shape, a.sum(axis=1).shape\n\n((3, 2), (2,), (3,))\n\n\n- 연습\n\na = np.arange(10).reshape(5,2)\na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n행별로 합을 구하고 싶음 -&gt; (5,2)의 차원이 (5,) 와 같이 되어야함. -&gt; 두번째축이 사라져야함\n\na.sum(axis=1)\n\narray([ 1,  5,  9, 13, 17])\n\n\n열별로 합을 구하고 싶음 -&gt; (5,2)의 차원이 (2,) 와 같이 되어야함. -&gt; 첫번째축이 사라져야함\n\na.sum(axis=0)\n\narray([20, 25])\n\n\na의 모든 원소의 합을 구하고 싶다면? -&gt; (5,2)차원이 ()와 같이 되어야함 -&gt; 첫번째축과 두번째축이 다 사라져야함\n\na.sum(axis=(0,1))\n\n45\n\n\n\na.sum() # 아 이것은 사실 a.sum(axis=(0,1)) 의 생략된 표현이었군!\n\n45"
  },
  {
    "objectID": "posts/06wk-2.html#d.-mean-std-max-min-prod",
    "href": "posts/06wk-2.html#d.-mean-std-max-min-prod",
    "title": "06wk-2: numpy (1)",
    "section": "D. mean, std, max, min, prod",
    "text": "D. mean, std, max, min, prod\n- 모두 sum과 비슷한 논리로 mean, std, max, min, prod 을 구할 수 있음\n\na = np.array([1,2,3,4,5,6,7,8]).reshape(4,2)\na\n\narray([[1, 2],\n       [3, 4],\n       [5, 6],\n       [7, 8]])\n\n\n\na.mean(axis=0), a.std(axis=0), a.max(axis=0), a.min(axis=0), a.prod(axis=0)\n\n(array([4., 5.]),\n array([2.23606798, 2.23606798]),\n array([7, 8]),\n array([1, 2]),\n array([105, 384]))\n\n\n\na.mean(axis=1), a.std(axis=1), a.max(axis=1), a.min(axis=1), a.prod(axis=1)\n\n(array([1.5, 3.5, 5.5, 7.5]),\n array([0.5, 0.5, 0.5, 0.5]),\n array([2, 4, 6, 8]),\n array([1, 3, 5, 7]),\n array([ 2, 12, 30, 56]))"
  },
  {
    "objectID": "posts/06wk-2.html#e.-argmax-argmin",
    "href": "posts/06wk-2.html#e.-argmax-argmin",
    "title": "06wk-2: numpy (1)",
    "section": "E. argmax, argmin",
    "text": "E. argmax, argmin\n- 1차원\n\na = np.array([22,-2,3,10,4])\na\n\narray([22, -2,  3, 10,  4])\n\n\n\na.argmax(),a.argmin()\n\n(0, 1)\n\n\n- 2차원\n\nnp.random.seed(43052)\na = np.random.rand(10).reshape(5,2)\na\n\narray([[0.81768226, 0.04953212],\n       [0.83868626, 0.61977707],\n       [0.12254052, 0.11712779],\n       [0.8795562 , 0.97941543],\n       [0.90986893, 0.96667407]])\n\n\n\na.argmax(axis=0),a.argmin(axis=0)\n\n(array([4, 3]), array([2, 0]))\n\n\n\na.argmax(axis=1),a.argmin(axis=1)\n\n(array([0, 0, 0, 1, 1]), array([1, 1, 1, 0, 0]))"
  },
  {
    "objectID": "posts/06wk-2.html#f.-cumsum-cumprod",
    "href": "posts/06wk-2.html#f.-cumsum-cumprod",
    "title": "06wk-2: numpy (1)",
    "section": "F. cumsum, cumprod",
    "text": "F. cumsum, cumprod\n- 1차원\n\na = np.array([1,2,3,4])\na\n\narray([1, 2, 3, 4])\n\n\n\nnp.cumsum(a), a.cumsum()\n\n(array([ 1,  3,  6, 10]), array([ 1,  3,  6, 10]))\n\n\n\nnp.cumprod(a), a.cumprod()\n\n(array([ 1,  2,  6, 24]), array([ 1,  2,  6, 24]))\n\n\n- 2차원\n\na = np.array([1,2,3,4,5,6,7,8,9,10,11,12]).reshape(4,3)\na\n\narray([[ 1,  2,  3],\n       [ 4,  5,  6],\n       [ 7,  8,  9],\n       [10, 11, 12]])\n\n\n\na.cumsum(axis=0),a.cumsum(axis=1),a.cumprod(axis=0),a.cumprod(axis=1)\n\n(array([[ 1,  2,  3],\n        [ 5,  7,  9],\n        [12, 15, 18],\n        [22, 26, 30]]),\n array([[ 1,  3,  6],\n        [ 4,  9, 15],\n        [ 7, 15, 24],\n        [10, 21, 33]]),\n array([[   1,    2,    3],\n        [   4,   10,   18],\n        [  28,   80,  162],\n        [ 280,  880, 1944]]),\n array([[   1,    2,    6],\n        [   4,   20,  120],\n        [   7,   56,  504],\n        [  10,  110, 1320]]))"
  },
  {
    "objectID": "posts/06wk-2.html#g.-diff",
    "href": "posts/06wk-2.html#g.-diff",
    "title": "06wk-2: numpy (1)",
    "section": "G. diff",
    "text": "G. diff\n- 1차원 차분\n\na = np.array([1,2,4,7,15])\na\n\narray([ 1,  2,  4,  7, 15])\n\n\n\nnp.diff(a)\n\narray([1, 2, 3, 8])\n\n\n\nnp.diff(a,prepend=100)\n\narray([-99,   1,   2,   3,   8])\n\n\n\nnp.diff(a,prepend=a[0])\n\narray([0, 1, 2, 3, 8])\n\n\n\nnp.diff(a,append=100)\n\narray([ 1,  2,  3,  8, 85])\n\n\n\nnp.diff(a,append=a[-1])\n\narray([1, 2, 3, 8, 0])\n\n\n- 2차원 array의 미분\n\na = np.arange(24).reshape(4,6)\na\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\nnp.diff(a,axis=0) # 열별로 연산이 적용\n\narray([[6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6]])\n\n\n\nnp.diff(a,axis=1) # 행별로 연산이 적용\n\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])"
  },
  {
    "objectID": "posts/04wk-2.html#a.-사용자가-직접형태변환",
    "href": "posts/04wk-2.html#a.-사용자가-직접형태변환",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "A. 사용자가 직접형태변환",
    "text": "A. 사용자가 직접형태변환\n- 형태변환: float \\(\\to\\) int\n(예시1)\n\na=3.0\ntype(a)\n\nfloat\n\n\n\na=int(a)\n\n\ntype(a)\n\nint\n\n\n(예시2) 이경우는 정보의 손실이 발생\n\na=3.14 \nint(a)\n\n3\n\n\n- 형태변환: int \\(\\to\\) float\n\na=3\ntype(a)\n\nint\n\n\n\na=float(a)\ntype(a)\n\nfloat\n\n\n- 형태변환: bool \\(\\to\\) int/float, int/float \\(\\to\\) bool\n(예시1)\n\na=True\ntype(a)\n\nbool\n\n\n\nint(a)\n\n1\n\n\n\nfloat(a)\n\n1.0\n\n\n(예시2)\n\na=1 \nbool(a)\n\nTrue\n\n\n\na=0\nbool(a)\n\nFalse\n\n\n(예시3)\n\na=1.0\nbool(a)\n\nTrue\n\n\n\na=0.0\nbool(a)\n\nFalse\n\n\n- 이상한 형태변환도 가능하다. (이런것도 바꿔주나 싶은것도 바꿔줌)\n\nbool(-3.14)\n\nTrue\n\n\n\n저는 이런 코드를 의도적으로 사용하지 않아요..\n\n\nint(3.14)\n\n3\n\n\n- 형태변환이 항상가능한것도 아님\n\nfloat(3+0j) # 사실상 3+0j=3 이므로 float으로 형변환하면 3.0이 되어야 할 것 같은데 변환불가능하다. \n\nTypeError: float() argument must be a string or a real number, not 'complex'"
  },
  {
    "objectID": "posts/04wk-2.html#b.-암묵적형변환",
    "href": "posts/04wk-2.html#b.-암묵적형변환",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "B. 암묵적형변환",
    "text": "B. 암묵적형변환\n- 암묵적형변환 (implicit)\n(예비학습) implicit의 의미\n\n추운날씨 -&gt; 보일러좀 틀자! (explicit) / 오늘 날씨 좀 추운 것 같지 않아? (implicit)\n짜장면 먹을래? -&gt; 싫어! (explicit) / 난 어제 짜장면 먹었는데.. (implicit)\n\n(예제)\n\nTrue * 1 # 1을 곱할건데 너 계속 True로 있을꺼야? \n\n1\n\n\n\n1 * 1.0 # 1.0을 곱할건데 너 계속 int로 있을꺼야? \n\n1.0\n\n\n\nTrue+True # +연산을 할건데 계속 True로 있을꺼야? \n\n2"
  },
  {
    "objectID": "posts/04wk-2.html#a.-선언",
    "href": "posts/04wk-2.html#a.-선언",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "A. 선언",
    "text": "A. 선언\n- 예시1\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n- 예시2\n\na=\"guebin\"\n\n\na\n\n'guebin'\n\n\n- 예시3\n\na=\"asdf'a'sdf\"\na\n\n\"asdf'a'sdf\"\n\n\n- 예시4\n\na='asdf\"a\"sdf'\na\n\n'asdf\"a\"sdf'"
  },
  {
    "objectID": "posts/04wk-2.html#b.-연산",
    "href": "posts/04wk-2.html#b.-연산",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "B. 연산",
    "text": "B. 연산\n- 더하기(+)연산\n\na='X'\nb='2'\n\n\nc=a+b\nc\n\n'X2'\n\n\n- 빼기(-)연산\n\na='X2'\nb='2'\na-b\n\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n\n\n이런건 없다.\n\n- 곱하기(*)연산\n\na='X'\n\n\na+a+a\n\n'XXX'\n\n\n\na*3 # a*3 = a+a+a = 'X'+'X+'X'\n\n'XXX'\n\n\n아래도 가능하다.\n\n3*a\n\n'XXX'\n\n\n그리고 아래도 가능하다.\n\na='X'\nb=3 \na*b\n\n'XXX'\n\n\n대신에 의미상 맞지 않는 것은 수행되지 않고 에러가 난다.\n\na='X'\nb='Y'\na+b\n\n'XY'\n\n\n\na*b\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n- 나눗셈(/)연산\n\n2*'X'\n\n'XX'\n\n\n\na='XX'\n\n\na/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n\n\n\n이런건 없다.."
  },
  {
    "objectID": "posts/04wk-2.html#c.-인덱싱",
    "href": "posts/04wk-2.html#c.-인덱싱",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "C. 인덱싱",
    "text": "C. 인덱싱\n- str은 하나의 벡터 문자가 여러개 있는 형태라고 생각하면 된다.\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n\n6개의 칸에 글씨가 하나씩 들어가 있음.\n\n- 대괄호 []안에 숫자를 넣는 방식으로 벡터의 원소를 호출할 수 있다. (주의: 인덱스가 0부터 시작함)\n\na[0] #첫번째원소\n\n'g'\n\n\n\na[1] #두번째원소 \n\n'u'\n\n\n마지막원소는 -1로 호출할 수도 있다.\n\na[-1]\n\n'n'\n\n\n마지막에서 2번째 원소는 -2로 호출가능하다.\n\na[-2]\n\n'i'\n\n\n- 요약하면 아래와 같은 방식으로 호출가능함.\n\n\n\ng\nu\ne\nb\ni\nn\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n0\n-5\n-4\n-3\n-2\n-1\n\n\n\n\na[4]\n\n'i'\n\n\n\na[-2]\n\n'i'\n\n\n\na[-4]\n\n'e'\n\n\n- :을 이용하여 여러개의 원소를 호출할 수 있음.\n\na='guebin'\n\n\na[0:3] # a[0],a[1],a[2],a[3]이 아니라 a[0],a[1],a[2]까지만 뽑힌다. 즉 마지막의 3은 호출되지 않는다. \n\n'gue'\n\n\n\na[1:3] # a[1], a[2] 만 호출 // start=1,  stop=3 \n\n'ue'\n\n\nindex=1부터 시작해서 마지막원소까지 호출하려면?\n\na='guebin'\n\n\na[5] # guebin의 마지막원소 'n'이 출려 \n\n'n'\n\n\n\na[1:5] # 5는 포함되지 않으므로 틀림\n\n'uebi'\n\n\n\na[1:6] # 정답\n\n'uebin'\n\n\n안 헷갈리는 방법은 없을까? 생략한다.\n\na[1:]\n\n'uebin'\n\n\n- 생략의 응용1\n\na='k-pop' \na\n\n'k-pop'\n\n\n\na[2:]\n\n'pop'\n\n\n- 생략의 응용2\n\na='k-pop'\na\n\n'k-pop'\n\n\n\n0,1 -&gt; 0,1,2\n\n\na[0:2] # a[0],a[1]\n\n'k-'\n\n\n\na[:2] # a[0],a[1] \n\n'k-'\n\n\n\na[:2] 는 a의 원소중 처음 2개를 뽑는다는 의미\n\n- 생략의 응용3\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:5] # a[0],...,a[4]\n\n'k-pop'\n\n\n\na[:]\n\n'k-pop'"
  },
  {
    "objectID": "posts/04wk-2.html#d.-str-특수기능",
    "href": "posts/04wk-2.html#d.-str-특수기능",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "D. str 특수기능",
    "text": "D. str 특수기능\n- 파이썬의 변수는 단순히 정보를 담는 그릇이 아니다. 유용한 기능을 제공하는 경우가 있다.\n\na='ABCD' # a라는 변수는 'ABCD'라는 정보를 담는 그릇의 역할만 하지 않고, 특화된 어떠한 기능도 제공한다. \na\n\n'ABCD'\n\n\n\na.lower() # a.lower()를 쓰면 a의 모든 문자를 소문자로 바꾸는 기능을 제공, lower(a)라고 읽자!\n\n'abcd'\n\n\n여기에서 lower()는 문자열에 특화된 기능임. 따라서 당연히 아래는 불가능\n\na=3.14\na.lower() # lower(a)\n\nAttributeError: 'float' object has no attribute 'lower'\n\n\n- 자료형에 특화된 기능(=함수)을 확인하는 방법? a.+ tab 으로 목록 확인 가능\n\na='guebin'\n\n\na.upper?\n\n\nSignature: a.upper()\nDocstring: Return a copy of the string converted to uppercase.\nType:      builtin_function_or_method\n\n\n\n\na.upper() # upper(a) \n\n'GUEBIN'\n\n\n\na.capitalize() # capitalize(a) \n\n'Guebin'\n\n\n- 유용한 특수기능 \\((\\star\\star\\star)\\)\n\n'-'.join(['1','2','3'])\n\n'1-2-3'\n\n\n\n'1-2-3'.split('-')\n\n['1', '2', '3']\n\n\n\n'1-2-3'.replace('-','*')\n\n'1*2*3'"
  },
  {
    "objectID": "posts/04wk-2.html#e.-len",
    "href": "posts/04wk-2.html#e.-len",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "E. len",
    "text": "E. len\n- len함수 소개: 원소의 갯수를 알려주는 함수.\n\na='ABCD' \nlen(a)\n\n4\n\n\n- 참고: len은 0차원 변수형에서는 동작하지 않고 1차원 변수형에서만 동작한다.\n(0차원) len 함수가 동작하지 않음.\n\na=3.14\n\n\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nb=True\n\n\nlen(b)\n\nTypeError: object of type 'bool' has no len()\n\n\n(1차원) len 함수가 잘 동작함.\n\na='3.14'\nlen(a)\n\n4\n\n\n\nb=[1,2,3]\n\n\nlen(b)\n\n3"
  },
  {
    "objectID": "posts/04wk-2.html#f.-fstring",
    "href": "posts/04wk-2.html#f.-fstring",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "F. fstring",
    "text": "F. fstring\n- 예제1\n\na=1\nb=2\nprint(f'a+b = {a+b}')\n\na+b = 3\n\n\n- 예제2\n\na=2\nb=3.141592\nprint(f'a*b = {a*b:.2f}')\n\na*b = 6.28\n\n\n- 예제3\n\na=3.141592\nprint(f'2a = {2*a:.2f}\\t3a = {3*a:.2f}')\n\n2a = 6.28   3a = 9.42\n\n\n- 예제4\n\nlst = ['장하니','최다호','주성재','이슬기']\n\n\n[f'{l}학생 안녕하세요, 통계학과 최규빈 교수입니다. 다름이 아니라 전공진로설계관련 상담일자를 잡고자 메일을 보냈습니다.' for l in lst]\n\n['장하니학생 안녕하세요, 통계학과 최규빈 교수입니다. 다름이 아니라 전공진로설계관련 상담일자를 잡고자 메일을 보냈습니다.',\n '최다호학생 안녕하세요, 통계학과 최규빈 교수입니다. 다름이 아니라 전공진로설계관련 상담일자를 잡고자 메일을 보냈습니다.',\n '주성재학생 안녕하세요, 통계학과 최규빈 교수입니다. 다름이 아니라 전공진로설계관련 상담일자를 잡고자 메일을 보냈습니다.',\n '이슬기학생 안녕하세요, 통계학과 최규빈 교수입니다. 다름이 아니라 전공진로설계관련 상담일자를 잡고자 메일을 보냈습니다.']"
  },
  {
    "objectID": "posts/04wk-2.html#g.-string과-for문",
    "href": "posts/04wk-2.html#g.-string과-for문",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "G. string과 for문",
    "text": "G. string과 for문\n- 예제1\n\nfor s in 'jbnu':\n    print(2*s)\n\njj\nbb\nnn\nuu\n\n\n- 예제2\n\n[s*4 for s in 'jbnu']\n\n['jjjj', 'bbbb', 'nnnn', 'uuuu']"
  },
  {
    "objectID": "posts/04wk-2.html#h.-in-연산자",
    "href": "posts/04wk-2.html#h.-in-연산자",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "H. in 연산자",
    "text": "H. in 연산자\n\ns = 'jbnu'\n\n\n'b' in s\n\nTrue\n\n\n\n'c' in s\n\nFalse\n\n\n\n'jb' in s\n\nTrue\n\n\n\n'jn' in s\n\nFalse"
  },
  {
    "objectID": "posts/04wk-2.html#i.-연습문제들",
    "href": "posts/04wk-2.html#i.-연습문제들",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "I. 연습문제들",
    "text": "I. 연습문제들\n전북대학교 – 아래와 같은 문자열이 있다고 하자.\n\na='Jeonbuk National University' \n\n# 문제. 적당한 인덱싱을 통하여 출력결과가 아래와 같도록 하라.\n\n# 적당한 인덱싱\n\n'University'\n\n\nhint: University는 10글자이다.\n(풀이)\n\na[-10:]\n\n'University'\n\n\n# 문제. 출력결과가 아래와 같도록 하는 코드를 작성하라. (lower 함수를 이용할 것)\n\n# 적당한 코드 \n\n'jeonbuk national university'\n\n\n(풀이)\n\na.lower()\n\n'jeonbuk national university'\n\n\n# 문제. 아래의 코드를 관찰하고 isupper()의 기능이 무엇인지 스스로 정리해보라.\n\n'A'.isupper()\n\nTrue\n\n\n\n'AA'.isupper()\n\nTrue\n\n\n\n'Aa'.isupper()\n\nFalse\n\n\n\n'aa'.isupper()\n\nFalse\n\n\n\n'aA'.isupper()\n\nFalse\n\n\n유추한 기능이 맞는지 ChatGPT를 통하여 확인하라.\nDitto – 다음은 인터넷에서 긁어온 어떠한 텍스트이다.\n\ntext = \"국내뿐 아니라 해외 인기도 심상치 않다. 2023년 1월 18일 'Ditto'가 빌보드 핫 100에 96위로 진입했다. 이는 K-pop 역사상 데뷔후 최단 빌보드 Hot 100 차트 입성 기록이다. 다른 뮤지션들이 보통 데뷔 후 수년간 쌓아온 팬덤을 기반으로 빌보드에 입성한데 비해, 뉴진스의 기록은 이례적인 것으로 평가받고 있다. 또한 'OMG'가 빌보드 핫 100에 91위로 진입한 동시에 'Ditto'는 85위로 순위가 상승, 핫 100 주간차트에 두 곡을 올려놓았다. K-Pop 역사상 이 차트에 두 곡 이상을 진입시킨 아티스트는 방탄소년단과 블랙핑크가 유일하다. 'Ditto'는 1월 셋째주 기준, 빌보드뿐만 아니라 영국 오피셜 싱글 차트 '톱 100'에 2주 연속 진입하기도 했다.\"\n\n# 문제. text는 총 몇개의 문장으로 이루어져 있는가?\nhint: 이 텍스트의 문장은 모두 .로 끝난다.\n(풀이)\n\nlen(text.split('. '))\n\n7\n\n\n# 문제. 각 문장은 몇개의 단어로 이루어져 있는가?\nhint: 각 단어는 공백으로 구분된다.\n(풀이)\n\nlst = text.split('. ')\n[len(l.split(' ')) for l in lst]\n\n[6, 9, 11, 18, 18, 12, 16]\n\n\n# 문제. 100이라는 단어가 포함된 문장은 모두 몇 개 인가?\nhint: 아래의 코드를 관찰\n\n'a' in 'abcd'\n\nTrue\n\n\n(풀이)\n\nsum(['100' in l for l in lst])\n\n4"
  },
  {
    "objectID": "posts/04wk-2.html#a.-선언-1",
    "href": "posts/04wk-2.html#a.-선언-1",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "A. 선언",
    "text": "A. 선언\n- 리스트의 선언\n\na= [1,2,3,22] \n\n- 비어있는 리스트의 선언\n\na= []\na\n\n[]\n\n\n\na= list()\na\n\n[]"
  },
  {
    "objectID": "posts/04wk-2.html#b.-연산-1",
    "href": "posts/04wk-2.html#b.-연산-1",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "B. 연산",
    "text": "B. 연산\n- 더하기연산\n\n[1,2,3] + [-3,4,5]\n\n[1, 2, 3, -3, 4, 5]\n\n\n\n우리의 예상과 다른 결과가 나옴 \\(\\to\\) 파이썬은 R처럼 자체적으로 좋은 계산기능을 내장하고 있지 않음.\n\n- 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음.\n\n[1,2,3,4,5] + 1 \n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n- 뺄셈은 정의되지 않음\n\na= [1,2,1,2]\na-[1,2]\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n- 곱하기는 정의가능\n\n[1,2]*3\n\n[1, 2, 1, 2, 1, 2]\n\n\n- 나눗셈은 정의되지 않음\n\n[1,2,1,2,1,2] /3\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄셈과 나눗셈이 원소의 삭제를 의미하는것은 아님\n- 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도 있긴하지만, 우리는 산술적인 +, * 를 원하는 경우도 있다. 이럴 경우는 어떻게 할 수 있을까?\n(예제)\n\na=[1,2]\nb=[3,4]\n\na+b = [4,6] 이 되도록 하려면?\n(풀이1)\n\n[a[0]+b[0],a[1]+b[1]]\n\n[4, 6]\n\n\n풀이가 가능한 이유? a,b는 리스트이지만 a[0], a[1], b[0], b[1] 은 각각 인트형임. 인트형은 + 연산이 가능했음.\n(풀이2)\nnumpy 패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리)\n\n이러한 벡터연산은 누구나 필요로 하는 연산임.\n내가 아니더라도 누군가가 프로그램화 해놓았을 것임.\n그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도 있음. (패키지를 배포한다고 표현)\n그 패키지를 우리는 가져와서 설치한뒤 사용하기만 하면된다.\n\n설치된 패키지를 사용하는 방법\n\nimport numpy 한뒤에 numpy.??로 기능을 사용\nimport numpy as np 한뒤에 np.??로 기능을 사용\n\n\nimport numpy \n\n\na=[1,2]\nb=[3,4]\n\n\naa = numpy.array(a)\nbb = numpy.array(b)\n\n\naa+bb\n\narray([4, 6])\n\n\n여러가지 연산 가능 (마치 R처럼 쓸 수 있음)\n\n2*aa\n\narray([2, 4])\n\n\n\n2*aa+1\n\narray([3, 5])\n\n\n\n2*aa+1+bb\n\narray([6, 9])\n\n\n(풀이3)\n\nimport numpy as np ## 설치가 되어있는 numpy라는 패키지를 쓰겠음. 그런데 numpy말고 np라는 이름으로 쓰겠음\n\n\nnp.array(a)+np.array(b)\n\narray([4, 6])"
  },
  {
    "objectID": "posts/04wk-2.html#c.-인덱싱-1",
    "href": "posts/04wk-2.html#c.-인덱싱-1",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "C. 인덱싱",
    "text": "C. 인덱싱\n- str형과 동일한 방식\n\na=[11,22,33,44,55] # 0 -4 -3 -2 -1\n\n\na[-2:] # 끝의 2개의 원소를 뽑음 \n\n[44, 55]"
  },
  {
    "objectID": "posts/04wk-2.html#d.-콘테이너형-객체로서의-리스트",
    "href": "posts/04wk-2.html#d.-콘테이너형-객체로서의-리스트",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "D. 콘테이너형 객체로서의 리스트",
    "text": "D. 콘테이너형 객체로서의 리스트\n- 리스트의 원소는 int, float 따위만 가능한 것이 아니다. (리스트는 컨테이너형 객체이므로)\n\nlst = [1,3.14,True,'a',[1,2], \n       (1,2),{'name':'iu','age':27},{1,2,3}]\nlst\n\n[1, 3.14, True, 'a', [1, 2], (1, 2), {'name': 'iu', 'age': 27}, {1, 2, 3}]\n\n\n\n[type(l) for l in lst]\n\n[int, float, bool, str, list, tuple, dict, set]\n\n\n- str은 컨테이너형이 아니다.\n\n'abcd'[2]\n\n'c'\n\n\n\nstr의 모든 원소는 문자임"
  },
  {
    "objectID": "posts/04wk-2.html#e.-가변객체",
    "href": "posts/04wk-2.html#e.-가변객체",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "E. 가변객체",
    "text": "E. 가변객체\n- 리스트는 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\na=[11,22,33]\na\n\n[11, 22, 33]\n\n\n\na[0] = -77\n\n\na\n\n[-77, 22, 33]\n\n\n- 원소수정은 당연한 기능같은데 이것이 불가능한 경우도 있다.\n(가능한경우)\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na[0] = 'G'\n\n\na\n\n['G', 'u', 'e', 'b', 'i', 'n']\n\n\n(불가능한경우)\n\na='guebin'\na\n\n'guebin'\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\nTypeError: 'str' object does not support item assignment"
  },
  {
    "objectID": "posts/04wk-2.html#f.-리스트의-원소-삭제",
    "href": "posts/04wk-2.html#f.-리스트의-원소-삭제",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "F. 리스트의 원소 삭제",
    "text": "F. 리스트의 원소 삭제\n(예제1) del을 이용한 원소삭제\n아래와 같이 문자로 된 리스트를 선언하자.\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n사실 더 쉽게 선언할 수 있음\n\nlist('guebin')\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n첫번째 원소를 삭제하고 싶다면?\n\ndel a[0]\na\n\n['u', 'e', 'b', 'i', 'n']\n\n\n이 상태에서 다시 첫번째 원소를 삭제한다면?\n\ndel a[0]\na\n\n['e', 'b', 'i', 'n']\n\n\n(예제2) pop을 이용한 원소삭제\n\na=list('guebin')\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na.pop(0)\n\n'g'\n\n\n\na.pop(0)\n\n'u'\n\n\n\na\n\n['e', 'b', 'i', 'n']\n\n\n(예제3) remove를 이용한 원소삭제\n\na=list('guebin')\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na.remove('b')\na\n\n['g', 'u', 'e', 'i', 'n']"
  },
  {
    "objectID": "posts/04wk-2.html#g.-리스트-원소-추가",
    "href": "posts/04wk-2.html#g.-리스트-원소-추가",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "G. 리스트 원소 추가",
    "text": "G. 리스트 원소 추가\n(예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가하여 보자.\n(풀이1) + 연산이용\n\na=[]\na\n\n[]\n\n\n\na= a+[0]\na\n\n[0]\n\n\n\na= a+[1] # a = [0]+[1]\na\n\n[0, 1]\n\n\n\na= a+[2] # a = [0,1] + [2]\na\n\n[0, 1, 2]\n\n\n(풀이2) += 이용\n\na=[]\na+=[0]\na+=[1] \na+=[2] \na\n\n[0, 1, 2]\n\n\n\n반복되는 문자를 제거하고 연산의 순서를 바꾼다.\n\n(풀이3) 리스트 특수기능 .append()를 이용\n\na=[] \n\n\na.append(0)\na.append(1)\na.append(2)\na\n\n[0, 1, 2]\n\n\n- 아래는 불가능하다.\n\na.append(0).append(1).append(2)\n\nAttributeError: 'NoneType' object has no attribute 'append'\n\n\n\na.append(0,1,2)\n\nTypeError: append() takes exactly one argument (3 given)"
  },
  {
    "objectID": "posts/04wk-2.html#h.-a4와-a.append4의-차이점은",
    "href": "posts/04wk-2.html#h.-a4와-a.append4의-차이점은",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "H. a+[4]와 a.append(4)의 차이점은?",
    "text": "H. a+[4]와 a.append(4)의 차이점은?\n(관찰1)\n\na=[1,2,3]\na+[4] ## 리스트 a와 리스트 [4]의 연산결과를 알려줘 \n\n[1, 2, 3, 4]\n\n\n\na ## a는 그대로임. 변화없음 \n\n[1, 2, 3]\n\n\n(관찰2)\n\na=[1,2,3]\na.append(4)\n\n\na ## a자체가 변화함 \n\n[1, 2, 3, 4]\n\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\na.append(4): a에 4를 append하라 \\(\\to\\) a가 변함\na+[4]: a와 [4]를 연산하라"
  },
  {
    "objectID": "posts/04wk-2.html#i.-리스트-특수기능",
    "href": "posts/04wk-2.html#i.-리스트-특수기능",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "I. 리스트 특수기능",
    "text": "I. 리스트 특수기능\n(append)\n\na=[1,2,3,4]\na.append?\n\n\nSignature: a.append(object, /)\nDocstring: Append object to the end of the list.\nType:      builtin_function_or_method\n\n\n\n\na.append(5)\na\n\n[1, 2, 3, 4, 5]\n\n\n(clear)\n\na=[1,2,3,4]\na.clear?\n\n\nSignature: a.clear()\nDocstring: Remove all items from list.\nType:      builtin_function_or_method\n\n\n\n\n\na.clear()\na\n\n[]\n\n\n(copy)\n\na=[1,2,3,4]\na.copy?\n\n\nSignature: a.copy()\nDocstring: Return a shallow copy of the list.\nType:      builtin_function_or_method\n\n\n\n\n\nb=a.copy()\nb\n\n[1, 2, 3, 4]\n\n\n(count)\n\na=['a','a','b','b','b','c']\na.count?\n\n\nSignature: a.count(value, /)\nDocstring: Return number of occurrences of value.\nType:      builtin_function_or_method\n\n\n\n\na.count('a')\n\n2\n\n\n\na.count('b')\n\n3\n\n\n\na.count('c')\n\n1\n\n\n(extend)\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.extend(b)\na\n\n[1, 2, 3, 4, -1, -2, -3, -4]\n\n\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.append(b)\n\n\na\n\n[1, 2, 3, 4, [-1, -2, -3, -4]]\n\n\n(index)\n\na=[11,22,'a',True, 22,'a']\na.index?\n\n\nSignature: a.index(value, start=0, stop=9223372036854775807, /)\nDocstring:\nReturn first index of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\na.index(11)\n\n0\n\n\n\na.index(22)\n\n1\n\n\n\na.index('a')\n\n2\n\n\n\na.index(True)\n\n3\n\n\n(insert)\n\na=[1,2,3]\na.insert?\n\n\nSignature: a.insert(index, object, /)\nDocstring: Insert object before index.\nType:      builtin_function_or_method\n\n\n\n\na.insert(1,88) \na\n\n[1, 88, 2, 3]\n\n\n(pop)\n\na=['a',1,2,'d']\na.pop?\n\n\nSignature: a.pop(index=-1, /)\nDocstring:\nRemove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.\nType:      builtin_function_or_method\n\n\n\n\na.pop() # index=-1 이므로 마지막원소가 나타남\n\n'd'\n\n\n\na # a는 마지막 원소가 사라진 상태\n\n['a', 1, 2]\n\n\n\na.pop(0) # index=0 이므로 첫번쨰 원소가 나타남\n\n'a'\n\n\n\na # a에는 첫번째 원소가 사라진 상태\n\n[1, 2]\n\n\n(remove)\n\na=['a',2,3,'d']\na.remove?\n\n\nSignature: a.remove(value, /)\nDocstring:\nRemove first occurrence of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\na.remove('d')\n\n\na\n\n['a', 2, 3]\n\n\n\na.remove('a')\n\n\na\n\n[2, 3]\n\n\n(reverse)\n\na=[1,2,3,4]\na.reverse?\n\n\nSignature: a.reverse()\nDocstring: Reverse *IN PLACE*.\nType:      builtin_function_or_method\n\n\n\n\na.reverse()\na\n\n[4, 3, 2, 1]\n\n\n(sort)\n\na=[1,3,2,4]\na.sort?\n\n\nSignature: a.sort(*, key=None, reverse=False)\nDocstring:\nSort the list in ascending order and return None.\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\nThe reverse flag can be set to sort in descending order.\nType:      builtin_function_or_method\n\n\n\n\na.sort()\na\n\n[1, 2, 3, 4]\n\n\n(다른예제들)\n\na=list('guebin')\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na.sort()\na\n\n['b', 'e', 'g', 'i', 'n', 'u']\n\n\n\na.sort(reverse=True)\na\n\n['u', 'n', 'i', 'g', 'e', 'b']"
  },
  {
    "objectID": "posts/04wk-2.html#j.-중첩리스트",
    "href": "posts/04wk-2.html#j.-중첩리스트",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "J. 중첩리스트",
    "text": "J. 중첩리스트\n- 리스트는 리스트를 원소로 받을 수 있으므로 아래와 같이 중첩된 리스트를 만들 수 있다.\n\nA = [[1,2,3],\n     [4,5,6],\n     [7,8,9]]\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n- A는 1차원인 벡터가 아니라 2차원인 매트릭스로 이해할 수 있다. 구체적으로는 아래와 같은 매트릭스로 이해할 수 있다\n\\[\\bf{A}=\\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}\\]\n- A에서 (2,1)의 원소를 뽑고싶다 = 4를 뽑고싶다\n\nA[1,0] # R에서는 이게 가능했죠\n\nTypeError: list indices must be integers or slices, not tuple\n\n\n\n실패\n\n\nA[1][0]\n\n4\n\n\n\n성공\n\n- 성공의 이유를 분석해보자.\n\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nA[1]\n\n[4, 5, 6]\n\n\n\nA[1][0]\n\n4\n\n\n- 매트릭스는 아니지만 매트릭스 같음!\n\n1차원 배열을 다차원 배열로 확장할 수 있는 기본 아이디어를 제공함"
  },
  {
    "objectID": "posts/04wk-2.html#k.-리스트-컴프리헨션-연습",
    "href": "posts/04wk-2.html#k.-리스트-컴프리헨션-연습",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "K. 리스트 컴프리헨션 연습",
    "text": "K. 리스트 컴프리헨션 연습\n- 예제1: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['SSSS','PPPP','AAAA','MMMM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n(풀이)\n\n[s*4 for s in 'SPAM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n- 예제2: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1','X2','X3','Y1','Y2','Y3']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n(풀이1)\n\nimport itertools\n\n\n[i+j for i,j in itertools.product('XY','123')]\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n(풀이2)\n\n[i+j for i in 'XY' for j in '123']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['stat1', 'stat2', 'stat3', 'math1', 'math2', 'math3']\n\n['stat1', 'stat2', 'stat3', 'math1', 'math2', 'math3']\n\n\n(풀이1)\n\n[i+j for i,j in itertools.product(['stat','math'], '123')]\n\n['stat1', 'stat2', 'stat3', 'math1', 'math2', 'math3']\n\n\n(풀이2)\n\n[i+j for i in ['stat','math'] for j in '123']\n\n['stat1', 'stat2', 'stat3', 'math1', 'math2', 'math3']\n\n\n(다른풀이) 비어있는 리스트를 만들고 for문을 쓰면 좀 복잡해진다.\n\nlst = [] \nfor x in ['stat','math']: \n    for y in '123': \n        lst.append(x+y)\nlst\n\n['stat1', 'stat2', 'stat3', 'math1', 'math2', 'math3']\n\n\n\nlst = [] \nfor x in ['stat','math']: \n    for y in '123': \n        lst = lst + [x+y]\nlst\n\n['stat1', 'stat2', 'stat3', 'math1', 'math2', 'math3']\n\n\n- 예제: 리스트컴프리헨션과 문자열 'jbnu'를 이용하여 아래와 같은 리스트를 만들어라.\n\n['j','b','n','u']\n\n['j', 'b', 'n', 'u']\n\n\n(풀이)\n\n[s for s in 'jbnu']\n\n['j', 'b', 'n', 'u']\n\n\n(다른풀이) 아래와 같이 풀면 된다는것은 알고 있음\n\nlist('jbnu')\n\n['j', 'b', 'n', 'u']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(풀이)\n\n['X'+str(i) for i in range(1,13)]\n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']"
  },
  {
    "objectID": "posts/04wk-2.html#l.-리스트-컴프리헨션과-for문의-미묘한-차이",
    "href": "posts/04wk-2.html#l.-리스트-컴프리헨션과-for문의-미묘한-차이",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "L. 리스트 컴프리헨션과 for문의 미묘한 차이",
    "text": "L. 리스트 컴프리헨션과 for문의 미묘한 차이\n(경우1)\n\nx=777 \nlst = [] \nfor x in 'jbnu': \n    lst = lst + [x]\nlst    \n\n['j', 'b', 'n', 'u']\n\n\n\nx\n\n'u'\n\n\n(경우2)\n\nx=777\nlst = [x for x in 'jbnu'] \nlst \n\n['j', 'b', 'n', 'u']\n\n\n\nx\n\n777\n\n\n\n진짜 미묘하게 다르죠?"
  },
  {
    "objectID": "posts/04wk-2.html#m.-연습문제들",
    "href": "posts/04wk-2.html#m.-연습문제들",
    "title": "04wk-2: 파이썬의 자료형 (1)",
    "section": "M. 연습문제들",
    "text": "M. 연습문제들\n# 문제. 길이가 0인 리스트를 만들어라. (비어있는 리스트를 만들어라)\n(풀이1)\n\na = list()\na\n\n[]\n\n\n(풀이2)\n\na = []\na\n\n[]\n\n\n# 문제. 다음의 실행값 중 가장 큰 숫자가 나오는 보기를 골라라. (에러가 나는 코드는 정답에서 제외함)\n(a) len(3.14) \n(b) len([3.14]) \n(c) len('3.14') \n(풀이)\n\nlen(3.14)\n\nTypeError: object of type 'float' has no len()\n\n\n\nlen([3.14])\n\n1\n\n\n\nlen('3.14')\n\n4\n\n\n답은 (c)\n# 문제. 리스트자료형의 +와 * 연산을 이용하여 아래와 같은 list를 생성하라.\n\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n\n\nhint: 아래의 코드를 관찰해보세요\n\n[1]*1+[2]*2 \n\n[1, 2, 2]\n\n\n(풀이)\n\nlst = []\nfor i in range(1,6):\n    lst = lst + [i]*i\nlst\n\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n\n\n# 문제. 다음과 같은 리스트를 고려하자.\n\nx = [80,60,80,90,55,85,95,100,35,70,75,65,95]\nx\n\n[80, 60, 80, 90, 55, 85, 95, 100, 35, 70, 75, 65, 95]\n\n\n이를 수식으로 표현하면 아래와 같다.\n\\({\\bf x} = [x_1,\\dots,x_{13}]=[80,60,80,90,55,85,95,100,35,70,75,65,95]\\)\n리스트의 원소중 “\\(x_i&gt;80\\)” 의 조건을 만족하는 원소는 모두 몇개인가?\n(풀이)\n\nsum(np.array(x)&gt;80)\n\n5\n\n\n\nsum([xi&gt;80 for xi in x])\n\n5\n\n\n# 문제. 다음과 같은 리스트를 고려하자.\n\n['A','B','C','D','A','A','B','A','F','C','C','C','A']\n\n['A', 'B', 'C', 'D', 'A', 'A', 'B', 'A', 'F', 'C', 'C', 'C', 'A']\n\n\n이 리스트에서 ‘A’ 혹은 ’B’의 숫자는 모두 몇개인가?\n(풀이1)\n\nlst = ['A','B','C','D','A','A','B','A','F','C','C','C','A']\nlst.count('A') + lst.count('B')\n\n7\n\n\n(풀이2)\n\nsum([l&lt;'C' for l in lst])\n\n7\n\n\n# 문제. 아래와 같은 문자열이 있다고 하자.\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n이 문자열에서 대문자의 수를 count하라. (2022년 파이썬입문 중간고사 1-(5) 참고)\n(풀이)\n\nsum([s.isupper() for s in test_arr])\n\n155\n\n\n# 문제. 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라. (2022년 파이썬입문 중간고사 1-(7) 참고)\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa'] &lt;- a가 10개있음\n(풀이)\n\n['a'*i for i in range(1,11)]\n\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa']\n\n\n# 문제. 아래와 같은 리스트를 관찰하라.\n\nlst = ['2022/09/21','2022/10/30','2022/12/25','2023/01/01','2023/01/31','2023/03/20']\n\n이러한 리스트를 아래와 같은 리스트로 변환하는 코드를 작성하라.\n\n['2022-09-21', '2022-10-30', '2022-12-25', '2023-01-01', '2023-01-31', '2023-03-20']\n\n['2022-09-21',\n '2022-10-30',\n '2022-12-25',\n '2023-01-01',\n '2023-01-31',\n '2023-03-20']\n\n\nhint: string의 .replace()기능과 리스트 컴프리헨션의 응용\n(풀이)\n\n[l.replace('/','-') for l in lst]\n\n['2022-09-21',\n '2022-10-30',\n '2022-12-25',\n '2023-01-01',\n '2023-01-31',\n '2023-03-20']\n\n\n# 문제. 아래와 같은 문자열을 고려하라.\n\n'2021. 01. 05.'\n\n'2021. 01. 05.'\n\n\n띄어쓰기를 제거하는 코드를 구현하라. 즉 출력결과가 아래와 같도록 만드는 코드를 구현하라.\n\n'2021.01.05'\n\n'2021.01.05'\n\n\n(풀이)\n\n'2021. 01. 05.'.replace(' ','')\n\n'2021.01.05.'\n\n\n# 문제. 아래와 같이 하나의 특수문자로 이루어진 리스트를 고려하자.\n\nblock = ['■'] \n\n이를 이용하여 아래와 같은 결과를 출력하라.\n\n'■-■-■-■-■-■-■-■-■-■' # 여기에서 '■'는 모두 10개 있음\n\n'■-■-■-■-■-■-■-■-■-■'\n\n\n(풀이)\n\n'-'.join(block*10)\n\n'■-■-■-■-■-■-■-■-■-■'"
  },
  {
    "objectID": "posts/13wk-2.html#a.-오브젝트",
    "href": "posts/13wk-2.html#a.-오브젝트",
    "title": "13wk-2: 클래스 (3)",
    "section": "A. 오브젝트",
    "text": "A. 오브젝트\n\n오브젝트 특징: id(오브젝트) 가 동작함\n\n- 예시1: 정수\n\na = 1 \nid(a)\n\n140255027003632\n\n\n- 예시2: 함수\n\nf = lambda x: x\nid(f)\n\n140253532742576\n\n\n- 예시3: 클래스와 인스턴스\n\nclass RPS:\n    pass \n\n\na = RPS()\nid(a)\n\n140160021638800\n\n\n\nid(RPS)\n\n37984320\n\n\n- 예시4: 파이썬 제공 기본클래스\n\nid(list)\n\n7629888\n\n\n\nid(str)\n\n7593344\n\n\n\nid(dict)\n\n7626144\n\n\n- 예시5: 파이썬 기본 제공기능\n\nid(range)\n\n7611936\n\n\n\nid(len)\n\n140255027630608\n\n\n\nid(id)\n\n140255027630128\n\n\n- 모듈\n\nid(np)\n\n140254921103840\n\n\n\nid(pd)\n\n140254237541776"
  },
  {
    "objectID": "posts/13wk-2.html#b.-오브젝트가-아님",
    "href": "posts/13wk-2.html#b.-오브젝트가-아님",
    "title": "13wk-2: 클래스 (3)",
    "section": "B. 오브젝트가 아님",
    "text": "B. 오브젝트가 아님\n- 예시1: 구문\n\nid(lambda)\n\nSyntaxError: invalid syntax (3978401784.py, line 1)\n\n\n\nid(def)\n\nSyntaxError: invalid syntax (839197359.py, line 1)\n\n\n- 예시2: 제어구조\n\nid(for)\n\nSyntaxError: invalid syntax (1172573452.py, line 1)\n\n\n\nid(if)\n\nSyntaxError: invalid syntax (2846441332.py, line 1)\n\n\n\nid(while)\n\nSyntaxError: invalid syntax (2390637289.py, line 1)"
  },
  {
    "objectID": "posts/13wk-2.html#a.-함수도-인스턴스다",
    "href": "posts/13wk-2.html#a.-함수도-인스턴스다",
    "title": "13wk-2: 클래스 (3)",
    "section": "A. 함수도 인스턴스다",
    "text": "A. 함수도 인스턴스다\n- 다시 함수를 공부해봅시다.\n\ndef f(x):\n    return x+1\n\n\nf(3)\n\n4\n\n\n- 함수의 사용방법?\n\n입력으로 변수 x를 받음 = 입력으로 인스턴스 x를 받음.\n출력으로 변수 x+1을 리턴 = 출력으로 인스턴스 x+1을 리턴.\n\n\nf(3)\n\n4\n\n\n- 사실1: 파이썬에서 함수는 인스턴스를 입력으로 받고 인스턴스를 출력한다.\n- 함수의 자료형?\n\n?f\n\n\nSignature: f(x)\nDocstring: &lt;no docstring&gt;\nFile:      /tmp/ipykernel_850445/1304018138.py\nType:      function\n\n\n\n\ntype이 function이다.\nf는 function class의 instance이다.\n결국 f 역시 하나의 오브젝트에 불과하다.\n\n- 사실2: 함수도 결국 인스턴스이다. -&gt; 함수의 입력으로 함수를 쓸 수도 있고 함수의 출력으로 함수가 나올 수도 있다."
  },
  {
    "objectID": "posts/13wk-2.html#b.-함수사용-고급",
    "href": "posts/13wk-2.html#b.-함수사용-고급",
    "title": "13wk-2: 클래스 (3)",
    "section": "B. 함수사용 고급",
    "text": "B. 함수사용 고급\n# 예제1 – 숫자입력, 함수출력\n\ndef f(a):\n    def g(x):\n        return (x-a)**2\n    return g\n\n\ng=f(10) # g(x)=(x-10)**2\n\n\ng(2) # (2-10)**2 = 64\n\n64\n\n\n\n해석: \\(f(a)\\)는 \\(a\\)를 입력으로 받고 \\(g(x)=(x-a)^2\\)라는 함수를 리턴해주는 함수\n\n\n아니 무슨 함수를 “값처럼” 취급해서 리턴하네??\n\nlambda를 이용한 표현1\n\ndef f(a):\n    g = lambda x: (x-a)**2 ### lambda x: (x-a)**2 가 실행되는 순간 함수오브젝트가 만들어지고 그것이 g 로 저장됨\n    return g\n\n\ng = f(10) # g(x)=(x-10)**2\n\n\ng(3) # (3-10)**2 = 49\n\n49\n\n\nlambda를 이용한 표현2\n\ndef f(a):\n    return lambda x: (x-a)**2\n\n\ng=f(10) # g(x)=(x-10)**2\n\n\ng(3) # (3-10)**2 = 49\n\n49\n\n\n#\n# 예제2 – 함수와 숫자를 입력으로, 숫자출력으로\n\ndef slope(f,x): # 함수를 입력을 받는 함수를 정의\n    h=0.000000000001\n    return (f(x+h)-f(x))/h\n\n\nslope(f,4) # f'(4) = 2*4 = 8\n\n10.999999844329977\n\n\n#\n# 예제3 – 함수입력, 함수출력\n\ndef derivate(f):\n    h = 0.000000000001\n    ff = lambda x: (f(x+h)-f(x))/h\n    return ff\n\n\nf = lambda x: x**2 # f(x) = x^2\nff = derivate(f) # ff(x) = 2x\n\n\nff(7) # ff는 f의 도함수 그자체\n\n14.004797321831575\n\n\n원래함수 시각화\n\nx = np.linspace(-1,1,100)\nf = lambda x: x**2\nplt.plot(x,f(x))\n\n\n\n\n\n\n\n\n도함수 시각화\n\nx = np.linspace(-1,1,100)\nf = lambda x: x**2\nff = derivate(f)\nplt.plot(x,f(x),label=r'$f(x)=x^2$')\nplt.plot(x,ff(x),label=r'$ff(x)=2x$')\nplt.legend()\n\n\n\n\n\n\n\n\n#\n# 예제4 – 함수들의 리스트\n\nf_list = [lambda x: x**2, lambda x: np.cos(5*x)]\n\n\nx = np.linspace(0,1,100)\nfor f in f_list: \n    plt.plot(x,f(x),'--')\n\n\n\n\n\n\n\n\n\nff_list = list(map(derivate,f_list))\n\n\nx = np.linspace(0,1,100)\nfor ff in ff_list: \n    plt.plot(x,ff(x),'--')\n\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/13wk-2.html#c.-정리",
    "href": "posts/13wk-2.html#c.-정리",
    "title": "13wk-2: 클래스 (3)",
    "section": "C. 정리",
    "text": "C. 정리\n- 지금까지 개념\n\n함수: 변수를 입력으로 받아서 변수를 출력하는 개념\n변수: 어떠한 값을 저장하는 용도로 쓰거나 함수의 입력 혹은 출력으로 사용함\n\n- R과 구별되는 파이썬의 독특한 테크닉 (부제: 파이썬에서 함수를 잘 쓰려면?)\n\n변수든 함수이든 둘다 인스턴스임. (즉 어떠한 클래스에서 찍힌 똑같은 오브젝트라는 의미)\n변수를 함수처럼: 메소드 lst.append(1)은 마치 append(lst,1)와 같은 함수로 쓸 수 있음\n함수를 변수처럼(\\(\\star\\)): 함수자체를 함수의 입력으로 혹은 출력으로 쓸 수도 있음. 함수를 특정 값처럼 생각해서 함수들의 list를 만들 수도 있다."
  },
  {
    "objectID": "posts/13wk-2.html#d.-callable-object",
    "href": "posts/13wk-2.html#d.-callable-object",
    "title": "13wk-2: 클래스 (3)",
    "section": "D. callable object",
    "text": "D. callable object\n- 함수 오브젝트의 비밀?\n\nf = lambda x: x+1\n\n\nf(100) # 이게 왜 가능하지? \n\n101\n\n\n\nf.__call__(100) # f(100)\n\n101\n\n\n\nset(dir(f)) & {'__call__'}\n\n{'__call__'}\n\n\n\n함수 오브젝트에는 숨겨진 기능 __call__이 있다.\n\n\nf.__call__(3) # f(3)\n\n4\n\n\n\nf.__call__(4) # f(4)\n\n5\n\n\n\n여기에 우리가 정의한 내용이 있다.\n\n- 함수처럼 쓸 수 없는 인스턴스는 단지 __call__이 없는 것일 뿐이다.\n\nclass Guebin:\n    def __init__(self):\n        self.name = 'guebin'\n\n\na = Guebin()\n\n\na()\n\nTypeError: 'Guebin' object is not callable\n\n\n\ncallable이 아니라고 한다.\n\n\nclass Guebin2:\n    def __init__(self):\n        self.name = 'guebin'    \n    def __call__(self):\n        print(self.name)\n\n\nb = Guebin2()\n\n\nb()\n\nguebin\n\n\n\nb는 callable object! 즉 숨겨진 메서드로 __call__를 가진 오브젝트!\nGuebin는 callable object를 만들지 못하지만 Guebin2는 callable object를 만든다.\n\n\n파이썬의 비밀: f()와 같이 쓸 수 있는 오브젝트는 단지 __call__ 이 정의되어있는 오브젝트일 뿐이다.\n\n- callable 을 체크하는 방법\n\nset(dir(b)) & {'__call__'}\n\n{'__call__'}\n\n\n\nisinstance(a,collections.abc.Callable)\n\nFalse\n\n\n\nisinstance(b,collections.abc.Callable)\n\nTrue"
  },
  {
    "objectID": "posts/13wk-2.html#a.-for문의-복습",
    "href": "posts/13wk-2.html#a.-for문의-복습",
    "title": "13wk-2: 클래스 (3)",
    "section": "A. for문의 복습",
    "text": "A. for문의 복습\n- 아래와 같은 예제들을 관찰하여 for문을 복습하자.\n# 예시1 – [1,2,3,4]\n\nfor i in [1,2,3,4]:\n    print(i,type(i))\n\n1 &lt;class 'int'&gt;\n2 &lt;class 'int'&gt;\n3 &lt;class 'int'&gt;\n4 &lt;class 'int'&gt;\n\n\n#\n# 예시2 – (1,2,3,4)\n\nfor i in (1,2,3,4):\n    print(i,type(i))\n\n1 &lt;class 'int'&gt;\n2 &lt;class 'int'&gt;\n3 &lt;class 'int'&gt;\n4 &lt;class 'int'&gt;\n\n\n#\n# 예시3 – '1234'\n\nfor i in '1234':\n    print(i,type(i))\n\n1 &lt;class 'str'&gt;\n2 &lt;class 'str'&gt;\n3 &lt;class 'str'&gt;\n4 &lt;class 'str'&gt;\n\n\n#\n# 예시4 – 5\n\nfor i in 5:\n    print(i,type(i))\n\nTypeError: 'int' object is not iterable\n\n\n\n5가 출력되는게 합리적이지 않나?\n\n- 의문1:\nfor i in ???:\n    print(i)\n에서 ??? 자리에 올수 있는 것이 무엇일까?\n#\n# 예시5 – [[1,2,3,4],[3,4,5,6]], pd.DataFrame([[1,2,3,4],[3,4,5,6]])\n\nlst = [[1,2,3,4],[3,4,5,6]]\nlst\n\n[[1, 2, 3, 4], [3, 4, 5, 6]]\n\n\n\nfor l in lst:\n    print(l,type(l))\n\n[1, 2, 3, 4] &lt;class 'list'&gt;\n[3, 4, 5, 6] &lt;class 'list'&gt;\n\n\n\nfor l in np.array(lst):\n    print(l,type(l))\n\n[1 2 3 4] &lt;class 'numpy.ndarray'&gt;\n[3 4 5 6] &lt;class 'numpy.ndarray'&gt;\n\n\n\nfor l in pd.DataFrame(lst):\n    print(l, type(l))\n\n0 &lt;class 'int'&gt;\n1 &lt;class 'int'&gt;\n2 &lt;class 'int'&gt;\n3 &lt;class 'int'&gt;\n\n\n\n뭐야? 아는 문법이긴 한데 이렇게 보니까 이상하네\n\n- 데이터프레임인 경우는 colname이 반복\n\ndct = {'x':[1,2,3],'y':[2,3,4]}\ndf = pd.DataFrame(dct)\ndf\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\nfor colname in df:\n    print(colname)\n\nx\ny\n\n\n\nfor key in dct:\n    print(key)\n\nx\ny\n\n\n- 의문2: for의 출력결과는 어떻게 예측할 수 있을까?\n#"
  },
  {
    "objectID": "posts/13wk-2.html#b.-for문의-동작원리",
    "href": "posts/13wk-2.html#b.-for문의-동작원리",
    "title": "13wk-2: 클래스 (3)",
    "section": "B. for문의 동작원리",
    "text": "B. for문의 동작원리\n- 의문1의 해결: 아래의 ??? 자리에 올 수 있는 것은 dir()하여 __iter__가 있는 object이다.\nfor i in ???:\n    print(i)\n이러한 오브젝트를 iterable object라고 한다.\n- 예제1~4 확인\n\nlst = [1,2,3]\n#set(dir(lst)) & {'__iter__'}\nisinstance(lst,collections.abc.Iterable)\n\nTrue\n\n\n\ntpl = 1,2,3\n#set(dir(tpl)) & {'__iter__'}\nisinstance(tpl,collections.abc.Iterable)\n\nTrue\n\n\n\nstring = '123'\n#set(dir(string)) & {'__iter__'}\nisinstance(string,collections.abc.Iterable)\n\nTrue\n\n\n\na = 5\n#set(dir(a)) & {'__iter__'}\nisinstance(a,collections.abc.Iterable)\n\nFalse\n\n\n- __iter__의 역할: iterable object를 iterator로 만들 수 있다!\n\nlst = [1,22,-33]\n\n\nlist_iterator = lst.__iter__()\n# list_iterator = iter(lst)\n\n- iterator가 되면 무엇이 좋은가? -&gt; 숨겨진 기능 __next__가 열린다.\n\nset(dir(list_iterator)) & {'__next__'}\n\n{'__next__'}\n\n\n- 그래서 __next__의 기능은? -&gt; 원소를 차례대로 꺼내준다 + 더 이상 꺼낼 원소가 없으면 StopIteration Error를 발생시킨다.\n\nnext(list_iterator)\n# list_iterator.__next__() # 같은코드\n\n1\n\n\n\nnext(list_iterator)\n# list_iterator.__next__() # 같은코드\n\n22\n\n\n\nnext(list_iterator)\n# list_iterator.__next__() # 같은코드\n\n-33\n\n\n\nnext(list_iterator)\n# list_iterator.__next__() # 같은코드\n\nStopIteration: \n\n\n- 참고로 아래들도 같은코드임\n\na = [100,200]\na.__repr__(), repr(a)\n\n('[100, 200]', '[100, 200]')\n\n\n\na = [100,200]\na.__str__(), str(a)\n\n('[100, 200]', '[100, 200]')\n\n\n\na = [100,200]\na.__len__(), len(a)\n\n(2, 2)\n\n\n\na = [100,200]\na.__iter__(), iter(a)\n\n(&lt;list_iterator at 0x7f8f4eb02d10&gt;, &lt;list_iterator at 0x7f8f4eb03520&gt;)\n\n\n\na = iter([100,200])\na.__next__(), next(a)\n\n(100, 200)\n\n\n- for문의 동작원리\nfor i in iterable:\n    ...\n\n__iter__ 실행: .__iter__() 혹은 iter()을 이용하여 iterable을 iterator로 만든다.\n__next__ 실행: 1에서 만들어진 iterator에서 .__next__() 함수를 호출한다. .__next__()함수를 호출했을때 StopIteration Error 이 나오면 반복을 멈추고, 그렇지 않으면 for문 블락안의 내용 (들여쓰기 된 내용) 을 실행한다.\n\n\n\n\n\n\nflowchart LR\n  A[iterable] --&gt; |\"__iter__()\"| B(iterator)\n  B --&gt; |\"__next__()\"| C{stop?}\n  C --&gt; |NO| D[for문 안의 내용 실행] --&gt; B\n  C --&gt; |YES| E[end]\n\n\n\n\n\n\n\n# lst = [1,2,-3]\n# for l in lst:\n#     print(l+1)\nlst = [1,2,-3]\nlist_iterator = iter(lst)\nl = next(list_iterator)\nprint(l+1)\nl = next(list_iterator)\nprint(l+1)\nl = next(list_iterator)\nprint(l+1)\nl = next(list_iterator) # StopIteration Error발생 -- for문 멈춤\n\n2\n3\n-2\n\n\nStopIteration: \n\n\n- 아래의 구조도 잘 돌아갈까?\nfor i in iterator:\n    print(i)\n\nlst = [1,2,-3]\nfor l in iter(lst): # 당연히 되겠지?\n    print(l+1)\n\n2\n3\n-2\n\n\n\n얼핏드는 생각: iterator일 경우와 iterable일 경우로 나누어서 로직을 짜면 좋을 것같다. 즉 iterator인 경우 __iter__의 실행과정없이 바로 __next__를 실행하면 될 것 같다.\n\n\n더 좋은 생각: iterator일 경우도 __iter__를 따로 정의해서 자기자신을 return하도록 설정하는 트릭을 쓴다면 위의 다이어그램을 별도로 수정할 필요가 없다.\n\n- 요약\n\niterable object는 숨겨진 기능으로 __iter__를 가진다. (__next__는 없음)\niterator는 숨겨진 기능으로 __iter__와 __next__를 가진다. 따라서 정의상 iterator는 그 자체로 iterable object가 된다!\niterator의 __iter__는 자기자신을 리턴한다.\n\n- 의문2의 해결: for의 출력결과는 어떻게 예측할 수 있을까? iterator를 만들어서 .__next__()의 출력값을 확인하면 알 수 있다.\n\ndf_itertor = iter(df)\n\n\nnext(df_itertor)\n\n'x'\n\n\n\nnext(df_itertor)\n\n'y'\n\n\n\nnext(df_itertor)\n\nStopIteration:"
  },
  {
    "objectID": "posts/13wk-2.html#c.-사용자정의-이터레이터",
    "href": "posts/13wk-2.html#c.-사용자정의-이터레이터",
    "title": "13wk-2: 클래스 (3)",
    "section": "C. 사용자정의 이터레이터",
    "text": "C. 사용자정의 이터레이터\n- 내가 이터레이터를 만들어보자.\n- “가위”를 내는 순간 for문이 멈추도록 하는 이터레이터를 만들자.\n\nclass RPS_ITERATOR: # 가위를 내는순간 for문이 멈추도록 하는 이터레이터를 만들자\n    def __init__(self):\n        self.action_space = [\"가위\",\"바위\",\"보\"]\n        self.action = None \n    def __iter__(self):\n        return self\n    def __next__(self): \n        self.action = np.random.choice(self.action_space)\n        if self.action == \"가위\":\n            print(\"가위를 뽑았습니다. for문을 탈출합니다\")\n            raise(StopIteration)\n        else: \n            return self.action \n\n\nplayer = RPS_ITERATOR()\n\n\nfor action in player:\n    print(action)\n\n보\n바위\n보\n바위\n보\n보\n가위를 뽑았습니다. for문을 탈출합니다"
  },
  {
    "objectID": "posts/13wk-2.html#d.-range",
    "href": "posts/13wk-2.html#d.-range",
    "title": "13wk-2: 클래스 (3)",
    "section": "D. range()",
    "text": "D. range()\n- 파이썬에서 for문을 처음 배울 때: range(5)를 써라!\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\nrange(5)가 도데체 무엇이길래?\n\n- range는 클래스이고, range(5)는 range 클래스에서 찍힌 iterable 한 인스턴스이다.\n\nrange_ins = range(5)\nprint(isinstance(range_ins,collections.abc.Iterable))\nprint(isinstance(range_ins,collections.abc.Iterator))\n\nTrue\nFalse\n\n\n- range_ins = range(5) 언제든지 iterator로 바꿀 수 있다. (이터러블하니까..)\n\nrange_iterator = iter(range_ins)\nprint(isinstance(range_iterator,collections.abc.Iterable))\nprint(isinstance(range_iterator,collections.abc.Iterator))\n\nTrue\nTrue\n\n\n- for문에서 range(5)가 행동하는 방법?\n\nrange_iterator.__next__()\n\n0\n\n\n\nrange_iterator.__next__()\n\n1\n\n\n\nrange_iterator.__next__()\n\n2\n\n\n\nrange_iterator.__next__()\n\n3\n\n\n\nrange_iterator.__next__()\n\n4\n\n\n\nrange_iterator.__next__()\n\nStopIteration: \n\n\n\n파이썬의 작은 비밀: range은 iterable 오브젝트를 찍어내는 클래스였음"
  },
  {
    "objectID": "posts/13wk-2.html#e.-zip",
    "href": "posts/13wk-2.html#e.-zip",
    "title": "13wk-2: 클래스 (3)",
    "section": "E. zip",
    "text": "E. zip\n- 이터레이터의 개념을 알면 for문에 대한 이해도가 대폭 상승한다.\n\nfor i,j in zip([1,2,3],'abc'):\n    print(i,j)\n\n1 a\n2 b\n3 c\n\n\n\nzip([1,2,3],'abc')은 뭐지?\n\n- zip은 클래스이고, zip([1,2,3],'abc')는 zip 클래스에서 찍힌 iterator 이다.\n\nzip_instance = zip([1,2,3],'abc')\nprint(isinstance(zip_instance,collections.abc.Iterable))\nprint(isinstance(zip_instance,collections.abc.Iterator))\n\nTrue\nTrue\n\n\n\nnext(zip_instance)\n\n(1, 'a')\n\n\n\nnext(zip_instance)\n\n(2, 'b')\n\n\n\nnext(zip_instance)\n\n(3, 'c')\n\n\n\nnext(zip_instance)\n\nStopIteration: \n\n\n\n파이썬의 작은 비밀: zip은 iterator를 찍어내는 클래스였음"
  },
  {
    "objectID": "posts/13wk-2.html#f.-enumerate",
    "href": "posts/13wk-2.html#f.-enumerate",
    "title": "13wk-2: 클래스 (3)",
    "section": "F. enumerate",
    "text": "F. enumerate\n- zip의 짝궁으로 enumerate가 있었음\n\nfor i,s in enumerate('abc'):\n    print(i,s)\n\n0 a\n1 b\n2 c\n\n\n- enumerate('abc')도 문법상 iterable object 아니면 iterator 임. \\(\\to\\) 확인해보니 이터레이터!\n\nenumerate_ins = enumerate('abc')\nprint(isinstance(enumerate_ins,collections.abc.Iterable))\nprint(isinstance(enumerate_ins,collections.abc.Iterator))\n\nTrue\nTrue\n\n\n\nnext(enumerate_ins)\n\n(0, 'a')\n\n\n\nnext(enumerate_ins)\n\n(1, 'b')\n\n\n\nnext(enumerate_ins)\n\n(2, 'c')\n\n\n\nnext(enumerate_ins)\n\nStopIteration: \n\n\n\n파이썬의 작은 비밀: enumerate 역시 iterator를 찍어내는 클래스다.\n\n\n파이썬의 비밀: iterator나 iterable object만 for문과 함께 사용할 수 있다. (단, 예외적으로 __getitem__ 이 정의된 경우에는 for문과 함께 쓸 수 있음.)"
  },
  {
    "objectID": "posts/13wk-2.html#g.-__getitem__",
    "href": "posts/13wk-2.html#g.-__getitem__",
    "title": "13wk-2: 클래스 (3)",
    "section": "G. __getitem__()",
    "text": "G. __getitem__()\n- 예외\n\nclass Dummy:\n    def __getitem__(self):\n        pass\n\n\ndummy_ins = Dummy()\nisinstance(dummy_ins,collections.abc.Iterable)\n\nFalse\n\n\n\n이터러블이 아니라고 판단됨\n\n\niter(dummy_ins)\n\n&lt;iterator at 0x7fe636541fc0&gt;\n\n\n\nisinstance(iter(dummy_ins),collections.abc.Iterable), isinstance(iter(dummy_ins),collections.abc.Iterator)\n\n(True, True)\n\n\n\n그런데 이터레이터가 되었음.."
  },
  {
    "objectID": "posts/13wk-2.html#a.-인스턴스-변수-클래스-변수",
    "href": "posts/13wk-2.html#a.-인스턴스-변수-클래스-변수",
    "title": "13wk-2: 클래스 (3)",
    "section": "A. 인스턴스 변수, 클래스 변수",
    "text": "A. 인스턴스 변수, 클래스 변수\n# 예제1 – 인스턴스변수\n\nclass GS25: \n    def __init__(self):\n        self.n_guests = 0 \n    def come(self,m):\n        self.n_guests = self.n_guests + m \n    def __repr__(self):\n        return f\"손님수(인스턴스) = {self.n_guests}\"\n\n\nstore1 = GS25()\n\n\nstore1.come(2)\nstore1.come(3)\nstore1.come(5)\n\n\nstore1\n\n손님수(인스턴스) = 10\n\n\n\nstore2 = GS25()\n\n\nstore2.come(1)\nstore2.come(1)\nstore2.come(1)\n\n\nstore2\n\n손님수(인스턴스) = 3\n\n\n- 질문1: GS25는 총 몇개의 store를 가지고 있는가? –&gt; 2개\n- 질문2: GS25는 모두 몇명의 손님이 왔는가? –&gt; 10+3 = 13명\n# 예제2 – 질문을 해결하기 위한 코드\n\nGS25.n_stores\n\nAttributeError: type object 'GS25' has no attribute 'n_stores'\n\n\n\nGS25.n_total_guests\n\nAttributeError: type object 'GS25' has no attribute 'n_total_guests'\n\n\n\nGS25.n_stores = 0\nGS25.n_total_guests = 0 \n\n\nGS25.n_stores, GS25.n_total_guests # 이게 가능하네??\n\n(0, 0)\n\n\n\nstore1 = GS25()\nGS25.n_stores = GS25.n_stores + 1\n\n\n#store1.come(2)\nstore1.n_guests = store1.n_guests + 2  \nGS25.n_total_guests = GS25.n_total_guests +2 \n#store1.come(3)\nstore1.n_guests = store1.n_guests + 3 \nGS25.n_total_guests = GS25.n_total_guests + 3 \n#store1.come(5)\nstore1.n_guests = store1.n_guests + 5\nGS25.n_total_guests = GS25.n_total_guests + 5 \n\n\nstore1\n\n손님수(인스턴스) = 10\n\n\n\nGS25.n_stores, GS25.n_total_guests\n\n(1, 10)\n\n\n\nstore2 = GS25()\nGS25.n_stores = GS25.n_stores + 1 \n\n\n#store2.come(1)\nstore2.n_guests = store2.n_guests + 1  \nGS25.n_total_guests = GS25.n_total_guests + 1 \n#store2.come(1)\nstore2.n_guests = store2.n_guests + 1  \nGS25.n_total_guests = GS25.n_total_guests + 1 \n#store2.come(1)\nstore2.n_guests = store2.n_guests + 1  \nGS25.n_total_guests = GS25.n_total_guests + 1 \n\n\nstore2\n\n손님수(인스턴스) = 3\n\n\n\nGS25.n_stores, GS25.n_total_guests \n\n(2, 13)\n\n\n#\n# 예제3 – 질문을 해결하기 위한 코드 (2)\n\nclass GS25: \n    n_stores = 0\n    n_total_guests = 0\n    def __init__(self):\n        self.n_guests = 0 \n        GS25.n_stores = GS25.n_stores + 1 \n    def come(self,m):\n        self.n_guests = self.n_guests + m \n        GS25.n_total_guests = GS25.n_total_guests + m\n    def __repr__(self):\n        text = (\n            f\"GS25-{GS25.n_stores}호점\\n\"\n            f\"손님수(인스턴스) = {self.n_guests}\\n\"\n            f\"총손님수(클래스) = {GS25.n_total_guests}\"    \n        )\n        return text \n\n\nstore1 = GS25()\nstore1\n\nGS25-1호점\n손님수(인스턴스) = 0\n총손님수(클래스) = 0\n\n\n\nstore1.come(2)\nstore1.come(3)\nstore1.come(5)\nstore1\n\nGS25-1호점\n손님수(인스턴스) = 10\n총손님수(클래스) = 10\n\n\n\nstore2 = GS25()\nstore2\n\nGS25-2호점\n손님수(인스턴스) = 0\n총손님수(클래스) = 10\n\n\n\nstore2.come(1)\nstore2.come(1)\nstore2.come(1)\nstore2\n\nGS25-2호점\n손님수(인스턴스) = 3\n총손님수(클래스) = 13\n\n\n요약\n\n클래스내에서 사용할 수 있는 변수는 “클래스변수”, “인스턴스변수” 가 있으며, 클래스변수는 클래스 오브젝트에, 인스턴스 변수는 인스턴스 오브젝트에 귀속된다.\n클래스변수는 class 이후에 변수명을 나열하여 선언하고, 인스턴스변수는 __init__(self) 에서 정리하여 선언한다.\n클래스변수를 사용할때는 클래스이름.변수이름 와 같은 형식으로, 인스턴스변수를 사용할때는 self.변수이름와 같은 형식으로 쓴다.\n\n# 예제4 – 인스턴스변수를 따로 선언하지 않아도, 클래스변수가 선언되어 있으면 그 클래스에서 태어난 인스턴스는 클래스변수를 빌려쓸 수 있다.\n\nclass Klass:\n    a = 100 # a는 클래스 변수\n\n\nKlass.a\n\n100\n\n\n\nins = Klass()\n\n\nins.a # 클래스변수인데 빌려쓰고있음\n\n100\n\n\n#\n# 예제5 – 인스턴스가 클래스변수를 빌려쓰는 경우 클래스변수를 바꾸면 자동으로 인스턴스 변수도 바뀐다.\n\nclass Klass:\n    a = 0 # a는 클래스 변수\n\n\nKlass.a\n\n0\n\n\n\nins1 = Klass()\n\n\nins2 = Klass()\n\n\nins1.a, ins2.a \n\n(0, 0)\n\n\n\nKlass.a = 10\n\n\nins1.a, ins2.a \n\n(10, 10)\n\n\n#\n# 예제6 – 인스턴스변수와 클래스변수가 같은이름으로 동시에 선언된 경우, 각각 독립적으로 행동한다.\n\nclass Klass:\n    a = 0 # a는 클래스 변수\n    def __init__(self):\n        self.a = 1 # a는 인스턴스 변수 # self는 더이상 a를 클래스에서 빌렸지 않게됨 \n\n\nKlass.a\n\n0\n\n\n\nins = Klass()\n\n\nins.a\n\n1\n\n\n\nKlass.a = 100\nKlass.a, ins.a \n\n(100, 1)\n\n\n\nins.a = 200\nKlass.a, ins.a \n\n(100, 200)\n\n\n#\n# 예제7 – 인스턴스가 클래스변수를 빌려쓰는 경우, 인스턴스 변수를 변경하더라도 클래스변수가 변경되지 않는다. (대신 예제6과 같이 인스턴스변수가 따로 독립적으로 생성되는 효과가 나온다)\n\nclass Klass:\n    a = 0 # a는 클래스 변수\n\n\nKlass.a\n\n0\n\n\n\nins1 = Klass()\nins2 = Klass()\n\n\nins1.a, ins2.a\n\n(0, 0)\n\n\n\nKlass.a = 10\n\n\nKlass.a, ins1.a, ins2.a\n\n(10, 10, 10)\n\n\n\nins1.a = 100 # 이순간 더이상 ins1은 클래스에 있는 a를 빌려쓰는게 아니고 독자적으로 a를 만듦\nins1.a\n\n100\n\n\n\nKlass.a, ins1.a, ins2.a\n\n(10, 100, 10)\n\n\n\nKlass.a = -99\n\n\nKlass.a, ins1.a, ins2.a # # ins1는 더이상 변수를 빌려쓰지 않음, 독자노선\n\n(-99, 100, -99)\n\n\n# 예제8 – 정석적이지 않은사용\n\nclass Up:\n    a = 0 \n    def up(self):\n        self.a = self.a + 1 \n\n\nins = Up()\n\n\nins.a = ins.a +1 # 이때는 클래스변수를 빌려씀\n\n\nins.up() # 이걸 실행하는 순간 a는 인스턴스 변수로 변화\nins.a\n\n2\n\n\n#"
  },
  {
    "objectID": "posts/13wk-2.html#b.-인스턴스-메서드",
    "href": "posts/13wk-2.html#b.-인스턴스-메서드",
    "title": "13wk-2: 클래스 (3)",
    "section": "B. 인스턴스 메서드",
    "text": "B. 인스턴스 메서드\n- self 비밀: 사실 클래스에서 정의된 함수의 첫번째 인자의 이름이 꼭 self일 필요는 없다. (무엇으로 전달하든 클래스안에서 정의된 메소드의 첫번째 인자는 기본적으로 instance의 태명역할을 한다)\n\nclass Guebin: \n    def __init__(abab):\n        abab.name = 'guebin'\n    def __repr__(cdcd):\n        return f\"이름: {cdcd.name}\"\n\n\na=Guebin()\n\n\na.name\n\n'guebin'\n\n\n\na\n\n이름: guebin\n\n\n- 그런데 그냥 self를 쓰세요. 관습에 따르세요."
  },
  {
    "objectID": "posts/13wk-2.html#c.-클래스-메서드",
    "href": "posts/13wk-2.html#c.-클래스-메서드",
    "title": "13wk-2: 클래스 (3)",
    "section": "C. 클래스 메서드",
    "text": "C. 클래스 메서드\n- 클래스 메서드: 함수의 첫 인자로 클래스오브젝트를 받는 특수한 함수를 클래스메서드라고 한다.\n\n인스턴스 메서드: 함수의 첫 인자로 인스턴스오브젝트를 받는 특수한 함수를 인스턴스 메서드라고 한다.\n\n- 목표: 클래스이름.f()와 같은 형태로 사용할 수 있는 함수를 만들어 보자 -&gt; 클래스메서드를 만들어보자!\n# 예제1 – 아래의 코드를 수정해보자.\n\n# class GS25: \n#     n_stores = 0\n#     n_total_guests = 0\n#     def __init__(self):\n#         self.n_guests = 0 \n#         GS25.n_stores = GS25.n_stores + 1 \n#     def come(self,m):\n#         self.n_guests = self.n_guests + m \n#         GS25.n_total_guests = GS25.n_total_guests + m\n#     def __repr__(self):\n#         text = (\n#             f\"GS25-{GS25.n_stores}호점\\n\"\n#             f\"손님수(인스턴스) = {self.n_guests}\\n\"\n#             f\"총손님수(클래스) = {GS25.n_total_guests}\"    \n#         )\n#         return text \n\n\nclass GS25: \n    n_stores = 0\n    n_total_guests = 0\n    @classmethod\n    def add_store(cls):\n        cls.n_stores = cls.n_stores + 1 \n    @classmethod\n    def add_guest(cls,m):\n        cls.n_total_guests = cls.n_total_guests + m \n    @classmethod\n    def info(cls):\n        print(f\"총점포수 = {cls.n_stores}\\n총손님수 = {cls.n_total_guests}\")\n    #--#\n    def __init__(self):\n        self.n_guests = 0 \n        GS25.add_store()\n    def come(self,m):\n        self.n_guests = self.n_guests + m \n        GS25.add_guest(m)\n    def __repr__(self):\n        text = (\n            f\"GS25-{GS25.n_stores}호점\\n\"\n            f\"손님수(인스턴스) = {self.n_guests}\\n\"\n            f\"총손님수(클래스) = {GS25.n_total_guests}\"    \n        )\n        return text \n\n\nGS25.info()\n\n총점포수 = 0\n총손님수 = 0\n\n\n\nstore1 = GS25()\n\n\nstore1\n\nGS25-1호점\n손님수(인스턴스) = 0\n총손님수(클래스) = 0\n\n\n\nstore1.come(2)\n\n\nstore1\n\nGS25-1호점\n손님수(인스턴스) = 2\n총손님수(클래스) = 2\n\n\n\nGS25.info()\n\n총점포수 = 1\n총손님수 = 2\n\n\n\nstore2 = GS25()\n\n\nstore2.come(5)\n\n\nstore2\n\nGS25-2호점\n손님수(인스턴스) = 5\n총손님수(클래스) = 7\n\n\n\nGS25.info()\n\n총점포수 = 2\n총손님수 = 7"
  },
  {
    "objectID": "posts/13wk-2.html#d.-스태틱-메서드",
    "href": "posts/13wk-2.html#d.-스태틱-메서드",
    "title": "13wk-2: 클래스 (3)",
    "section": "D. 스태틱 메서드",
    "text": "D. 스태틱 메서드\n- 스태틱 메서드: 첫 인자로 인스턴스와 클래스 모두 받지 않음. (클래스안에 정의되어 있지만 그냥 함수와 같음)\n\nclass Calculator: \n    @staticmethod\n    def add(a,b):\n        return a+b\n    @staticmethod\n    def sub(a,b):\n        return a-b \n\n\ncal = Calculator()\n\n\ncal.add(1,2)\n\n3\n\n\n\ncal.sub(1,2)\n\n-1\n\n\n\nCalculator.add(3,4)\n\n7\n\n\n\nCalculator.sub(3,4)\n\n-1\n\n\n\ncal는 그냥 함수들을 묶어놓은 느낌? 정리하게 편하게?\n\n- 쓸모없다?"
  },
  {
    "objectID": "posts/15wk-2.html#base-클래스-설계",
    "href": "posts/15wk-2.html#base-클래스-설계",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(1) Base 클래스 설계",
    "text": "(1) Base 클래스 설계\n아래와 같은 기능을 하도록 Base 클래스를 만들어라.\n# 예시1\n\n다호 = Base(end_condition=5,name=\"다호\")\n\n\n다호\n\n이름: 다호\n목표높이: 5\n현재높이: 0\n진행횟수: 0\n완성상태: False\n\n\n\n다호.탑쌓기()\n\n\n다호\n\n이름: 다호\n목표높이: 5\n현재높이: 1\n진행횟수: 1\n완성상태: False\n\n\n\n다호.탑쌓기()\n\n\n다호\n\n이름: 다호\n목표높이: 5\n현재높이: 2\n진행횟수: 2\n완성상태: False\n\n\n#\n# 예시2\n\n하니 = Base(end_condition=5,name=\"하니\")\n\n\nfor _ in range(5):\n    하니.탑쌓기()\n\n\n하니 # 목표치에 도달하여 완성상태가 변경\n\n이름: 하니\n목표높이: 5\n현재높이: 5\n진행횟수: 5\n완성상태: True\n\n\n\nfor _ in range(5):\n    하니.탑쌓기()\n\n\n하니 # 목표치에 도달하여 더이상 탑이 쌓이지 않았음\n\n이름: 하니\n목표높이: 5\n현재높이: 5\n진행횟수: 10\n완성상태: True\n\n\n#\n# 예시3\n\n다호 = Base(end_condition=5,name=\"다호\")\n하니 = Base(end_condition=5,name=\"하니\")\n\n\n다호.탑쌓기()\n다호\n\n이름: 다호\n목표높이: 5\n현재높이: 1\n진행횟수: 1\n완성상태: False\n\n\n\n다호 &gt; 하니, 다호 &lt; 하니 # 현재높이비교\n\n(True, False)\n\n\n\n하니.탑쌓기()\n하니.탑쌓기()\n하니\n\n이름: 하니\n목표높이: 5\n현재높이: 2\n진행횟수: 2\n완성상태: False\n\n\n\n다호 &gt; 하니, 다호 &lt; 하니 # 현재높이비교\n\n(False, True)\n\n\n#\n# 예시4\n\n다호 = Base(end_condition=5,name=\"다호\")\n하니 = Base(end_condition=5,name=\"하니\")\n\n\n다호.탑쌓기()\n다호\n\n이름: 다호\n목표높이: 5\n현재높이: 1\n진행횟수: 1\n완성상태: False\n\n\n\n다호 &gt; 하니, 다호 &lt; 하니\n\n(True, False)\n\n\n\n다호 &gt;&gt; 하니, 다호 &lt;&lt; 하니 # 승리조건 체크 (다호가 1층 높지만 어느 누구도 승리상태아님)\n\n(False, False)\n\n\n\n하니.탑쌓기()\n하니.탑쌓기()\n하니\n\n이름: 하니\n목표높이: 5\n현재높이: 2\n진행횟수: 2\n완성상태: False\n\n\n\n다호 &gt; 하니, 다호 &lt; 하니\n\n(False, True)\n\n\n\n다호 &gt;&gt; 하니, 다호 &lt;&lt; 하니 # 승리조건 체크 (하니가 1층 높지만 어느 누구도 승리상태아님)\n\n(False, False)\n\n\n\n다호.탑쌓기()\n다호.탑쌓기()\n다호.탑쌓기()\n다호.탑쌓기()\n\n\n다호 # 다호가 탑을 완성함. 승리조건 달성\n\n이름: 다호\n목표높이: 5\n현재높이: 5\n진행횟수: 5\n완성상태: True\n\n\n\n다호 &gt;&gt; 하니, 다호 &lt;&lt; 하니 # 승리조건 체크 -- 다호의 승리\n\n(True, False)\n\n\n#"
  },
  {
    "objectID": "posts/15wk-2.html#guebin-클래스-설계",
    "href": "posts/15wk-2.html#guebin-클래스-설계",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(2) Guebin 클래스 설계",
    "text": "(2) Guebin 클래스 설계\nBase를 상속받아 예시와 같은 Guebin 클래스를 만들어라.\n# 예시1\n\n규빈 = Guebin(name=\"규빈\",end_condition=5)\n\n\n규빈.prob\n\n0.5\n\n\n#\n# 예시2\n\n규빈 = Guebin(name=\"규빈\",end_condition=5)\n\n\nprint(f\"성공확률 = {규빈.prob}\")\n규빈.탑쌓기()\n규빈\n\n성공확률 = 0.5\n\n\n이름: 규빈\n목표높이: 5\n현재높이: 0\n진행횟수: 1\n완성상태: False\n\n\n\nprint(f\"성공확률 = {규빈.prob}\")\nfor _ in range(5):\n    규빈.탑쌓기()\n    print(repr(규빈))\n    print(\"--\")\n\n성공확률 = 0.5\n이름: 규빈\n목표높이: 5\n현재높이: 0\n진행횟수: 2\n완성상태: False\n--\n이름: 규빈\n목표높이: 5\n현재높이: 2\n진행횟수: 3\n완성상태: False\n--\n이름: 규빈\n목표높이: 5\n현재높이: 0\n진행횟수: 4\n완성상태: False\n--\n이름: 규빈\n목표높이: 5\n현재높이: 0\n진행횟수: 5\n완성상태: False\n--\n이름: 규빈\n목표높이: 5\n현재높이: 2\n진행횟수: 6\n완성상태: False\n--\n\n\n#\n# 예시3\n\n규빈 = Guebin(name=\"규빈\",end_condition=5)\n\n\n규빈.prob = 0.9\n\n\nprint(f\"성공확률 = {규빈.prob}\")\nfor _ in range(5):\n    규빈.탑쌓기()\n    print(repr(규빈))\n    print(f\"2블럭 성공확률: {규빈.prob:.2f}\")\n    print(f\"2블럭 성공여부: {규빈.success}\")\n    print(\"--\")\n\n성공확률 = 0.9\n이름: 규빈\n목표높이: 5\n현재높이: 2\n진행횟수: 1\n완성상태: False\n2블럭 성공확률: 0.90\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 4\n진행횟수: 2\n완성상태: False\n2블럭 성공확률: 0.90\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 6\n진행횟수: 3\n완성상태: True\n2블럭 성공확률: 0.90\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 6\n진행횟수: 4\n완성상태: True\n2블럭 성공확률: 0.90\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 6\n진행횟수: 5\n완성상태: True\n2블럭 성공확률: 0.90\n2블럭 성공여부: True\n--\n\n\n#"
  },
  {
    "objectID": "posts/15wk-2.html#guebintraining-클래스-설계",
    "href": "posts/15wk-2.html#guebintraining-클래스-설계",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(3) GuebinTraining  클래스 설계",
    "text": "(3) GuebinTraining  클래스 설계\n배경설명: 규빈은 2개의 블록을 실패하지 않고 쌓는 연습을 하기로 했다.\nGuebin을 상속받아 아래와 같은 역할을 하는 GuebinTraining을 설계하라.\n# 예시1\n\n수련하는규빈 = GuebinTraining(name=\"규빈\",end_condition=5)\n수련하는규빈\n\n이름: 규빈\n목표높이: 5\n현재높이: 0\n진행횟수: 0\n완성상태: False\n\n\n\nprint(f\"성공확률 = {규빈.prob}\")\nfor _ in range(5):\n    수련하는규빈.탑쌓기()\n    수련하는규빈.수련하기()\n    print(repr(수련하는규빈))\n    print(f\"2블럭 성공확률: {수련하는규빈.prob:.2f}\")\n    print(f\"2블럭 성공여부: {수련하는규빈.success}\")\n    print(\"--\")\n\n성공확률 = 0.9\n이름: 규빈\n목표높이: 5\n현재높이: 2\n진행횟수: 1\n완성상태: False\n2블럭 성공확률: 0.55\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 4\n진행횟수: 2\n완성상태: False\n2블럭 성공확률: 0.60\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 6\n진행횟수: 3\n완성상태: True\n2블럭 성공확률: 0.65\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 6\n진행횟수: 4\n완성상태: True\n2블럭 성공확률: 0.70\n2블럭 성공여부: True\n--\n이름: 규빈\n목표높이: 5\n현재높이: 6\n진행횟수: 5\n완성상태: True\n2블럭 성공확률: 0.75\n2블럭 성공여부: True\n--\n\n\n#"
  },
  {
    "objectID": "posts/15wk-2.html#규빈-vs-다호",
    "href": "posts/15wk-2.html#규빈-vs-다호",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(4) 규빈 vs 다호",
    "text": "(4) 규빈 vs 다호\n아래와 같은 인스턴스를 고려하자.\n\n규빈 = Guebin(name=\"규빈\",end_condition=10)\n다호 = Base(name=\"다호\",end_condition=10) \n\n10층높이의 탑을 먼저 쌓는 게임을 진행할시 누가 더 유리한가?"
  },
  {
    "objectID": "posts/15wk-2.html#수련하는-규빈-vs-다호",
    "href": "posts/15wk-2.html#수련하는-규빈-vs-다호",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(5) 수련하는 규빈 vs 다호",
    "text": "(5) 수련하는 규빈 vs 다호\n아래와 같은 인스턴스를 고려하자.\n\n수련하는규빈 = GuebinTraining(name=\"규빈\",end_condition=10)\n다호 = Base(name=\"다호\",end_condition=10) \n\n10층높이의 탑을 먼저 쌓는 게임을 진행할시 누가 더 유리한가? (규빈은 수련시 2개의 블록을 성공할 확률이 5퍼센트씩 증가한다. )"
  },
  {
    "objectID": "posts/15wk-2.html#애교쟁이-최다호",
    "href": "posts/15wk-2.html#애교쟁이-최다호",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(6) 애교쟁이 최다호",
    "text": "(6) 애교쟁이 최다호\n배경설명: 최다호는 매턴 규빈에게 애교를 부리기로 했다. 애교의 성공률은 20%이며 효과는 아래와 같다.\n\n규빈이 2블럭 쌓기를 성공: 규빈은 2개의 블럭을 본인의 탑에 쌓지않고 다호의 탑에 쌓는다.\n규빈이 2블럭 쌓기를 실패: 아무일도 일어나지 않음.\n\n단, 다호가 애교를 부릴경우 다호의 탑은 쌓이지 않는다."
  },
  {
    "objectID": "posts/15wk-2.html#공격하는-규빈",
    "href": "posts/15wk-2.html#공격하는-규빈",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(7) 공격하는 규빈",
    "text": "(7) 공격하는 규빈"
  },
  {
    "objectID": "posts/15wk-2.html#울보-최다호",
    "href": "posts/15wk-2.html#울보-최다호",
    "title": "15wk-2: 기말고사대비 연습",
    "section": "(8) 울보 최다호",
    "text": "(8) 울보 최다호\n배경설명: 최다호는 규빈의 공격으로 공든탑이 무너지자 참을수가 없어져 결국 울음을 터뜨렸다. 울음의 효과는 아래와 같다.\n\n탑과 관련없이 무조건 다호의 승리\n\n울음은 다호의 탑이 무너질 경우 발생하며 발생확률은 50%이다."
  },
  {
    "objectID": "posts/09wk-2.html",
    "href": "posts/09wk-2.html",
    "title": "09wk-2: 중간고사",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport urllib.request\nimport requests\nimport PIL\nimport io\n\n\n1. 학번소개 – 40점\n\n\n20점, (2) 20점\n\n\n아래의 코드를 실행하여 MNIST 자료를 불러오라.\n\n# URL 설정\nurl = 'https://github.com/guebin/PP2023/raw/main/posts/02_DataScience/mnist.npz'\n\n# URL에서 파일 다운로드\nurllib.request.urlretrieve(url, './mnist.npz')\n\n# 데이터 로드\ndata = np.load('./mnist.npz')\nxtrain, ytrain, xtest, ytest = data['x_train']/255, data['y_train'], data['x_test']/255, data['y_test']\n\n# mnist.npz 삭제\n!rm mnist.npz\n\n(1) xtrain, xtest, ytrain, ytest 의 shape은 각각 아래와 같다.\n\nxtrain.shape, xtest.shape, ytrain.shape, ytest.shape\n\n((60000, 28, 28), (10000, 28, 28), (60000,), (10000,))\n\n\nxtrain, xtest를 합쳐서 shape이 (70000,28,28) 인 numpy array를 생성하고 이것을 X에 저장하라. 저장된 X에서 각 숫자의 평균이미지를 구하고 평균이미지를 좌우로 붙여 본인의 학번 마지막 5자리를 출력하라. (충남대 학생들은 충남대 학번으로 쓰셔도 괜찮습니다)\n(풀이)\n\nX = np.concatenate([xtrain,xtest],axis=0)\ny = np.concatenate([ytrain,ytest])\n\n\nlst = [\n    X[y == 4].mean(axis=0),\n    X[y == 3].mean(axis=0),\n    X[y == 0].mean(axis=0),\n    X[y == 5].mean(axis=0),\n    X[y == 2].mean(axis=0)\n]\nimg = np.concatenate(lst,axis=-1)\n\n\nplt.imshow(img,cmap=\"gray\")\n\n\n\n\n\n\n\n\n(2) (1)에서 구한 평균이미지와 가장 차이가 작은 이미지를 숫자별로 찾고, 이를 이어서 (1)처럼 본인의 학번 마지막 5개의 숫자를 출력하라. 이때 평균이미지와의 차이는 픽셀별로 차이를 제곱한뒤 평균을 내서 계산한다. (07wk-2 // 5.numpy활용 // C.MNIST data // (5)번 문항을 참고할 것)\n(풀이)\n\nlst = [\n    X[y == 4][((X[y == 4] - X[y == 4].mean(axis=0))**2).mean(axis=(1,2)).argmin()],\n    X[y == 3][((X[y == 3] - X[y == 3].mean(axis=0))**2).mean(axis=(1,2)).argmin()],\n    X[y == 0][((X[y == 0] - X[y == 0].mean(axis=0))**2).mean(axis=(1,2)).argmin()],\n    X[y == 5][((X[y == 5] - X[y == 5].mean(axis=0))**2).mean(axis=(1,2)).argmin()],\n    X[y == 2][((X[y == 2] - X[y == 2].mean(axis=0))**2).mean(axis=(1,2)).argmin()],\n]\nimg = np.concatenate(lst,axis=-1)\n\n\nplt.imshow(img,cmap=\"gray\")\n\n\n\n\n\n\n\n\n\n\n2. 아름다운 부산 – 40점\n\n(1)-(2) 모두 맞출 경우만 정답으로 인정\n\n아래의 코드를 실행하여 부산의 야경을 불러오라.\n\nurl = 'https://cdn.pixabay.com/photo/2016/10/17/07/53/busan-night-scene-1747130_1280.jpg'\nimg = np.array(PIL.Image.open(io.BytesIO(requests.get(url).content)))/255\nplt.imshow(img)\n\n\n\n\n\n\n\n\n\nimg.shape\n\n(854, 1280, 3)\n\n\n(1) 위의 이미지의 Red,Green,Blue 에 해당하는 array 를 변수 R, G, B 에 저장하라. 아래의 공식을 이용하여 새로운 numpy array Gray를 만들고 이를 출력하라.\n\\[Gray = 0.2989 \\times R + 0.5870 \\times G + 0.1140 \\times B\\]\n여기에서 R,G,B,Gray는 모두 shape이 (854,1280) 인 numpy array 이다.\n(풀이)\n\nR,G,B = img[:,:,0],img[:,:,1],img[:,:,2]\nGray = 0.2989*R + 0.5870*G + 0.1140*B \nplt.imshow(Gray,cmap=\"gray\")\n\n\n\n\n\n\n\n\n(2) R,G,B 에 대하여 아래의 슈도-알고리즘과 동등한 처리를 np.where을 이용하여 수행하라. 편의상 아래의 알고리즘에서 R,G,B는 변수 Ch로 생각한다.\nch_min = np.min(Ch[0:587, 948:1210])\nch_max = np.max(Ch[0:587, 948:1210]) \nfor i in range(854):\n    for j in range(1280):\n        if ch_min &lt; Ch[i,j] &lt; ch_max:\n            Ch[i,j] = Gray[i,j]\n        else: \n            Ch[i,j] = Ch[i,j]\n위의 알고리즘을 각각 R, G, B에 적용하였으면 변화된 R,G,B를 합쳐서 하나의 칼라이미지를 만들고 출력하라.\n(풀이)\n\ndef f(Ch):\n    ch_min = np.min(Ch[0:587, 948:1210])\n    ch_max = np.max(Ch[0:587, 948:1210]) \n    Ch = np.where((ch_min &lt; Ch) & (Ch &lt; ch_max), Gray, Ch)\n    return Ch\nsolution = np.stack(list(map(f,[R,G,B])),axis=-1) \nplt.imshow(solution)\n\n\n\n\n\n\n\n\n\n\n3. 공든탑쌓기 – 120점\n규빈과 다호가 블록을 사용하여 탑을 쌓는다. 규빈은 한 번에 2개의 블록을 사용하여 탑을 쌓지만, 실수로 탑을 무너뜨릴 확률이 50%이다. 한 번 무너진 탑은 다시 처음부터 쌓아야 한다. 다호는 한 번에 1개의 블록을 사용하여 신중하게 탑을 쌓는다. 다호는 천천히 탑을 쌓지만 실수로 탑을 무너뜨리지 않는다.\n\n(1)번은 0점, (2)-(3)을 모두 맞출경우 60점, (2)-(4)를 모두 맞출경우 120점\n\n(1) 규빈과 다호가 2층 높이의 탑을 먼저 쌓는 내기를 하였다고 하자. 탑을 쌓을수 있는 기회는 2회 준다. 이 내기는 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라. (둘이 동시에 탑을 쌓을경우 무승부로 판단한다.)\n(풀이)\n\ndef build_tower(max_time, end_condition):    \n    guebin = 0\n    daho = 0\n    for t in range(max_time): # max_time 동안 게임을 진행 \n        #--# 블록을 쌓음 \n        if np.random.rand() &lt; 0.5:  # 규빈이 탑 쌓다가 실수로 무너짐\n            guebin = 0 \n            daho = daho + 1 \n        else: # 규빈이 탑을 잘 쌓음 \n            guebin = guebin + 2  \n            daho = daho + 1 \n        #--# 승패를 체크\n        if (guebin &gt;= end_condition) and (daho &gt;= end_condition):\n            result = \"무승부 (둘이 동시에 성공)\"\n            break # 규빈,다호의 성공으로 게임 종료\n        elif (guebin &gt;= end_condition) and (daho &lt; end_condition):\n            result = \"규빈승\"\n            break # 규빈의 성공으로 게임 종료 \n        elif (guebin &lt; end_condition) and (daho &gt;= end_condition):\n            result = \"다호승\"\n            break # 다호의 성공으로 게임 종료 \n        else: \n            result = \"무승부 (둘다 쌓지 못함)\" # 둘다 max_time동안 탑을 쌓지 못함. \n    return result \n\n\nresults = [build_tower(max_time=2,end_condition=2) for i in range(1000)]\n{s:results.count(s) for s in set(results)}\n\n{'규빈승': 499, '무승부 (둘이 동시에 성공)': 266, '다호승': 235}\n\n\n규빈이 유리하다.\n(2) 규빈과 다호가 10층 높이의 탑을 먼저 쌓는 내기를 하였다고 하자. 탑을 쌓을수 있는 기회는 10회 준다. 이 내기는 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라. (둘이 동시에 탑을 쌓을경우 무승부로 판단한다.)\n(풀이)\n\nresults = [build_tower(max_time=10,end_condition=10) for i in range(1000)]\n{s:results.count(s) for s in set(results)}\n\n{'규빈승': 105, '무승부 (둘이 동시에 성공)': 18, '다호승': 877}\n\n\n다호가 유리하다.\n(3) 규빈은 (2)의 게임을 반복하다가 본인이 불리하다는 사실을 알고 분노했다. 흑화한 규빈은 매번 50%의 확률로 다호의 탑을 공격하기로 하였다. 공격 성공률은 60% 이며 공격이 성공시 다호의 탑은 모두 무너진다. (단, 공격시 규빈은 탑을 쌓을 수 없다) 규빈과 다호에게 탑을 쌓거나 상대방의 탑을 공격할 기회를 20회 준다고 가정하자. 이 내기는 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라. (둘이 동시에 탑을 쌓거나 둘 모두 탑을 쌓지 못할 경우 무승부로 판단한다.)\n(풀이)\n\ndef build_tower3(max_time, end_condition):\n    guebin = 0\n    daho = 0\n    for t in range(max_time): # max_time 동안 게임을 진행 \n        #--# 블록을 쌓음         \n        if np.random.rand() &lt; 0.5: # 규빈이 공격하기로 마음먹음\n            if np.random.rand() &lt; 0.6: # 공격성공 \n                daho = 0 \n            else: # 공격실패 \n                daho = daho + 1 \n        else: # 규빈이 공격안하고 탑 쌓기로 마음먹음 \n            if np.random.rand() &lt; 0.5: # 규빈이 탑 쌓다가 실수로 무너짐\n                guebin = 0 \n                daho = daho + 1 \n            else: # 규빈이 탑을 잘 쌓음 \n                guebin = guebin + 2  \n                daho = daho + 1 \n        #--# 승패를 체크\n        if (guebin &gt;= end_condition) and (daho &gt;= end_condition):\n            result = \"무승부 (둘이 동시에 성공)\"\n            break\n        elif (guebin &gt;= end_condition) and (daho &lt; end_condition):\n            result = \"규빈승\"\n            break\n        elif (guebin &lt; end_condition) and (daho &gt;= end_condition):\n            result = \"다호승\"\n            break\n        else: \n            result = \"무승부 (둘다 쌓지 못함)\"\n    return result \n\n\nresults = [build_tower3(max_time=20,end_condition=10) for i in range(10000)]\n{s:results.count(s) for s in set(results)}\n\n{'무승부 (둘다 쌓지 못함)': 7974, '무승부 (둘이 동시에 성공)': 13, '다호승': 1014, '규빈승': 999}\n\n\n규빈과 다호가 비슷하게 유리하다.\n(4) 규빈은 공격을 하는사이에 본인의 탑을 쌓지 못하게 되자 전략을 바꾸었다. 다호의 탑을 관찰하며, 다호의 탑이 5층 이상인 경우에만 공격하기로 하였다. 이 경우 규빈과 다호에게 탑을 쌓거나 상대방의 탑을 공격할 기회를 20회 준다고 가정하면 누가 유리한가? 시뮬레이션을 통하여 근거를 설명하라. (둘이 동시에 탑을 쌓거나 둘 모두 탑을 쌓지 못할 경우 무승부로 판단한다.)\n(풀이)\n\ndef build_tower4(max_time, end_condition):\n    guebin = 0\n    daho = 0\n    for t in range(max_time): # max_time 동안 게임을 진행 \n        #--# 블록을 쌓음           \n        if daho &gt;= 5: # 다호의 탑이 5층이상이 되어 규빈이 공격하기로 마음먹음\n            if np.random.rand() &lt; 0.6: # 공격성공 \n                daho = 0 \n            else: # 공격실패 \n                daho = daho + 1 \n        else: # 규빈이 공격안하고 탑 쌓기로 마음먹음 \n            if np.random.rand() &lt; 0.5: # 규빈이 탑 쌓다가 실수로 무너짐\n                guebin = 0 \n                daho = daho + 1 \n            else: # 규빈이 탑을 잘 쌓음 \n                guebin = guebin + 2  \n                daho = daho + 1 \n        #--# 승패를 체크\n        if (guebin &gt;= end_condition) and (daho &gt;= end_condition):\n            result = \"무승부 (둘이 동시에 성공)\"\n            break\n        elif (guebin &gt;= end_condition) and (daho &lt; end_condition):\n            result = \"규빈승\"\n            break\n        elif (guebin &lt; end_condition) and (daho &gt;= end_condition):\n            result = \"다호승\"\n            break\n        else: \n            result = \"무승부 (둘다 쌓지 못함)\"\n    return result \n\n\nresults = [build_tower4(max_time=20,end_condition=10) for i in range(10000)]\n{s:results.count(s) for s in set(results)}\n\n{'무승부 (둘다 쌓지 못함)': 7976, '규빈승': 1829, '다호승': 195}\n\n\n규빈이 유리하다."
  }
]