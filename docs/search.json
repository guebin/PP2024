[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬 프로그래밍 (2024)",
    "section": "",
    "text": "질문하는 방법\n\n이메일: guebin@jbnu.ac.kr\n직접방문: 자연과학대학 본관 205호\nZoom: 이메일로 미리 시간을 정할 것\n카카오톡: http://pf.kakao.com/_txeIFG/chat\n\n강의노트\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 27, 2024\n\n\n04wk-1: 퀴즈3\n\n\n최규빈 \n\n\n\n\nMar 22, 2024\n\n\n03wk-2: 리스트는 쓰레기인가?\n\n\n최규빈 \n\n\n\n\nMar 20, 2024\n\n\n03wk-1: 퀴즈2\n\n\n최규빈 \n\n\n\n\nMar 15, 2024\n\n\n02wk-2: 파이썬은 좋은 계산기다 (2)\n\n\n최규빈 \n\n\n\n\nMar 13, 2024\n\n\n02wk-1: 퀴즈1\n\n\n최규빈 \n\n\n\n\nMar 8, 2024\n\n\n01wk-2: 파이썬은 좋은 계산기다 (1)\n\n\n최규빈 \n\n\n\n\nMar 6, 2024\n\n\n01wk-1: 강의소개\n\n\n최규빈 \n\n\n\n\nDec 1, 2023\n\n\nA0: Quiz 1 (예상문제)\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/02wk-1.html",
    "href": "posts/02wk-1.html",
    "title": "02wk-1: 퀴즈1",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n\n\n\n\nWarning\n\n\n\n\n모든 문항은 부분점수 없음.\n일부문항은 부분문제를 모두 맞출경우만 정답으로 인정함.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp등)은 채점하지 않음. 즉 0점 처리함. 제출방법 모르면 물어볼것!\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n\n\n\n\n문제 1. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n(1) 아래와 같이 50개의 숫자를 나열한 배열 \\({\\bf x}=[x_1,x_2,\\dots,x_n]\\)을 상상하자.\n\nx = np.array([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n              0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n              0, 0, 0, 0, 1, 0])\nx\n\narray([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0])\n\n\n위와 같은 \\(x_i\\)에 대하여 \\(0&lt;p&lt;1\\)에서의 아래와 같은 함수 \\(l(p)\\)를 정의하라.\n\\[l(p)=\\sum_{i=1}^nx_i \\log p +\\left(n-\\sum_{i=1}^{n}x_i \\right)\\log(1-p)\\]\n파이썬을 이용하여 아래를 근사계산하라.\n\\[\\lim_{h \\to 0}\\frac{l(0.32+h)-l(0.32)}{h}\\]\n(풀이)\n\nl = lambda p: 16*np.log(p) + (50-16)*np.log(1-p)\nh =0.000000001\n(l(0.32+h)-l(0.32))/h\n\n3.5527136788005005e-06\n\n\n(2) \\(0&lt;p&lt;1\\)의 범위에서 \\(l(p)\\)를 최대로 만드는 \\(p\\)의 값을 구하라. 즉 \\(\\underset{p}{\\operatorname{argmax}} l(p)\\)를 구하라.\n(풀이)\n\np = np.linspace(1/100,1,100)[:-1]\np\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n\np[np.argmax(l(p))]\n\n0.32\n\n\n\n\n문제 2. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n길이가 100인 벡터 \\({\\bf x} = [x_0, x_1, \\dots, x_{99}]\\)를 아래와 같이 선언하라.\n\nnp.random.seed(43052)\nx = np.random.randn(100)\n\n(1) \\(x_0\\)의 값은 얼마인가?\n(풀이)\n\nx[0]\n\n0.38342048800857303\n\n\n(2) \\(x_{99}\\)의 값은 얼마인가?\n(풀이)\n\nx[99]\n\n1.1870144262405193\n\n\n(3) \\(\\sum_{i=0}^{99} x_i\\)의 값은 얼마인가?\n(풀이)\n\nnp.sum(x)\n\n-8.136079223187856\n\n\n(4) \\(\\sum_{i=22}^{55} x_i\\)의 값은 얼마인가?\n(풀이)\n\nnp.sum(x[22:56])\n\n-1.1780743585314586\n\n\n\n\n문제 3. – 10점\n길이가 100인 벡터 \\({\\bf x} = [x_0, x_1, \\dots, x_{99}]\\)를 아래와 같이 선언하라.\n\nnp.random.seed(43052)\nx = np.random.randn(100)\n\n이 벡터에 대하여\n\n\\(a=\\sum_{i=0}^{24}x_i\\)\n\\(b=\\sum_{i=25}^{49}x_i\\)\n\\(c=\\sum_{i=50}^{74}x_i\\)\n\\(d=\\sum_{i=75}^{99}x_i\\)\n\n의 값을 각각 조사하라. a,b,c,d 중 가장 큰 값은 무엇인가?\n(풀이)\n\na = np.sum(x[:25])\nb = np.sum(x[25:50])\nc = np.sum(x[50:75])\nd = np.sum(x[75:])\n\n\na,b,c,d\n\n(-3.006728261055644,\n 0.3368136525904264,\n -4.526860531092521,\n -0.9393040836301192)\n\n\n\n\n문제 4. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n(1) lambda를 이용하여 \\(f(x)=\\sin(x)\\)에 대응하는 함수를 선언하라.\n(풀이)\n\nlambda x: np.sin(x)\n\n&lt;function __main__.&lt;lambda&gt;(x)&gt;\n\n\n(2) def를 이용하여 \\(g(x)=\\cos(2x)\\)에 대응하는 함수를 선언하라.\n(풀이)\n\ndef g(x):\n    return np.cos(2*x)\n\n(3) 임의의 벡터 \\({\\bf x}=[x_0,\\dots,x_{n-1}]\\) 이 왔을때, \\({\\bf x}\\)의 최대값을 \\(x_{max}\\) 라고 하고 최소값을 \\(x_{min}\\)이라고 하자. 예를들어\n\\[{\\bf x} = [1,2,3,0]\\]\n의 경우 \\(x_{max}=3\\) 이고 \\(x_{min}=0\\) 이다. 벡터 \\({\\bf x}\\)를 입력으로 하고 출력으로 \\(x_{max}-x_{min}\\)의 계산값을 리턴하는 함수를 구현하라.\n(풀이)\n\nf = lambda x: np.max(x) - np.min(x)\n\n\nf([1,2,3,0])\n\n3\n\n\n\nf([-1,2,4,10])\n\n11\n\n\n\n\n문제 5. – 10점\n\n모두 맞출 경우만 정답으로 인정\n\n아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(4305)\n\n(1) 생성된 \\(x_i\\) 중 0.65와 가장 가까운 값을 출력하라.\n(풀이)\n\nx[np.argmin(np.abs(x-0.65))]\n\n0.6499741766686671\n\n\n(2) 생성된 값의 평균을 구하라.\nhint \\(\\frac{1}{4305}\\sum_{i=1}^{4305}x_i\\)를 계산하면 된다. 아니면 np.mean() 함수를 이용해도된다.\n(풀이)\n\nnp.sum(x)/4305, np.mean(x)\n\n(0.4965974918744432, 0.4965974918744432)\n\n\n(3) (2)에서 계산된 평균값과 가장 가까운 \\(x_i\\)값을 출력하라.\n(풀이)\n\nx[np.argmin(np.abs(x-np.mean(x)))]\n\n0.497315535600802\n\n\n\n\n문제 6. – 20점\n\\(\\frac{\\pi}{2}\\leq x \\leq \\pi\\) 에서 \\(f(x)=\\sin(\\frac{3}{2}x)\\) 와 \\(g(x)=\\cos(2x)\\sin(5x)\\) 의 교점의 좌표를 구하라.\n\n근사값만구해도 정답으로 인정함\n\n(풀이)\n\nx = np.linspace(np.pi/2, np.pi,1000000)\nf = lambda x: np.sin(3/2*x) \ng = lambda x: np.cos(2*x)*np.sin(5*x)\n\n\nplt.plot(x,f(x))\nplt.plot(x,g(x))\n\n\n\n\n\n\n\n\n\nxx = x[np.argmin(np.abs(f(x)-g(x)))]\nxx\n\n1.9462123119258816\n\n\n\nf(xx), g(xx)\n\n(0.2204484288597834, 0.2204457729878962)\n\n\n\n\n문제 7. – 30점\n(1) 무한급수 \\(\\sum_{n=1}^{\\infty}(\\frac{1}{2})^n\\) 의 수렴 및 발산을 파이썬을 이용하여 판정하라. – 10점\n힌트\n\\(n=10, 20, 30, ..., 100\\) 등에서 \\(S_n=\\sum_{k=1}^{n}a_k\\)의 값을 조사해보고 수렴성을 판단하라.\n(풀이)\n\nn = np.linspace(1,100,100)\nan = (1/2)**n\nSn = np.cumsum(an)\n\n\nSn\n\narray([0.5       , 0.75      , 0.875     , 0.9375    , 0.96875   ,\n       0.984375  , 0.9921875 , 0.99609375, 0.99804688, 0.99902344,\n       0.99951172, 0.99975586, 0.99987793, 0.99993896, 0.99996948,\n       0.99998474, 0.99999237, 0.99999619, 0.99999809, 0.99999905,\n       0.99999952, 0.99999976, 0.99999988, 0.99999994, 0.99999997,\n       0.99999999, 0.99999999, 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ])\n\n\n수렴한다\n(2) 무한급수 \\(\\sum_{n=1}^{\\infty}\\frac{1}{n}\\) 의 수렴 및 발산을 파이썬을 이용하여 판정하라. – 20점\n힌트 – (1)번과 동일한 테크닉\n(풀이)\n\nn = np.linspace(1,100000000,100000000)\nan = 1/n\nSn = np.cumsum(an)\n\n\nSn\n\narray([ 1.        ,  1.5       ,  1.83333333, ..., 18.99789639,\n       18.9978964 , 18.99789641])\n\n\n발산한다\n\n\n성적분포\n\nimport pandas as pd\n\n\npd.read_csv(\"2wk.csv\")['2wk'].sort_values().to_numpy()\n\narray([  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,  10,  10,  10,  20,  20,  20,  20,  20,  30,  30,\n        30,  30,  40,  40,  40,  40,  40,  50,  50,  50,  50,  50,  50,\n        50,  60,  60,  60,  70,  70,  80,  80,  80,  90,  90, 100, 100,\n       100, 100, 100, 100])"
  },
  {
    "objectID": "posts/03wk-2.html#a.-벡터화연산브로드캐스팅-불가능",
    "href": "posts/03wk-2.html#a.-벡터화연산브로드캐스팅-불가능",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 벡터화연산(브로드캐스팅) 불가능",
    "text": "A. 벡터화연산(브로드캐스팅) 불가능\n- 벡터화연산 불가능 (최악의 단점)\n\nlst = [1,2,3]\nlst + 1\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n\narr = np.array([1,2,3])\narr + 1\n\narray([2, 3, 4])"
  },
  {
    "objectID": "posts/03wk-2.html#b.-bool을-이용한-인덱싱이-불가능",
    "href": "posts/03wk-2.html#b.-bool을-이용한-인덱싱이-불가능",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. bool을 이용한 인덱싱이 불가능",
    "text": "B. bool을 이용한 인덱싱이 불가능\n- True, False 가 포함된 array를 이용한 인덱싱이 불가능하다.\n- 넘파이에서 bool을 이용한 인덱싱\n\narr = np.array([1,2,3,4,5])\narr[arr&gt;3]\n\narray([4, 5])\n\n\n- 리스트는 불가능\n\nlst = [1,2,3,4,5]\nlst[lst&gt;3]\n\nTypeError: '&gt;' not supported between instances of 'list' and 'int'\n\n\n\nlst&gt;3\n\nTypeError: '&gt;' not supported between instances of 'list' and 'int'"
  },
  {
    "objectID": "posts/03wk-2.html#c.-넘파이-특화-메소드-사용불가능",
    "href": "posts/03wk-2.html#c.-넘파이-특화-메소드-사용불가능",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 넘파이 특화 메소드 사용불가능",
    "text": "C. 넘파이 특화 메소드 사용불가능\n- 넘파이 특화 메소드\n\narr = np.array([5,4,3,2,1])\narr\n\narray([5, 4, 3, 2, 1])\n\n\n\narr.min(), arr.max(), arr.mean(), arr.argmin(), arr.argmax()\n\n(1, 5, 3.0, 4, 0)\n\n\n\narr.sort()\narr\n\narray([1, 2, 3, 4, 5])\n\n\n- 리스트는?\n\nlst = [5,4,3,2,1]\nlst\n\n[5, 4, 3, 2, 1]\n\n\n\nlst.min(), lst.max(), lst.mean(), lst.argmin(), lst.argmax()\n\nAttributeError: 'list' object has no attribute 'min'\n\n\n\nlst.sort()\nlst\n\n[1, 2, 3, 4, 5]\n\n\n# 메소드란? – 자료형에 종속된 특수기술\n\n# 넘파이 특수기술\narr = np.array([1,2,3])\narr.max() # max(arr)로 해석\n\n3\n\n\n\n# ?.max() 이런건 넘파이 특수기술 이니까 ?자리에 리스트일 경우는 실행안됨\nlst = [1,2,3]\nlst.max() \n\nAttributeError: 'list' object has no attribute 'max'\n\n\n\n# 리스트의 특수기술 \nlst = [1,2,3]\nlst.append(4) # append(lst,4) 로 해석\nlst\n\n[1, 2, 3, 4]\n\n\n\n# 문자열 특수기술\ns = 'asdf'\ns.capitalize() # capitalize(s) 로 해석\n\n'Asdf'\n\n\n\n# 문자열 특수기술\ns = '-'\nlst = ['x','y','z']\ns.join(lst) # join(s,lst) 로 해석\n\n'x-y-z'\n\n\n\njoin(s,lst)의 뜻: lst의 각 원소를 모두 “이어서” 하나의 문자열로 만들어라. 단, 원소간의 구분은 s에 저장된 문자열로 하라.\n\n\n# 문자열 특수기술 응용\n''.join(['x','y','z'])\n\n'xyz'\n\n\n\n# 문자열 특수기능 \ns = \"제 이름은 {} 입니다.\" \nname = \"최규빈\"\ns.format(name) # format(s,name)\n\n'제 이름은 최규빈 입니다.'\n\n\n\nformat(s,name)의 뜻: s라는 문자열의 포맷에 {} 자리에 name을 끼워넣어라."
  },
  {
    "objectID": "posts/03wk-2.html#d.-파이썬에서-쓰레기-같은-자료형은-없다.",
    "href": "posts/03wk-2.html#d.-파이썬에서-쓰레기-같은-자료형은-없다.",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "D. 파이썬에서 쓰레기 같은 자료형은 없다.",
    "text": "D. 파이썬에서 쓰레기 같은 자료형은 없다.\n- 파이썬에는 각 자료형마다 사용할 수 있는 고유기술(=메소드)이나 문법이 있음.\n- 내가 생각할 때 리스트는 필요없는 자료형이야 = 난 리스트만 가지고 있는 어떠한 고유특징을 활용하지 못해.\n- 파이썬을 잘 하려면 자료형에 따른 고유 특징을 이해하고 활용할 줄 알아야 한다.\n\n기본자료형: str, list, tuple, dict, set – 이러한 자료형을 이해하고 기능을 활용해야함\n모듈: 넘파이배열, 판다스"
  },
  {
    "objectID": "posts/03wk-2.html#a.-문제파악",
    "href": "posts/03wk-2.html#a.-문제파악",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 문제파악",
    "text": "A. 문제파악\n\n- 기존의 문제들과 다르게 numpy를 이용하여 풀기는 어려울 것 같다. 뭔가 기존문제들과 결이 다름\n- 그런데 코딩으로 해결가능할 것 같긴 함"
  },
  {
    "objectID": "posts/03wk-2.html#b.-슈도알고리즘",
    "href": "posts/03wk-2.html#b.-슈도알고리즘",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. 슈도알고리즘",
    "text": "B. 슈도알고리즘\n1. 편의상 \\([x,x,y,y,z]\\)를 \\([x_1,x_2,y_1,y_2,z]\\)와 같이 생각하고 나열한다. (5! = 120 개만큼 경우가 나열되겠지)\n2. 중복을 제거한다. 즉 아래는 모두 같은 경우로 생각한다.\n\n\\([x_1,x_2,y_1,y_2,z]\\)\n\\([x_1,x_2,y_2,y_1,z]\\)\n\\([x_2,x_1,y_1,y_2,z]\\)\n\\([x_2,x_1,y_2,y_1,z]\\)"
  },
  {
    "objectID": "posts/03wk-2.html#c.-예비학습",
    "href": "posts/03wk-2.html#c.-예비학습",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 예비학습",
    "text": "C. 예비학습\n# 개념1 – 집합이라는 자료형이 있음.\n\na = {1,2,3}\ntype(a)\n\nset\n\n\n그런데 집합은 중복된 원소를 포함하지 않았음 (중학교때 배운듯)\n\na = {1,2,3,3,3}\na\n\n{1, 2, 3}\n\n\n#\n# 개념2 – 자료형변환을 이용하여 중복된 원소를 제거\n아래와 같은 자료형이 있다고 하자.\n\nlst = [1,2,3,3,3] \nlst\n\n[1, 2, 3, 3, 3]\n\n\n중복된 것을 제외하고 싶다면?\n\nlist(set(lst)) # 자료형변환\n\n[1, 2, 3]\n\n\n#\n# 개념3 – 고유의 원소 숫자 세기\n\nlst = [1,2,3,3,3,4,4,5,5,6] \nlst\n\n[1, 2, 3, 3, 3, 4, 4, 5, 5, 6]\n\n\n\nlen(set(lst))\n\n6\n\n\n#\n# 개념4 – for문\n아래를 출력하고 싶다고 하자.\n이효리는 핑클의 멤버이다. \n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다. \n이진은 핑클의 멤버이다. \n(풀이1) – 단순한 풀이\n\nprint(\"이효리는 핑클의 멤버이다.\")\nprint(\"옥주현은 핑클의 멤버이다.\")\nprint(\"성유리는 핑클의 멤버이다.\")\nprint(\"이진은 핑클의 멤버이다.\")\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이2) – 문자열 특수기능을 이용해볼까?\n“{} 핑클의 멤버이다.” 이 공통포맷이므로, 아래와 같이 수행할 수 있겠다.\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\ni = 0\nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\ni = 1 \nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\ni = 2 \nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\ni = 3 \nprint(\"{} 핑클의 멤버이다.\".format(lst[i]))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이3) - for와 문자열 특수기능을 이용해볼까?\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in [0,1,2,3]:\n    print(\"{} 핑클의 멤버이다.\".format(lst[i]))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이4) - for와 문자열 특수기능을 이용해볼까? (2)\n[0,1,2,3]은 대충 range(4)와 비슷한 것이므로 아래와 같이 수행할 수도 있겠음.\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in range(4):\n    print(\"{} 핑클의 멤버이다.\".format(lst[i]))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n(풀이5) - for와 문자열 특수기능을 이용해볼까? (3)\n아래의 코드는 \\(i\\) 자리에 [0,1,2,3]의 원소가 번갈아 대입되며 ??????가 수행되었음.\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in [0,1,2,3]:\n    ??????\n아래의 코드도 \\(i\\) 자리에 range(4)의 원소가 번갈아 대입되며 ??????가 수행되었다고 해석가능.\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in range(4):\n    ??????\n아래의 코드는 어떻게 실행될까??\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor i in lst:\n    ??????\n\n# R과 다른 방식으로 동작하는 for문 \nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor l in lst:\n    print(\"{} 핑클의 멤버이다.\".format(l))\n\n이효리는 핑클의 멤버이다.\n옥주현은 핑클의 멤버이다.\n성유리는 핑클의 멤버이다.\n이진은 핑클의 멤버이다.\n\n\n#\n# 개념5 – for문을 이용하여 리스트의 원소 추가하기\n\nlst2 = [] # lst2 = list() 와 같은결과임\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\nfor l in lst: \n    lst2.append(\"{} 핑클의 멤버이다.\".format(l))\n\n\nlst2\n\n['이효리는 핑클의 멤버이다.', '옥주현은 핑클의 멤버이다.', '성유리는 핑클의 멤버이다.', '이진은 핑클의 멤버이다.']\n\n\n그런데 이걸 아래와 같이 해결할 수도 있다.\n\nlst = [\"이효리는\",\"옥주현은\",\"성유리는\",\"이진은\"]\n[\"{} 핑클의 멤버이다.\".format(l) for l in lst] # 리스트컴프리헨션 \n\n['이효리는 핑클의 멤버이다.', '옥주현은 핑클의 멤버이다.', '성유리는 핑클의 멤버이다.', '이진은 핑클의 멤버이다.']\n\n\n#\n# 개념6 – 리스트컴프리헨션\n집합을 표현하는 방법에는 원소나열법과 조건제시법이 있다.\n\n원소나열법: \\(\\{2^0,2^1,2^2,2^3\\}\\)\n조건제시법: \\(\\{2^i: \\text{ for } i=0,1,2,3\\}\\)\n\n이중에서 조건제시법은 아래와 같이 표현할 수 있음.\n\n\\(\\{2^i: \\text{ for } i \\in \\{0,1,2,3\\}\\}\\)\n\n여기에서 \\(\\in\\) 은 in 으로 읽으므로, 위의 표기법을 연상하여 파이썬 코드로 바꿔보면\n[2^i: for i in [0,1,2,3]]\n와 같은 방식으로 리스트의 원소를 표현할 수 있을 것 같다. 위의 코드는 실행되지 않지만 아래의 코드는 실행가능하다.\n\n[2**i for i in [0,1,2,3]]\n\n[1, 2, 4, 8]\n\n\n\n[2**i for i in range(4)]\n\n[1, 2, 4, 8]\n\n\n이를 응용하면\n\n[\"asdf{}\".format(2**i) for i in range(4)]\n\n['asdf1', 'asdf2', 'asdf4', 'asdf8']\n\n\n이것을 다시 응용하면\n\nlst = [\"이효리는\", \"성유리는\", \"옥주현은\", \"이진은\"]\n[\"{} 핑클의 멤버이다.\".format(l) for l in lst]\n\n['이효리는 핑클의 멤버이다.', '성유리는 핑클의 멤버이다.', '옥주현은 핑클의 멤버이다.', '이진은 핑클의 멤버이다.']\n\n\n#\n# 개념7 – 스트링의 인덱싱 (파이썬에서는 스트링을 array로 취급)\n\ns = 'asdf'\ns\n\n'asdf'\n\n\n\ns[0]\n\n'a'\n\n\n\ns[-1]\n\n'f'\n\n\n\ns[:2]\n\n'as'\n\n\n#\n# 개념8 – 스트링과 리스트의 변환\n\ns = 'asdf' \ns\n\n'asdf'\n\n\n\nlst = list(s)\nlst\n\n['a', 's', 'd', 'f']\n\n\n\n''.join(lst)\n\n'asdf'\n\n\n# 개념9 – 튜플자료형\n\nlst = [1,2,3]\nlst\n\n[1, 2, 3]\n\n\n\ntpl = (1,2,3)\ntpl\n\n(1, 2, 3)\n\n\n튜플은 (의미가 명확할때) 괄호를 생략할 수 있음\n\ntpl = 1,2,3\ntpl\n\n(1, 2, 3)\n\n\n튜플은 리스트와 매우 비슷함.\n\n[1,2,3] + [4,5] \n\n[1, 2, 3, 4, 5]\n\n\n\n(1,2,3) + (4,5)\n\n(1, 2, 3, 4, 5)\n\n\n아래도 가능\n\n''.join(['a','b','c'])\n\n'abc'\n\n\n\n''.join(('a','b','c'))\n\n'abc'\n\n\n#\n# 개념10 – for를 수행하는 다양한 테크닉\n우리가 알고 있는 for: 리스트 비슷한 것을 만든 뒤, 그 리스트의 원소를 하나씩 뽑아가면서 어떠한 반복구문 “??????” 수행하는 것.\n\nimport itertools\n\n\nfor i in itertools.permutations(['a','b','c']):\n    print(i)\n\n('a', 'b', 'c')\n('a', 'c', 'b')\n('b', 'a', 'c')\n('b', 'c', 'a')\n('c', 'a', 'b')\n('c', 'b', 'a')\n\n\n\nfor i in itertools.product(['x','y'],['a','b','c']):\n    print(i)\n\n('x', 'a')\n('x', 'b')\n('x', 'c')\n('y', 'a')\n('y', 'b')\n('y', 'c')\n\n\n#"
  },
  {
    "objectID": "posts/03wk-2.html#d.-풀이",
    "href": "posts/03wk-2.html#d.-풀이",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "D. 풀이",
    "text": "D. 풀이\n아래의 문제를 풀어보자..\n\n(풀이)\n\nlen(set([''.join(i) for i in itertools.permutations(['x','x','y','y','z'])]))\n\n30"
  },
  {
    "objectID": "posts/03wk-2.html#a.-문제이해",
    "href": "posts/03wk-2.html#a.-문제이해",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 문제이해",
    "text": "A. 문제이해"
  },
  {
    "objectID": "posts/03wk-2.html#b.-슈도알고리즘-1",
    "href": "posts/03wk-2.html#b.-슈도알고리즘-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. 슈도알고리즘",
    "text": "B. 슈도알고리즘\n1. 아래의 경우를 모두 나열한다.\na,b,c,d = 1,1,1,1 \na,b,c,d = 1,1,1,2 \n....\na,b,c,d = 6,6,6,6\n2. 조건 \\(a \\leq c \\leq d\\) 와 \\(b \\leq c \\leq d\\) 를 동시에 만족하는 경우를 센다."
  },
  {
    "objectID": "posts/03wk-2.html#c.-예비학습-1",
    "href": "posts/03wk-2.html#c.-예비학습-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 예비학습",
    "text": "C. 예비학습\n# 개념1 – for문과 튜플\n\nlst = [['최규빈',43052,'M'],['아이유',54321,'F'],['하니',11223,'F']]\nlst[0]\n\n['최규빈', 43052, 'M']\n\n\n아래의 코드가 가능하다.\n\nfor [name,student_id,sex] in lst:\n    print([name,student_id,sex])\n# [name,student_id,sex] = ['최규빈', 43052, 'M']\n# print([name,student_id,sex])\n# [name,student_id,sex] = ['아이유', 54321, 'F']\n# print([name,student_id,sex])\n# [name,student_id,sex] = ['하니', 11223, 'F']\n# print([name,student_id,sex])\n\n['최규빈', 43052, 'M']\n['아이유', 54321, 'F']\n['하니', 11223, 'F']\n\n\n리스트를 튜플로 바꾼다면?\n\nfor (name,student_id,sex) in lst:\n    print((name,student_id,sex))\n# (name,student_id,sex) = ['최규빈', 43052, 'M']\n# print((name,student_id,sex))\n# (name,student_id,sex) = ['아이유', 54321, 'F']\n# print((name,student_id,sex))\n# (name,student_id,sex) = ['하니', 11223, 'F']\n# print((name,student_id,sex))\n\n('최규빈', 43052, 'M')\n('아이유', 54321, 'F')\n('하니', 11223, 'F')\n\n\nfor (name,student_id,sex) in lst: 대신에 for name,student_id,sex in lst: 도 가능\n\nfor name,student_id,sex in lst:\n    print((name,student_id,sex))\n# name,student_id,sex = ['최규빈', 43052, 'M']\n# print((name,student_id,sex))\n# name,student_id,sex = ['아이유', 54321, 'F']\n# print((name,student_id,sex))\n# name,student_id,sex = ['하니', 11223, 'F']\n# print((name,student_id,sex))\n\n('최규빈', 43052, 'M')\n('아이유', 54321, 'F')\n('하니', 11223, 'F')\n\n\n아래와 같이 컴프리헨션으로 만들 수도 있음.\n\n[[name,student_id,sex] for name,student_id,sex in lst]\n\n[['최규빈', 43052, 'M'], ['아이유', 54321, 'F'], ['하니', 11223, 'F']]\n\n\n\n[(name,student_id,sex) for name,student_id,sex in lst]\n\n[('최규빈', 43052, 'M'), ('아이유', 54321, 'F'), ('하니', 11223, 'F')]\n\n\n아래는 불가능\n\n[name,student_id,sex for name,student_id,sex in lst]\n\nSyntaxError: did you forget parentheses around the comprehension target? (905514563.py, line 1)\n\n\n하지만 괄호를 명확하게 쓰기만 하면 만들어짐\n\n[(name,sex) for name,student_id,sex in lst]\n\n[('최규빈', 'M'), ('아이유', 'F'), ('하니', 'F')]\n\n\n\n[(sex,name) for name,student_id,sex in lst]\n\n[('M', '최규빈'), ('F', '아이유'), ('F', '하니')]\n\n\n\n[name for name,student_id,sex in lst]\n\n['최규빈', '아이유', '하니']\n\n\n언더스코어(_)를 사용할 수도 있음.\n\n[name for name,_,_ in lst]\n\n['최규빈', '아이유', '하니']\n\n\n언더스코어(_)를 사용시 lst[0], lst[1] 등의 원소숫자와 일치하도록 사용해야함\n\n[name for name,_ in lst] # 이건 또 실행불가능..\n\nValueError: too many values to unpack (expected 2)\n\n\n\n[name for name, *args in lst] # 이건 실행가능\n\n['최규빈', '아이유', '하니']\n\n\n# 개념2 – 조건문\n아래의 리스트 원소 \\(l\\) 중에서 조건 \\(1 &lt; l \\leq 5\\)를 만족하는 원소는 모두 몇개인가?\n\nlst = [1,2,3,4,5,6,7,8,9] \nlst\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n(풀이)\n\nsum([1&lt;l and l&lt;=5 for l in lst])\n\n4\n\n\n\nsum([1&lt;l&lt;=5 for l in lst])\n\n4"
  },
  {
    "objectID": "posts/03wk-2.html#d.-풀이-1",
    "href": "posts/03wk-2.html#d.-풀이-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "D. 풀이",
    "text": "D. 풀이\n\n(풀이)\n\nlst = [1,2,3,4,5,6]\nsum([a&lt;=c&lt;=d and b&lt;=c&lt;=d for a,b,c,d in itertools.product(lst,lst,lst,lst)])\n\n196"
  },
  {
    "objectID": "posts/03wk-2.html#a.-문제파악-1",
    "href": "posts/03wk-2.html#a.-문제파악-1",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "A. 문제파악",
    "text": "A. 문제파악"
  },
  {
    "objectID": "posts/03wk-2.html#b.-예비학습",
    "href": "posts/03wk-2.html#b.-예비학습",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "B. 예비학습",
    "text": "B. 예비학습\n- 예제: 제곱수중에서 12로 나누어서 떨어지는 수만 원소르 가지는 리스트를 만들고 싶다.\n\n제곱수: 1,4,9,16,25,36,…\n12로 나누어서 떨어지는 수: 36\n\n(복습1)\n\n12 % 4 # % 는 나머지를 계산하는 연산자, 12를 4로 나누었더니 나머지가 0\n\n0\n\n\n\n12 % 5 # 12 = 5*2 +2 \n\n2\n\n\n(복습2)\n\na = 3 # a에 2를 대입하라...\n\n\na == 2 # a에 들어있는 값이 2이인지 테스트하라..\n\nFalse\n\n\n\na == 3\n\nTrue\n\n\n(풀이1) – 비어있는 리스트를 만들고, for + if 를 사용\n\nlst = []\nfor i in range(1,101):\n    if i**2 % 12 == 0: # i^2을 12로 나누어서 나누어 떨어진다면\n        lst.append(i**2)\n\n\nlst\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]\n\n\n(풀이2) - if문이 포함된 리스트 컴프리헨션\n\n[i**2 for i in range(1,101) if i**2 % 12 ==0] \n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]"
  },
  {
    "objectID": "posts/03wk-2.html#c.-풀이",
    "href": "posts/03wk-2.html#c.-풀이",
    "title": "03wk-2: 리스트는 쓰레기인가?",
    "section": "C. 풀이",
    "text": "C. 풀이\n\n(풀이)\n\nx = list(range(1,16))\nf = lambda x: np.sin(np.pi/4*x)\nsum([xi for xi in x if f(2+xi)*f(2-xi)&lt;1/4])\n\n32"
  },
  {
    "objectID": "posts/04wk-1.html",
    "href": "posts/04wk-1.html",
    "title": "04wk-1: 퀴즈3",
    "section": "",
    "text": "#{{&lt;video https://youtu.be/playlist?list=PLQqh36zP38-wXM85NABRDBPV7YNx7qdmb&si=DRfxWu7FSbPGPGvP &gt;}}\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\n1."
  },
  {
    "objectID": "posts/03wk-1.html",
    "href": "posts/03wk-1.html",
    "title": "03wk-1: 퀴즈2",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp, .py 등)은 채점하지 않음. 즉 0점 처리함.\n\n\n\n\n문제 1. – 10점\n\\(f(x)=x^3\\) 위의 임의의 점을 입력하면 접선을 리턴하는 함수를 구현하라. 이러한 함수를 이용하여 아래와 같은 그래프를 그려라. (범례는 표현하지 않아도 감점없음)\n\n#\n\n\n\n\n\n\n\n\n\n\\(x\\)의 범위는 \\((-5,5)\\) 이다.\n두 그래프는 \\(x=3\\) 에서 접한다.\n\n(풀이)\n\ndef make_func(x0):\n    f = lambda x: x**3\n    def func(x):\n        h = 0.0001\n        a = (f(x0+h)-f(x0))/h \n        return a*(x-x0) + f(x0)\n    return func\nx = np.linspace(-5,5,101)\ntan_line = make_func(3)\nplt.plot(x,x**3,'--')\nplt.plot(x,tan_line(x),'--')\n\n\n\n\n\n\n\n\n\n\n문제 2. – 10점1\n함수 \\(f(x)=(x+1)(x^2+3)\\)에 대하여 \\(f'(1)\\)의 값을 구하라.\n(풀이)\n\nf = lambda x: (x+1)*(x**2+3)\nh = 0.000001\n(f(1+h)-f(1))/h\n\n8.000004001473826\n\n\n\n1 2024년 수능 17번2 2024년 수능 4번 응용\n문제 3. – 10점2\n\\(0 \\leq x \\leq 4\\)의 범위에서 함수\n\\[f(x) =\\begin{cases} 3x-1 \\quad (x&lt;2) \\\\ x^2+1 \\quad (x\\geq 2) \\end{cases}\\]\n의 그래프를 그려라.\n(풀이)\n\nf = lambda x: 3*x-1 if x&lt;2 else x**2+1\nx = np.linspace(0,4,101)\nplt.plot(x,list(map(f,x)))\n\n\n\n\n\n\n\n\n\n\n문제 4. – 10점3\n\\(\\frac{3}{2}\\pi &lt; \\theta &lt; 2\\pi\\) 인 \\(\\theta\\) 에 대하여 \\(\\cos\\theta = \\frac{\\sqrt{6}}{3}\\) 일 때 \\(\\tan(\\theta)\\)의 값을 구하라.\n(풀이)\n\ntheta = np.linspace(3/2*np.pi,2*np.pi,100)\nnp.argmin(np.abs(np.cos(theta) - np.sqrt(6)/3))\n\n60\n\n\n\nnp.tan(theta[60])\n\n-0.7120967763793676\n\n\n\n3 2024년 9평 3번4 2024년 9평 25번\n문제 5. – 10점4\n함수 \\(f(x)=x+\\ln x\\)에 대하여 \\(\\int_1^{e} (1+\\frac{1}{x})f(x)dx\\)의 값은?\n(풀이)\n\nf = lambda x: x+np.log(x)\nx = np.linspace(1,np.exp(1),100)\nnp.mean((1+1/x)*f(x)) * (np.exp(1)-1)\n\n6.409521328970472\n\n\n\n\n문제 6. – 20점\n\n(2)번만 맞추어도 정답으로 인정\n\n(1) \\(f'(x)=x\\) 일 경우 \\(f(x)\\)의 그래프 개형을 그려라.\n(2) \\(f'(x)=|\\sin(x)|\\cos(x)\\) 일때 \\(f(x)\\)의 그래프 개형을 그려라.5\n5 2024년 수능 30번 변형\n\\(-3&lt;x&lt;3\\) 에서의 개형을 그릴것\n\n\n# 시각화예시\n\n\n\n\n\n\n\n\n(풀이)\n\nx = np.linspace(-3,3,101)\nff = np.abs(np.sin(x))*np.cos(x)\nf = np.cumsum(ff) * 0.06 \n\n\nplt.plot(x,ff)\nplt.plot(x,f)\n\n\n\n\n\n\n\n\n\n\n문제 7. – 30점\n첫째항이 1이고 공차가 \\(0&lt;d&lt;1\\) 인 등차수열에서, \\(\\sum_{n=1}^{75}a_n=1046.25\\) 를 만족하는 \\(d\\)를 찾아라.\n힌트1: 첫째항이 1이고 공차가 \\(d&gt;0\\)인 등차수열의 일반항은 \\(a_n = 1 +(n-1)d\\)와 같이 표현할 수 있다.\n힌트2: \\(d\\)는 아래중 하나의 값을 가진다.\n\nnp.linspace(0,1,101)[1:-1]\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n(풀이)\n\ndef func(d):\n    n = np.arange(1,76)\n    an = 1+(n-1)*d\n    return np.abs(np.sum(an)-1046.25)\n\n\nd_arr = np.linspace(0,1,101)[1:-1]\nd_arr[np.argmin(list(map(func,d_arr)))]\n\n0.35000000000000003\n\n\n\n\n\n\n\n\nNote\n\n\n\n정답을 구하지 못하여도 논리전개가 올바르면 만점처리함. 노가다로 답을 구한 경우 정답으로 인정하지 않음."
  },
  {
    "objectID": "posts/01wk-2.html#a.-함수를-선언하는-두-가지-방법",
    "href": "posts/01wk-2.html#a.-함수를-선언하는-두-가지-방법",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "A. 함수를 선언하는 두 가지 방법",
    "text": "A. 함수를 선언하는 두 가지 방법\n- 방법1: def를 이용하는 방법\n\ndef f(x):\n    return x+1\n\n\nf(3)\n\n4\n\n\n- 방법2: lambda를 사용하는 방법\n\nf = lambda x: x+1\n\n\nf(3)\n\n4"
  },
  {
    "objectID": "posts/01wk-2.html#b.-list와-np.array의-차이점",
    "href": "posts/01wk-2.html#b.-list와-np.array의-차이점",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "B. list와 np.array의 차이점",
    "text": "B. list와 np.array의 차이점\n- 리스트는 수학친화적이지 않다.\n\nlst1 = [1,2,3]\nlst2 = [-1, -2, -3]\n\n\nlst1+lst2\n\n[1, 2, 3, -1, -2, -3]\n\n\n- 넘파이는 수학친화적이다.\n\narr1 = np.array([1,2,3])\narr2 = np.array([-1, -2, -3])\n\n\narr1+arr2\n\narray([0, 0, 0])"
  },
  {
    "objectID": "posts/01wk-2.html#c.-인덱스로-벡터의-원소를-뽑는-방법",
    "href": "posts/01wk-2.html#c.-인덱스로-벡터의-원소를-뽑는-방법",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "C. 인덱스로 벡터의 원소를 뽑는 방법",
    "text": "C. 인덱스로 벡터의 원소를 뽑는 방법\n\nx = [11,22,33,-22,-33,-44]\n\n- 첫번째 원소를 뽑고 싶다면?\n\nx[0]\n\n11\n\n\n- 두번째 원소를 뽑고 싶다면?\n\nx[1]\n\n22\n\n\n- 마지막 원소를 뽑고 싶다면?\n\nx[5]\n\n-44\n\n\n\nx[-1]\n\n-44\n\n\n- 마지막에서 두번째 원소를 뽑고 싶다면?\n\nx[4]\n\n-33\n\n\n\nx[-2]\n\n-33\n\n\n- index = 0,1,2 에 해당하는 원소만 추출\n\nx[0:3] # 마지막 인덱스 3은 포함되지 않음 \n\n[11, 22, 33]\n\n\n- index = 2,3,4 에 해당하는 원소만 추출\n\nx[2:5] # 2,3,4에 해당하는 인덱스만 추출\n\n[33, -22, -33]\n\n\n- x[0:3]와 같이 처음 시작점이 0인 경우 생략가능\n\nx[:3] \n\n[11, 22, 33]\n\n\n- x[k:]와 같은 코드는 index=k에서 끝까지 뽑는다는 의미이다.\n\nx[3:6] #3,4,5\n\n[-22, -33, -44]\n\n\n\nx[3:]\n\n[-22, -33, -44]"
  },
  {
    "objectID": "posts/01wk-2.html#d.-np.cumsum-np.cumprod",
    "href": "posts/01wk-2.html#d.-np.cumsum-np.cumprod",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "D. np.cumsum(), np.cumprod()",
    "text": "D. np.cumsum(), np.cumprod()\n- 누적합\n\narr = np.array([1,-1,1,-1,1,-1])\narr\n\narray([ 1, -1,  1, -1,  1, -1])\n\n\n\nnp.cumsum(arr)\n\narray([1, 0, 1, 0, 1, 0])\n\n\n- 누적곱\n\narr = np.array([1,2,3,4])\narr\n\narray([1, 2, 3, 4])\n\n\n\nnp.cumprod(arr)\n\narray([ 1,  2,  6, 24])"
  },
  {
    "objectID": "posts/01wk-2.html#e.-plt.plot",
    "href": "posts/01wk-2.html#e.-plt.plot",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "E. plt.plot()",
    "text": "E. plt.plot()\n- 예시1: \\(x\\)없이 그리기 (라인)\n\ny=[2,3,5,2]\nplt.plot(y)\n\n\n\n\n\n\n\n\n- 예시2: \\(x\\)없이 그리기 (점)\n\ny=[2,3,5,2]\nplt.plot(y,'o')\n\n\n\n\n\n\n\n\n- 예시3: \\((x,y)\\)를 전달하여 그리기(점)\n\nx=[20,21,22,23]\ny=[2,3,5,2]\nplt.plot(x,y,'o')\n\n\n\n\n\n\n\n\n- 예시4: 겹쳐서 그리기\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o')\nplt.plot(x,y2,'--o')\n\n\n\n\n\n\n\n\n- 예시5: 겹쳐서 그리기 + 라벨\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o',label=\"y1\")\nplt.plot(x,y2,'--o',label=\"y2\")\nplt.legend()\n\n\n\n\n\n\n\n\n- 예시5: 겹쳐서 그리기 + latex 라벨\n\nx=[20,21,22,23]\ny1=[2,3,5,-2]\ny2=[2.5 ,3.5 ,5.5 , -2.5]\nplt.plot(x,y1,'--o',label=r\"$y_1$\")\nplt.plot(x,y2,'--o',label=r\"$y_2$\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nlatex수식은 이 수업에서 필수사항은 아님\nlatex수식을 사용할 수 없어도 시험점수를 획득할때 아무런 불이익이 없음."
  },
  {
    "objectID": "posts/01wk-2.html#f.-np.argmax-np.argmin",
    "href": "posts/01wk-2.html#f.-np.argmax-np.argmin",
    "title": "01wk-2: 파이썬은 좋은 계산기다 (1)",
    "section": "F. np.argmax, np.argmin",
    "text": "F. np.argmax, np.argmin\n- 예시1\n\narr = np.array([1,2,3,2,1,0])\narr\n\narray([1, 2, 3, 2, 1, 0])\n\n\n\nnp.argmax(arr),np.argmin(arr)\n\n(2, 5)\n\n\n# 예제 – 두 함수의 교점\n\\(-1 \\leq x \\leq 3\\) 에서\n\n\\(f(x)=(x-1)^2\\) 와\n\\(g(x)=-2x+5\\)\n\n의 교점의 좌표를 구하여라.\n(풀이)\n\nx = np.linspace(-1,3,101)\nf = (x-1)**2\ng = -2*x+5 \nplt.plot(x,f,label=r\"$f(x)=(x-1)^2$\")\nplt.plot(x,g,label=r\"$g(x)=-2x+5$\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nx[np.argmin(abs(f-g))]\n\n2.0\n\n\n\n2,(2-1)**2\n\n(2, 1)\n\n\n\n이것이 교점의 좌표"
  },
  {
    "objectID": "posts/QuizSample.html",
    "href": "posts/QuizSample.html",
    "title": "A0: Quiz 1 (예상문제)",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n\n\n\n\nNote\n\n\n\n\n이 문항은 예시일 뿐이며, 본 문항들이 그대로 시험에 출제되지는 않음.\n일부문항은 숫자를 바꿔서 출제되거나 그대로 출제될 수 있음.\n일부문항은 모범답안이 제시되어 있음. (참고용으로..)\n예상문제를 풀기 어려운 경우 질문가능함 (힌트를 주거나 풀이를 알려줄 수 있음, 혹은 학생이 풀이한 답안을 검토하고 피드백 줄 수 있음)\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n모든 문항은 부분점수 없음. (예를들어 문제1-(1)의 경우 p까지는 생성하였지만 그래프를 그리지 못한 경우 0점처리함)\n일부문항은 부분문제를 모두 맞출경우만 정답으로 인정함. 예를들면 문제2와 같은 경우.\n.ipynb 파일 형태로 제출된 답안지만 채점하며 그 외의 형식 (.hwp등)은 채점하지 않음. 즉 0점 처리함. 제출방법 모르면 물어볼것!\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\n전북대 학생들을 시험당일 학생증을 지참할 것. (출석체크 및 본인확인) 학생증 외에 신분증 여권등도 가능.\n부정행위 (카카오톡 채팅을 통한 코드공유, 생성형모델 사용, 대리시험 등) 적발시 F 처리함.\n퀴즈 중 지각할 경우 지각사실을 기록함. 하지만 별다른 감점은 하지 않음.\n\n\n\n\n문제 1.\n(1) \\(0&lt;p&lt;1\\) 인 범위에서 \\(p(1-p)\\)의 그래프를 그려라. – 5점\n(풀이)\n\np = np.linspace(1/100,1,100)[:-1]\np\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n\nplt.plot(p,p*(1-p))\n\n\n\n\n\n\n\n\n(2) \\(0&lt;p&lt;1\\) 의 범위에서 \\(p(1-p)\\)를 최대로 만드는 \\(p\\) 값을 파이썬을 이용하여 계산하라. – 5점\n\n# 힌트: 손으로 풀어보면 답은 0.5라는건 알겠죠? \n\n(3) 아래와 같이 50개의 숫자를 나열한 배열 \\({\\bf x}=[x_1,x_2,\\dots,x_n]\\)을 상상하자. – 10점\n\nx = np.array([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n              0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n              0, 0, 0, 0, 1, 0])\nx\n\narray([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0])\n\n\n위와 같은 \\(x_i\\)에 대하여 아래와 같은 함수 \\(l(p)\\)를 정의하고 \\(0&lt;p&lt;1\\)에서의 \\(l(p)\\)의 그래프를 그려라.\n\\[l(p)=\\sum_{i=1}^nx_i \\log p +\\left(n-\\sum_{i=1}^{n}x_i \\right)\\log(1-p)\\]\nhint\n\n\\(n=50\\) 으로 설정해야겠죠?\n\\(\\sum_{i=1}^{50}x_i=s\\)를 미리 계산하고 \\(s\\)를 이용하여 함수 \\(l(p)=s\\log p + (50-s)\\log(1-p)\\) 를 정의하세요.\n\n\n# 시각화예시\n\n/tmp/ipykernel_74601/1320384517.py:2: RuntimeWarning: divide by zero encountered in log\n  return np.log(p)*np.sum(x) + (50-np.sum(x))*np.log(1-p)\n\n\n\n\n\n\n\n\n\n(4) 파이썬을 이용하여 아래를 근사계산하라. – 5점\n\\[\\lim_{h \\to 0}\\frac{l(0.32+h)-l(0.32)}{h}\\]\n\n# 힌트: 답은 0이에요\n\n(5) \\(0&lt;p&lt;1\\)의 범위에서 \\(l(p)\\)를 최대로 만드는 \\(p\\)의 값을 구하라. 즉 \\(\\underset{p}{\\operatorname{argmax}} l(p)\\)를 구하라. – 5점\n\n# 힌트: 답은 0.32\n\n\n\n\n\n\n\nWarning\n\n\n\n1-(5)에서 문제 오류가 있어 수정했습니다.\n\n수정전: “\\(0&lt;p&lt;1\\)” 의 범위에서 \\(l(p)\\)를 최대값을 구하라.”\n수정후: “\\(0&lt;p&lt;1\\)” 의 범위에서 \\(l(p)\\)를 최대로 만드는 \\(p\\)의 값을 구하라. 즉 \\(\\underset{p}{\\operatorname{argmax}} l(p)\\)를 구하라.”\n\n\n\n\n\n문제 2.\n\n모두 맞출 경우만 정답으로 인정\n\n(1) 아래의 list에서 마지막 원소를 뽑는 코드를 작성하라.\n\nlst = [11,22,33,44,55] \nlst \n\n[11, 22, 33, 44, 55]\n\n\n(풀이)\n\nlst[-1]\n\n55\n\n\n(2) 아래의 list에서 마지막 2개의 원소를 제외하고 뽑는 코드를 작성하라.\n\nlst = [11,22,33,44,55]\nlst\n\n[11, 22, 33, 44, 55]\n\n\n(풀이)\n\nlst[:-2]\n\n[11, 22, 33]\n\n\n(3) lambda를 이용하여 \\(f(x)=x^2+1\\)에 대응하는 함수를 선언하라.\n(4) 아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(50)\nx\n\narray([0.81768226, 0.04953212, 0.83868626, 0.61977707, 0.12254052,\n       0.11712779, 0.8795562 , 0.97941543, 0.90986893, 0.96667407,\n       0.59164493, 0.84014933, 0.89714578, 0.76530684, 0.40073371,\n       0.38061141, 0.4305124 , 0.40991094, 0.00972398, 0.59732079,\n       0.8852783 , 0.31328711, 0.6141936 , 0.36838019, 0.08044368,\n       0.47142422, 0.43324944, 0.22441988, 0.01174913, 0.91587271,\n       0.88325068, 0.32707103, 0.45758847, 0.55495369, 0.55845013,\n       0.75018778, 0.29947949, 0.85888413, 0.60465549, 0.00651133,\n       0.80605888, 0.06988897, 0.76763953, 0.72438164, 0.06247252,\n       0.97571034, 0.76681327, 0.12138996, 0.14946193, 0.08540348])\n\n\n생성된 값의 최대값을 출력하는 파이썬 코드를 작성하라.\n\n# 힌트: 답은 0.9794154308159254\n\n(5) 아래의 코드를 실행하여 x를 생성하라.\n\nnp.random.seed(43052)\nx = np.random.rand(50)\nx\n\narray([0.81768226, 0.04953212, 0.83868626, 0.61977707, 0.12254052,\n       0.11712779, 0.8795562 , 0.97941543, 0.90986893, 0.96667407,\n       0.59164493, 0.84014933, 0.89714578, 0.76530684, 0.40073371,\n       0.38061141, 0.4305124 , 0.40991094, 0.00972398, 0.59732079,\n       0.8852783 , 0.31328711, 0.6141936 , 0.36838019, 0.08044368,\n       0.47142422, 0.43324944, 0.22441988, 0.01174913, 0.91587271,\n       0.88325068, 0.32707103, 0.45758847, 0.55495369, 0.55845013,\n       0.75018778, 0.29947949, 0.85888413, 0.60465549, 0.00651133,\n       0.80605888, 0.06988897, 0.76763953, 0.72438164, 0.06247252,\n       0.97571034, 0.76681327, 0.12138996, 0.14946193, 0.08540348])\n\n\n생성된 값중 0.6와 가장 가까운 값을 출력하는 파이썬 코드를 작성하라.\n\n# 힌트: 답은 0.5973207921703583\n\n\n\n문제 3.\n(1) \\(\\frac{\\pi}{2}&lt;x&lt;\\frac{3}{2}\\pi\\) 에서 \\(f(x)=\\sin(\\frac{3}{2}x)\\) 와 \\(g(x)=\\cos(2x)\\sin(5x)\\) 의 교점의 수를 구하여라.\n(풀이)\n\nx = np.linspace(np.pi/2,3/2*np.pi,100)[:-1]\nx\n\narray([1.57079633, 1.60252959, 1.63426285, 1.6659961 , 1.69772936,\n       1.72946262, 1.76119588, 1.79292914, 1.8246624 , 1.85639566,\n       1.88812892, 1.91986218, 1.95159544, 1.9833287 , 2.01506195,\n       2.04679521, 2.07852847, 2.11026173, 2.14199499, 2.17372825,\n       2.20546151, 2.23719477, 2.26892803, 2.30066129, 2.33239455,\n       2.3641278 , 2.39586106, 2.42759432, 2.45932758, 2.49106084,\n       2.5227941 , 2.55452736, 2.58626062, 2.61799388, 2.64972714,\n       2.6814604 , 2.71319366, 2.74492691, 2.77666017, 2.80839343,\n       2.84012669, 2.87185995, 2.90359321, 2.93532647, 2.96705973,\n       2.99879299, 3.03052625, 3.06225951, 3.09399276, 3.12572602,\n       3.15745928, 3.18919254, 3.2209258 , 3.25265906, 3.28439232,\n       3.31612558, 3.34785884, 3.3795921 , 3.41132536, 3.44305862,\n       3.47479187, 3.50652513, 3.53825839, 3.56999165, 3.60172491,\n       3.63345817, 3.66519143, 3.69692469, 3.72865795, 3.76039121,\n       3.79212447, 3.82385772, 3.85559098, 3.88732424, 3.9190575 ,\n       3.95079076, 3.98252402, 4.01425728, 4.04599054, 4.0777238 ,\n       4.10945706, 4.14119032, 4.17292358, 4.20465683, 4.23639009,\n       4.26812335, 4.29985661, 4.33158987, 4.36332313, 4.39505639,\n       4.42678965, 4.45852291, 4.49025617, 4.52198943, 4.55372268,\n       4.58545594, 4.6171892 , 4.64892246, 4.68065572])\n\n\n\nplt.plot(x,np.sin(1.5*x))\nplt.plot(x,np.cos(2*x)*np.sin(5*x))\n\n\n\n\n\n\n\n\n\n# 답 3개\n\n(2) \\(a_n=\\frac{1}{n(n+1)}\\) 일때 \\(S_1,\\dots,S_{20}\\)을 구하여라."
  },
  {
    "objectID": "posts/02wk-2.html#a.-int-float-bool",
    "href": "posts/02wk-2.html#a.-int-float-bool",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "A. int, float, bool",
    "text": "A. int, float, bool\n- int형\n\na=100\n\n\ntype(a)\n\nint\n\n\n- float형\n\na=1.2*3\na\n\n3.5999999999999996\n\n\n\ntype(a)\n\nfloat\n\n\n\na?\n\n\nType:        float\nString form: 3.5999999999999996\nDocstring:   Convert a string or number to a floating point number, if possible.\n\n\n\n- bool형\n\na=True ## 숫자1으로 생각할 수 있음 \nb=False ## 숫자0으로 생각할 수 있음\n\n\ntype(a)\n\nbool\n\n\n\ntype(b)\n\nbool\n\n\n\na?\n\n\nType:        bool\nString form: True\nDocstring:  \nbool(x) -&gt; bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n\nb?\n\n\nType:        bool\nString form: False\nDocstring:  \nbool(x) -&gt; bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n- bool형의 연산\n\na=True ## 1\nb=False ## 0 \n\n\na+b\n\n1\n\n\n\na*b \n\n0\n\n\n- 형태변환: float \\(\\to\\) int\n(예시1)\n\na=3.0\ntype(a)\n\nfloat\n\n\n\na=int(a)\n\n\ntype(a)\n\nint\n\n\n(예시2) 이경우는 정보의 손실이 발생\n\na=3.14 \nint(a)\n\n3\n\n\n- 형태변환: int \\(\\to\\) float\n\na=3\ntype(a)\n\nint\n\n\n\na=float(a)\ntype(a)\n\nfloat\n\n\n- 형태변환: bool \\(\\to\\) int/float, int/float \\(\\to\\) bool\n(예시1)\n\na=True\ntype(a)\n\nbool\n\n\n\nint(a)\n\n1\n\n\n\nfloat(a)\n\n1.0\n\n\n(예시2)\n\na=1 \nbool(a)\n\nTrue\n\n\n\na=0\nbool(a)\n\nFalse\n\n\n(예시3)\n\na=1.0\nbool(a)\n\nTrue\n\n\n\na=0.0\nbool(a)\n\nFalse"
  },
  {
    "objectID": "posts/02wk-2.html#b.-1차원-자료의-형태변환",
    "href": "posts/02wk-2.html#b.-1차원-자료의-형태변환",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "B. 1차원 자료의 형태변환",
    "text": "B. 1차원 자료의 형태변환\n- list \\(\\to\\) np.array\n\n[1,2,3]\n\n[1, 2, 3]\n\n\n\nnp.array([1,2,3])\n\narray([1, 2, 3])\n\n\n- np.array \\(\\to\\) list\n\nnp.linspace(1,10,10)\n\narray([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])\n\n\n\nlist(np.linspace(1,10,10))\n\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n\n\n- range \\(\\to\\) list, np.array\n\nrange(10) # 이게 뭐야??\n\nrange(0, 10)\n\n\n\nlist(range(10)) # 리스트화 \n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nnp.array(range(10)) # 넘파이배열화\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n보충학습: range의 다양한 활용을 익혀보자.\n\nlist(range(10))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(0,10))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(3,10))\n\n[3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(3,10,2))\n\n[3, 5, 7, 9]\n\n\n- map 결과물 \\(\\to\\) list\n\nf = lambda x: x**2\nlist(map(f,[1,2,3])) # [f(1),f(2),f(3)]\n\n[1, 4, 9]\n\n\n- map 결과물 \\(\\to\\) np.array로는 불가능\n\nf = lambda x: x**2\nnp.array(map(f,[1,2,3]))\n\narray(&lt;map object at 0x7f3a09e887f0&gt;, dtype=object)\n\n\n\n# 아래는 가능 \nf = lambda x: x**2\nnp.array(list(map(f,[1,2,3])))\n\narray([1, 4, 9])"
  },
  {
    "objectID": "posts/02wk-2.html#a.-np.random.rand",
    "href": "posts/02wk-2.html#a.-np.random.rand",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "A. np.random.rand()",
    "text": "A. np.random.rand()\n- 0~1 사이에서 10개의 난수생성\n\nnp.random.rand(10)\n\narray([0.43345371, 0.48324862, 0.48046707, 0.41056049, 0.56188841,\n       0.58762904, 0.6645858 , 0.60568829, 0.83033841, 0.4660302 ])\n\n\n- 0~2 사이에서 10개의 난수생성\n\nnp.random.rand(10)*2\n\narray([0.44894259, 1.8416822 , 0.50164259, 1.01601855, 0.21073439,\n       1.8049244 , 0.86548008, 0.38544391, 0.13816874, 1.22858088])\n\n\n- 1~3 사이에서 10개의 난수생성\n\nnp.random.rand(10)*2 + 1\n\narray([1.58013021, 1.96358901, 2.62137695, 1.74617053, 2.38021729,\n       1.00043864, 1.42801985, 1.65666288, 2.80405753, 1.23691426])"
  },
  {
    "objectID": "posts/02wk-2.html#b.-np.random.randn",
    "href": "posts/02wk-2.html#b.-np.random.randn",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "B. np.random.randn()",
    "text": "B. np.random.randn()\n- N(0,1)에서 10개의 난수생성\n\nnp.random.randn(10) # 표준정규분포에서 10개의 샘플 추출 \n\narray([-0.88043002, -0.75000612, -0.46393189,  0.73721724, -0.66208613,\n        0.84740615, -0.31835775,  0.60157946,  0.62744116,  2.06223706])\n\n\n- N(1,1)에서 10개 난수생성\n\nnp.random.randn(10) + 1\n\narray([ 1.50801901,  0.06945884,  2.52305677,  0.25080242, -0.25058225,\n        1.81696343, -0.47341629,  0.51879014,  2.55038708,  0.58788704])\n\n\n- N(0,4) 에서 10개 난수생성\n\nnp.random.randn(10)*2\n\narray([-2.26593271, -1.62304968, -1.71372316,  2.93723947,  0.63497107,\n        2.96605112,  0.71536533,  2.64037886,  0.10782247, -2.97822434])\n\n\n- N(3,4) 에서 10개 난수생성\n\nnp.random.randn(10)*2+3 \n\narray([ 3.71923104,  1.77496469,  4.04116354,  4.27443252,  2.59130929,\n        5.48551961, -1.09164073,  3.08090641,  0.88721243,  3.34579357])"
  },
  {
    "objectID": "posts/02wk-2.html#c.-np.random.randint",
    "href": "posts/02wk-2.html#c.-np.random.randint",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "C. np.random.randint()",
    "text": "C. np.random.randint()\n- [0,7) 에서 10개의 정수생성\n\nnp.random.randint(0,7,size=10) # [0,7)의 범위에서 10개의 정수 생성 \n\narray([0, 1, 5, 0, 2, 3, 1, 3, 0, 5])\n\n\n- [10,20) 에서 10개의 정수생성\n\nnp.random.randint(10,20,size=10) # [0,7)의 범위에서 10개의 정수 생성 \n\narray([11, 10, 10, 19, 13, 11, 11, 11, 15, 19])"
  },
  {
    "objectID": "posts/02wk-2.html#d.-np.random.choice",
    "href": "posts/02wk-2.html#d.-np.random.choice",
    "title": "02wk-2: 파이썬은 좋은 계산기다 (2)",
    "section": "D. np.random.choice()",
    "text": "D. np.random.choice()\n- [11,22,33] 에서 중복허용하여 20개 추출\n\nnp.random.choice([11,22,33],20) \n\narray([33, 33, 11, 33, 11, 11, 33, 22, 11, 33, 33, 33, 22, 33, 11, 11, 22,\n       22, 33, 22])\n\n\n- [11,22,33] 에서 중복허용하여 3개 추출\n\nnp.random.seed(4)\nnp.random.choice([11,22,33],3) \n\narray([33, 33, 22])\n\n\n\nnp.random.seed(5)\nnp.random.choice([11,22,33],3) \n\narray([33, 22, 33])\n\n\n- [11,22,33] 에서 중복허용하지 않고 3개 추출\n\nnp.random.choice([11,22,33],3,replace=False) \n\narray([22, 33, 11])"
  },
  {
    "objectID": "posts/01wk-1.html",
    "href": "posts/01wk-1.html",
    "title": "01wk-1: 강의소개",
    "section": "",
    "text": "1. 전북대 + 충남대\n- 전북대는 전북대학생끼리 성적평가.\n- 충남대는 충남대학생끼리 성적평가.\n- 충남대 학생의 경우 교양과목임을 감안하여 채점할 예정임.\n\n\n2. 플립러닝\n- 수업: 매주 금요일 오후까지 강의홈페이지에 업로드 될 예정.\n\n수업은 영상업로드 방식 (각자 수강)\n영상시청에 대한 별도의 출석체크는 없음.\n\n- 퀴즈: 매주 수요일 수업시간에 퀴즈를 볼 예정임.\n\n시험은 오픈북이며 구글검색, 강의노트 참고등을 허용함.\nChatGPT는 허용하지 않음.\n\n\n\n3. 성적처리 방식\n- 출석 10%, 퀴즈 50%, 중간 20%, 기말 20%\n\n출석은 매주 수요일 퀴즈시간에 체크할 예정임. (따라서 퀴즈를 보면 출석점수는 자동으로 인정)\n사실상 퀴즈의 점수비중이 60%"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]